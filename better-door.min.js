/*!
 * my-mcbe-script-better-door.js v0.0.0 (https://github.com/PFiS1737/my-mcbe-script#readme)
 * Copyright 2022-2023 PFiS1737
 * Licensed under MIT
 * 
 * This file is automatically generated, please do not change it.
 */
import { world, MinecraftDimensionTypes, Dimension, Entity, system, BlockPermutation, MinecraftBlockTypes, Player, GameMode } from '@minecraft/server';
import { MessageFormData, FormCancelationReason, ModalFormResponse, MessageFormResponse, ActionFormResponse, ModalFormData, ActionFormData } from '@minecraft/server-ui';

class BetterConsole {
    static error(err) {
        console.error(`${err}\n${err.stack}`);
    }
}

function each(target, callbackfn, thisArg) {
    if (Array.isArray(target)) target.forEach(callbackfn, thisArg);
    else if (target && target[Symbol.iterator]) for (let item of target) callbackfn.call(thisArg, item, target);
    else if (typeof target === "object") each(Object.keys(target), (key, i) => callbackfn.call(thisArg, target[key], key, i, target));
}

async function eachAsync(target, asyncfn, thisArg) {
    if (Array.isArray(target)) for (let i = 0; i < target.length; i++) await asyncfn.call(thisArg, target[i], i, target);
    else if (target && target[Symbol.iterator]) for (let item of target) await asyncfn.call(thisArg, item, target);
    else if (typeof target === "object") await eachAsync(Object.keys(target), async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target));
}

function safeEval(code, context = {}) {
    const fn = new Function(...Object.keys(context), `return ${code}`);
    return fn(...Object.values(context))
}

function deserialize(str) {
    try {
        return JSON.parse(str)
    } catch (err) {
        // console.warn(`Could not use \`JSON.parse()\` to deserialise the string, trying \`safeEval()\`.`, { string: str })
        return safeEval(`(${str})`)
    }
}

const AsyncFunction = (async function() {}).constructor;

const overworld = world.getDimension(MinecraftDimensionTypes.overworld);

const CUSTOM_COMMAND_SET = new Set();

class Commands {
    static run(commandString, target = overworld) {
        if (
            target instanceof Dimension ||
            target instanceof Entity
        ) return target.runCommand(commandString)
        else throw new TypeError("Target must be Entity or Dimension.")
    }
    static async asyncRun(commandString, target = overworld) {
        if (
            target instanceof Dimension ||
            target instanceof Entity
        ) {
            const customCommands = [...CUSTOM_COMMAND_SET]
                .filter(({ regex }) => regex.test(commandString))
                .map(e => e.runner);
            if (customCommands.length) await eachAsync(customCommands, async runner => await runner(commandString, target));
            else return await target.runCommandAsync(commandString)
        }
        else throw new TypeError("Target must be Entity or Dimension.")
    }
    static register(prefix, command, /* grammar, */ callback) {
        if (prefix.startsWith("/")) throw new Error("Unable to register slash commands.")
        
        const regex = new RegExp(`^${prefix}${command}( |$)`);
        const runner = async (commandString, target) => {
            // callback(new Parser(commandString, grammar), target)
            const argv = commandString
                .split(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g)
                .filter(e => e.trim().length > 0);
            await callback(argv, target);
        };
        
        CUSTOM_COMMAND_SET.add({ regex, runner });
        
        world.beforeEvents.chatSend.subscribe(event => {
            if (regex.test(event.message)) {
                event.cancel = true;
                
                runner(event.message, event.sender)
                    .catch(BetterConsole.error);
            }
        });
    }
}

function asyncRun(fn) {
    return new Promise((resolve, reject) => {
        system.run(() => {
            try {
                resolve(fn());
            } catch (err) {
                reject(err);
            }
        });
    })
}

function errorHandler(errText, target) {
    const err = new Error(errText);
    target.sendMessage(err.toString());
    return err
}

function waitForFirstPlayerInitialSpawn() {
    const players = world.getAllPlayers();
    if (players.length) return Promise.resolve(players[0])
    else return new Promise(resolve => {
        const callback = world.afterEvents.playerSpawn.subscribe(event => {
            if (event.initialSpawn) resolve(event.player);
            world.afterEvents.playerSpawn.unsubscribe(callback);
        });
    })
}

function getOrAddObjective(id, name) {
    const objective = world.scoreboard.getObjective(id);
    if (!objective && !name) throw new Error(`Couldn't find objective "${id}".`)
    else if (!objective) return world.scoreboard.addObjective(id, name)
    else return objective
}

class Dialog {
    static async confirm({
        title = "确认",
        body,
        target,
        onCancel = async () => {},
        onConfirm = async () => {}
    }) {
        if (!body || !target) throw new Error()
        const form = await asyncRun(() => {
            return new Dialog({
                dialog: new MessageFormData()
                    .title(title)
                    .body(body)
                    .button1("CANCEL")
                    .button2("OK"),
                onClose: onCancel,
                onSelectButton1: onCancel,
                onSelectButton2: onConfirm
            })
        });
        
        return await form.show(target)
    }
    
    constructor({
        dialog,
        onClose = async () => {},
        onSubmit = async () => {},
        onSelectButton1 = async () => {},
        onSelectButton2 = async () => {},
        onSelect = async () => {}
    }) {
        this.dialog = dialog;
        this.onSubmit = onSubmit;
        this.onSelectButton1 = onSelectButton1;
        this.onSelectButton2 = onSelectButton2;
        this.onSelect = onSelect;
        this.onClose = onClose;
    }
    async show(target) {
        let response;
        target.sendMessage("[!] 新对话框已发送，请关闭命令输入栏或其他对话框");
        do {
            response = await this.dialog.show(target);
        } while (response.cancelationReason === FormCancelationReason.UserBusy)
        
        if (response.canceled && response.cancelationReason === FormCancelationReason.UserClosed) return await this.onClose()
        else if (response instanceof ModalFormResponse) return await this.onSubmit(response.formValues)
        else if (response instanceof MessageFormResponse) {
            if (response.selection === 0) return await this.onSelectButton1()
            else if (response.selection === 1) return await this.onSelectButton2()
        }
        else if (response instanceof ActionFormResponse) return await this.onSelect(response.selection)
        
        return response
    }
}

/*
  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_seed(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister$1 = function(seed) {
	if (seed == undefined) {
		seed = new Date().getTime();
	}

	/* Period parameters */
	this.N = 624;
	this.M = 397;
	this.MATRIX_A = 0x9908b0df;   /* constant vector a */
	this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
	this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

	this.mt = new Array(this.N); /* the array for the state vector */
	this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */

	if (seed.constructor == Array) {
		this.init_by_array(seed, seed.length);
	}
	else {
		this.init_seed(seed);
	}
};

/* initializes mt[N] with a seed */
/* origin name init_genrand */
MersenneTwister$1.prototype.init_seed = function(s) {
	this.mt[0] = s >>> 0;
	for (this.mti=1; this.mti<this.N; this.mti++) {
		var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);
		this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)
		+ this.mti;
		/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
		/* In the previous versions, MSBs of the seed affect   */
		/* only MSBs of the array mt[].                        */
		/* 2002/01/09 modified by Makoto Matsumoto             */
		this.mt[this.mti] >>>= 0;
		/* for >32 bit machines */
	}
};

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister$1.prototype.init_by_array = function(init_key, key_length) {
	var i, j, k;
	this.init_seed(19650218);
	i=1; j=0;
	k = (this.N>key_length ? this.N : key_length);
	for (; k; k--) {
		var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);
		this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))
		+ init_key[j] + j; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++; j++;
		if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
		if (j>=key_length) j=0;
	}
	for (k=this.N-1; k; k--) {
		var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);
		this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))
		- i; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
	}

	this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
};

/* generates a random number on [0,0xffffffff]-interval */
/* origin name genrand_int32 */
MersenneTwister$1.prototype.random_int = function() {
	var y;
	var mag01 = new Array(0x0, this.MATRIX_A);
	/* mag01[x] = x * MATRIX_A  for x=0,1 */

	if (this.mti >= this.N) { /* generate N words at one time */
		var kk;

		if (this.mti == this.N+1)  /* if init_seed() has not been called, */
			this.init_seed(5489);  /* a default initial seed is used */

		for (kk=0;kk<this.N-this.M;kk++) {
			y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
			this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		for (;kk<this.N-1;kk++) {
			y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
			this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
		this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];

		this.mti = 0;
	}

	y = this.mt[this.mti++];

	/* Tempering */
	y ^= (y >>> 11);
	y ^= (y << 7) & 0x9d2c5680;
	y ^= (y << 15) & 0xefc60000;
	y ^= (y >>> 18);

	return y >>> 0;
};

/* generates a random number on [0,0x7fffffff]-interval */
/* origin name genrand_int31 */
MersenneTwister$1.prototype.random_int31 = function() {
	return (this.random_int()>>>1);
};

/* generates a random number on [0,1]-real-interval */
/* origin name genrand_real1 */
MersenneTwister$1.prototype.random_incl = function() {
	return this.random_int()*(1.0/4294967295.0);
	/* divided by 2^32-1 */
};

/* generates a random number on [0,1)-real-interval */
MersenneTwister$1.prototype.random = function() {
	return this.random_int()*(1.0/4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on (0,1)-real-interval */
/* origin name genrand_real3 */
MersenneTwister$1.prototype.random_excl = function() {
	return (this.random_int() + 0.5)*(1.0/4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on [0,1) with 53-bit resolution*/
/* origin name genrand_res53 */
MersenneTwister$1.prototype.random_long = function() {
	var a=this.random_int()>>>5, b=this.random_int()>>>6;
	return (a*67108864.0+b)*(1.0/9007199254740992.0);
};

/* These real versions are due to Isaku Wada, 2002/01/09 added */

var mersenneTwister = MersenneTwister$1;

var MersenneTwister = mersenneTwister;

var twister = new MersenneTwister(Math.random()*Number.MAX_SAFE_INTEGER);

var polyfillCrypto_getrandomvalues = getRandomValues;


function getRandomValues (abv) {
  var l = abv.length;
  while (l--) {
    abv[l] = Math.floor(randomFloat() * 256);
  }
  return abv
}

function randomFloat() {
  return twister.random()
}

// This file is to resolve the `crypto.randomBytes` module used by `serialize-javascript`.

function randomBytes(size) {
    return polyfillCrypto_getrandomvalues(new Uint8Array(size))
}

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

// Generate an internal UID to make the regexp pattern harder to guess.
var UID_LENGTH          = 16;
var UID                 = generateUID();
var PLACE_HOLDER_REGEXP = new RegExp('(\\\\)?"@__(F|R|D|M|S|A|U|I|B|L)-' + UID + '-(\\d+)__@"', 'g');

var IS_NATIVE_CODE_REGEXP = /\{\s*\[native code\]\s*\}/g;
var IS_PURE_FUNCTION = /function.*?\(/;
var IS_ARROW_FUNCTION = /.*?=>.*?/;
var UNSAFE_CHARS_REGEXP   = /[<>\/\u2028\u2029]/g;

var RESERVED_SYMBOLS = ['*', 'async'];

// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their
// Unicode char counterparts which are safe to use in JavaScript strings.
var ESCAPED_CHARS = {
    '<'     : '\\u003C',
    '>'     : '\\u003E',
    '/'     : '\\u002F',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};

function escapeUnsafeChars(unsafeChar) {
    return ESCAPED_CHARS[unsafeChar];
}

function generateUID() {
    var bytes = randomBytes(UID_LENGTH);
    var result = '';
    for(var i=0; i<UID_LENGTH; ++i) {
        result += bytes[i].toString(16);
    }
    return result;
}

function deleteFunctions(obj){
    var functionKeys = [];
    for (var key in obj) {
        if (typeof obj[key] === "function") {
            functionKeys.push(key);
        }
    }
    for (var i = 0; i < functionKeys.length; i++) {
        delete obj[functionKeys[i]];
    }
}

/* module.exports = */ function serialize(obj, options) {
    options || (options = {});

    // Backwards-compatibility for `space` as the second argument.
    if (typeof options === 'number' || typeof options === 'string') {
        options = {space: options};
    }

    var functions = [];
    var regexps   = [];
    var dates     = [];
    var maps      = [];
    var sets      = [];
    var arrays    = [];
    var undefs    = [];
    var infinities= [];
    // var bigInts = [];
    // var urls = [];

    // Returns placeholders for functions and regexps (identified by index)
    // which are later replaced by their string representation.
    function replacer(key, value) {

        // For nested function
        if(options.ignoreFunction){
            deleteFunctions(value);
        }

        if (!value && value !== undefined /* && value !== BigInt(0) */) {
            return value;
        }

        // If the value is an object w/ a toJSON method, toJSON is called before
        // the replacer runs, so we use this[key] to get the non-toJSONed value.
        var origValue = this[key];
        var type = typeof origValue;

        if (type === 'object') {
            if(origValue instanceof RegExp) {
                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Date) {
                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Map) {
                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Set) {
                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';
            }

            if(origValue instanceof Array) {
                var isSparse = origValue.filter(function(){return true}).length !== origValue.length;
                if (isSparse) {
                    return '@__A-' + UID + '-' + (arrays.push(origValue) - 1) + '__@';
                }
            }

            // if(origValue instanceof URL) {
            //     return '@__L-' + UID + '-' + (urls.push(origValue) - 1) + '__@';
            // }
        }

        if (type === 'function') {
            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';
        }

        if (type === 'undefined') {
            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';
        }

        if (type === 'number' && !isNaN(origValue) && !isFinite(origValue)) {
            return '@__I-' + UID + '-' + (infinities.push(origValue) - 1) + '__@';
        }

        // if (type === 'bigint') {
        //     return '@__B-' + UID + '-' + (bigInts.push(origValue) - 1) + '__@';
        // }

        return value;
    }

    function serializeFunc(fn) {
      var serializedFn = fn.toString();
      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {
          throw new TypeError('Serializing native function: ' + fn.name);
      }

      // pure functions, example: {key: function() {}}
      if(IS_PURE_FUNCTION.test(serializedFn)) {
          return serializedFn;
      }

      // arrow functions, example: arg1 => arg1+5
      if(IS_ARROW_FUNCTION.test(serializedFn)) {
          return serializedFn;
      }

      var argsStartsAt = serializedFn.indexOf('(');
      var def = serializedFn.substr(0, argsStartsAt)
        .trim()
        .split(' ')
        .filter(function(val) { return val.length > 0 });

      var nonReservedSymbols = def.filter(function(val) {
        return RESERVED_SYMBOLS.indexOf(val) === -1
      });

      // enhanced literal objects, example: {key() {}}
      if(nonReservedSymbols.length > 0) {
          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'
            + (def.join('').indexOf('*') > -1 ? '*' : '')
            + serializedFn.substr(argsStartsAt);
      }

      // arrow functions
      return serializedFn;
    }

    // Check if the parameter is function
    if (options.ignoreFunction && typeof obj === "function") {
        obj = undefined;
    }
    // Protects against `JSON.stringify()` returning `undefined`, by serializing
    // to the literal string: "undefined".
    if (obj === undefined) {
        return String(obj);
    }

    var str;

    // Creates a JSON string representation of the value.
    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.
    if (options.isJSON && !options.space) {
        str = JSON.stringify(obj);
    } else {
        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);
    }

    // Protects against `JSON.stringify()` returning `undefined`, by serializing
    // to the literal string: "undefined".
    if (typeof str !== 'string') {
        return String(str);
    }

    // Replace unsafe HTML and invalid JavaScript line terminator chars with
    // their safe Unicode char counterpart. This _must_ happen before the
    // regexps and functions are serialized and added back to the string.
    if (options.unsafe !== true) {
        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);
    }

    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && arrays.length === 0 && undefs.length === 0 && infinities.length === 0 /* && bigInts.length === 0 && urls.length === 0 */) {
        return str;
    }

    // Replaces all occurrences of function, regexp, date, map and set placeholders in the
    // JSON string with their string representations. If the original value can
    // not be found, then `undefined` is used.
    return str.replace(PLACE_HOLDER_REGEXP, function (match, backSlash, type, valueIndex) {
        // The placeholder may not be preceded by a backslash. This is to prevent
        // replacing things like `"a\"@__R-<UID>-0__@"` and thus outputting
        // invalid JS.
        if (backSlash) {
            return match;
        }

        if (type === 'D') {
            return "new Date(\"" + dates[valueIndex].toISOString() + "\")";
        }

        if (type === 'R') {
            return "new RegExp(" + serialize(regexps[valueIndex].source) + ", \"" + regexps[valueIndex].flags + "\")";
        }

        if (type === 'M') {
            return "new Map(" + serialize(Array.from(maps[valueIndex].entries()), options) + ")";
        }

        if (type === 'S') {
            return "new Set(" + serialize(Array.from(sets[valueIndex].values()), options) + ")";
        }

        if (type === 'A') {
            return "Array.prototype.slice.call(" + serialize(Object.assign({ length: arrays[valueIndex].length }, arrays[valueIndex]), options) + ")";
        }

        if (type === 'U') {
            return 'undefined'
        }

        if (type === 'I') {
            return infinities[valueIndex];
        }

        // if (type === 'B') {
        //     return "BigInt(\"" + bigInts[valueIndex] + "\")";
        // }

        // if (type === 'L') {
        //     return "new URL(\"" + urls[valueIndex].toString() + "\")"; 
        // }

        var fn = functions[valueIndex];

        return serializeFunc(fn);
    });
}

var md5$1 = {exports: {}};

var crypt = {exports: {}};

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt$1 = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt$1.rotl(n, 8) & 0x00FF00FF | crypt$1.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt$1.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  crypt.exports = crypt$1;
})();

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

var charenc_1 = charenc;

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var isBuffer_1 = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
};

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

(function(){
  var crypt$1 = crypt.exports,
      utf8 = charenc_1.utf8,
      isBuffer = isBuffer_1,
      bin = charenc_1.bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message) && message.constructor !== Uint8Array)
      message = message.toString();
    // else, assume byte array already

    var m = crypt$1.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt$1.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  md5$1.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt$1.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt$1.bytesToHex(digestbytes);
  };

})();

var md5 = md5$1.exports;

const ALL_DATABASES = new Map();

class Database {
    static open(player, dbName) {
        return new this(player, dbName)
    }
    constructor(player, dbName) {
        const id = md5("db:" + dbName + "_" + player.id).slice(8, 24);
        this.id = id;
        this.objective = getOrAddObjective(id, "db:" + dbName);
        this.player = player;
        
        this._syncDataFromScoreboard();
        
        ALL_DATABASES.set(id, this);
    }
    
    store = new Map()
    
    _syncDataFromScoreboard() {
        this.store.clear();
        each(this.objective.getParticipants(), participant => {
            const data = deserialize(participant.displayName);
            const key = Object.keys(data)[0];
            const value = data[key];
            this.store.set(key, { value, participant });
        });
    }
    has(key) {
        return this.store.has(key)
    }
    async delete(key) {
        if (this.has(key)) {
            const { participant } = this.store.get(key);
            await asyncRun(() => this.objective.removeParticipant(participant));
            this.store.delete(key);
            return true
        } else return false
    }
    async clear() {
        await eachAsync(this.store, async ([, { participant }]) => await asyncRun(() => this.objective.removeParticipant(participant)));
        this.store.clear();
    }
    get(key) {
        if (this.has(key)) return this.store.get(key).value
    }
    async set(key, value) {
        await this.delete(key);
        const data = serialize({ [key]: value }).replaceAll("\"", "'");
        if (data.length > 32767) throw new RangeError("Database: Only accepts a string value less than 32767 characters.");
        await asyncRun(() => this.objective.setScore(data, 1));
        // await Commands.asyncRun(`scoreboard players set "${data}" ${this.objective.id} 1`)
        this._syncDataFromScoreboard();
    }
    getAll() {
        const output = {};
        for (const [ key, value ] of this) output[key] = value;
        return output
    }
    *entries() {
        for (const [ key, { value } ] of this.store.entries()) yield [ key, value ];
    }
    *keys() {
        for (const key of this.store.keys()) yield key;
    }
    *values() {
        for (const { value } of this.store.values()) yield value;
    }
    [Symbol.iterator]() {
        return this.entries()
    }
}

class EventEmitter {
    constructor() {
        this._events = {};
    }
    on(eventName, listener) {
        if (listener instanceof AsyncFunction) {
            const _eventName = `${eventName}.async`;
            if (this._events[_eventName]) this._events[_eventName].push(listener);
            else this._events[_eventName] = [ listener ];
        } else {
            if (this._events[eventName]) this._events[eventName].push(listener);
            else this._events[eventName] = [ listener ];
        }
        return this
    }
    once(eventName, listener) {
        if (listener instanceof AsyncFunction) {
            const _eventName = `${eventName}.async`;
            const _listener = async (...args) => {
                await listener(...args);
                this.removeListener(_eventName, _listener);
            };
            if (this._events[_eventName]) this._events[_eventName].push(_listener);
            else this._events[_eventName] = [ _listener ];
        } else {
            const _listener = (...args) => {
                listener(...args);
                this.removeListener(eventName, _listener);
            };
            if (this._events[eventName]) this._events[eventName].push(_listener);
            else this._events[eventName] = [ _listener ];
        }
        return this
    }
    removeListener(eventName, listener) {
        if (this._events[eventName]) {
            const newListeners = [];
            each(this._events[eventName], _listener => {
                if (_listener !== listener) newListeners.push(_listener);
            });
            this._events[eventName] = newListeners;
        }
        return this
    }
    async emit(eventName, ...args) {
        if (this._events[eventName]) {
            each(this._events[eventName], listener => listener(...args));
        }
        await this.asyncEmit(eventName, ...args);
    }
    async asyncEmit(eventName, ...args) {
        const _eventName = `${eventName}.async`;
        if (this._events[_eventName]) {
            await eachAsync(this._events[_eventName], async listener => await listener(...args));
        }
    }
    addListener(eventName, listener) {
        return this.on(eventName, listener)
    }
    off(eventName, listener) {
        return this.removeListener(eventName, listener)
    }
}

class OptionItem {
    constructor({ name, description, values = [], defaultValue, events, reload, _player }) {
        this.events = new EventEmitter();
        this.reload = reload;
        this.name = name;
        this.description = description;
        this.values = new Map(values.map(value => {
            if (typeof value[0] === "object" || value[0] === undefined) value[0] = serialize(value[0]);
            if (value[0] === true && !value[1]) value[1] = "开启";
            else if (value[0] === false && !value[1]) value[1] = "关闭";
            return value
        }));
        this._defaultValue = defaultValue;
        if (events) each(events, (listener, eventName) => this.events.on(eventName, listener));
        if (defaultValue !== undefined && this.hasVal(defaultValue)) this.selected = defaultValue;
        else if (values[0]) this.selected = values[0][0];
        this._player = _player;
        this.events.emit("inited", this.selected, _player);
        this.events.emit("changed", this.selected, undefined, _player);
    }
    select(value) {
        if (this.selected !== value && this.hasVal(value)) {
            this.original = this.selected;
            this.selected = value;
            this.events.emit("selected", this.selected, this.original, this._player);
            this.events.emit("changed", this.selected, this.original, this._player);
            return true
        } else return false
    }
    toggle() {
        const _values = [...this.values];
        for (let i = 0; i < _values.length; i++) {
            const item = _values[i];
            if (this.selected === item[0]) {
                if (i < _values.length - 1) this.select(_values[i + 1][0]);
                else this.select(_values[0][0]);
                break
            }
        }
    }
    addVal(name, description) {
        this.values.set(name, description);
        return this
    }
    delVal(name) {
        this.values.delete(name);
        return this
    }
    hasVal(name) {
        return this.values.has(name) || !this.values.size
    }
    getValueDescription(name) {
        if (name === undefined) name = this.selected;
        return this.values.get(name)
    }
}

class PlayerOption {
    constructor(player, name) {
        this.name = name;
        this.db = Database.open(player, `option-manager:${name}`);
        this.player = player;
    }
    
    items = {}
    
    addItem(opts) {
        this.items[opts.name] = new OptionItem(opts);
        return this
    }
    async _syncToDB() {
        const data = this.getItemValMap();
        await eachAsync(data, async (value, name) => {
            await this.db.set(name, value);
        });
        await eachAsync(this.db, async ([ name, value ]) => {
            if (!this.hasItem(name)) this.db.delete(name);
        });
    }
    async _syncFromDB() {
        each(this.db, ([ name, value ]) => this.setItemVal(name, value, undefined, { syncFromDB: true }));
        await this._syncToDB();
    }
    async init() {
        delete this.addItem;
        await this._syncFromDB();
        return this.getItemValMap()
    }
    
    _getItem(name) {
        return this.items[name]
    }
    hasItem(name) {
        return !!this.items[name]
    }
    setItemVal(name, value, callback = () => {}, { syncFromDB } = {}) {
        const item = this._getItem(name);
        if (item) {
            const result = item.select(value);
            if (result) {
                if (!syncFromDB && item.reload) this.reload = true;
                callback(item.selected, item.original, this.getItemValMap());
            }
        }
        return this
    }
    toggleItemVal(name, callback = () => {}) {
        const item = this._getItem(name);
        item.toggle();
        callback(item.selected, item.original, this.getItemValMap());
        return this
    }
    getItemVal(name) {
        const item = this._getItem(name);
        if (item) return item.selected
    }
    getItemValMap() {
        const result = {};
        each(this.items, (_, name) => result[name] = this.getItemVal(name));
        return result
    }
    async done(parentDialog) {
        const handleDone = async ({ reply = true } = {}) => {
            await this._syncToDB();
            if (reply) this.player.sendMessage("设置选项修改成功");
        };
        if (this.reload) {
            this.reload = false;
            await Dialog.confirm({
                body: '你选择的项目更改后需要刷新脚本，请手动运行 "/reload" 命令。\n\n您也可以取消您的更改',
                target: this.player,
                onConfirm: async () => {
                    await handleDone({ reply: false });
                    // await Commands.asyncRun("reload")
                },
                onCancel: async () => {
                    await this._syncFromDB();
                    await this.showDialog(parentDialog);
                }
            });
        } else await handleDone();
    }
    async showDialog(parentDialog) {
        const form = new ModalFormData().title(`${this.name} 选项`);
        const nameMap = [];
        each(this.items, item => {
            const { name, description, values, selected } = item;
            const valuesMap = [...values].map(e => e[0]);
            nameMap.push({ name, valuesMap });
            if (values.size === 2 && values.get(true) && values.get(false)) {
                form.toggle(description, selected);
            } else {
                form.dropdown(description, valuesMap.map(e => `${e}`), valuesMap.findIndex(e => e === selected));
            }
            // TODO 滑块等其他方式
        });
        
        const dialog = new Dialog({
            dialog: form,
            onClose: async () => {
                if (parentDialog) await parentDialog.show(this.player);
            },
            onSubmit: async result => {
                each(result, (valueIndex, nameIndex) => {
                    const { name, valuesMap } = nameMap[nameIndex];
                    const value = typeof valueIndex === "boolean"
                        ? valueIndex
                        : valuesMap[valueIndex];
                    this.setItemVal(name, value);
                });
                await this.done(parentDialog);
            }
        });
        await dialog.show(this.player);
    }
}

class OptionNamespace {
    constructor(name) {
        this.name = name;
    }
    
    players = new Map()
    _items = new Set()
    
    addItem(opts) {
        this._items.add(opts);
        return this
    }
    applyPlayer(player) {
        if (this.players.has(player)) return this.players.get(player)
        const playerOpt = new PlayerOption(player, this.name);
        each(this._items, item => {
            item._player = player;
            playerOpt.addItem(item);
        });
        this.players.set(player, playerOpt);
        return playerOpt
    }
    async applyMainPlayer() {
        const player = await waitForFirstPlayerInitialSpawn();
        return this.applyPlayer(player)
    }
    async init() {
        const valueMap = new Map();
        await eachAsync(this.players, async ([ player, playerOpt ]) => {
            const result = await playerOpt.init();
            valueMap.set(player, result);
        });
        delete this.applyPlayer;
        return valueMap
    }
    
    getPlayer(player) {
        return this.players.get(player)
    }
}

class OptionManager {
    constructor() {}
    
    namespaces = new Map()
    
    registerNamesapace(name) {
        const namespaces = new OptionNamespace(name);
        this.namespaces.set(name, namespaces);
        return namespaces
    }
    getNamesapace(name) {
        return this.namespaces.get(name)
    }
    async showDialog(player) {
        const form = new ActionFormData()
            .title("设置选项")
            .body("选择要设置的模块：");
        const nameMap = [];
        each(this.namespaces, ([ name ]) => {
            nameMap.push(name);
            form.button(name);  // TODO name -> desc
        });
        
        const dialog = new Dialog({
            dialog: form,
            onSelect: async selection => {
                const name = nameMap[selection];
                await this.getNamesapace(name)
                    .getPlayer(player)
                    .showDialog(dialog);
            }
        });
        await dialog.show(player);
    }
}

const optionManager = new OptionManager();

Commands.register("!", "option", async (argv, sender) => {
    switch (argv[1]) {
        case "dialog":
        case "-d":
        case undefined: {  // TODO argv[2] -> namespace
            await asyncRun(() => optionManager.showDialog(sender));
            break
        }
        default: {
            throw errorHandler("未知的子命令", sender)
        }
    }
});

function round(n) {
    if (n >= 0) return Math.round(n)
    else return (n % 0.5 === 0) ? Math.floor(n) : Math.round(n)
}

function equals(a, b, epsilon = 0.000001) {
    return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))
}

function factorial(n) {
    return n > 1 ? n * factorial(n - 1) : 1
}

function combination(n, k) {
    return factorial(n) / ( factorial(k) * factorial(n - k) )
}

function binomial(a, b, n) {
    return function(k) {
        return combination(n, k) * a ** (n - k) * b ** k
    }
}

function sum(from, to, fn) {
    let output = 0;
    for (let k = from; k <= to; k++) output += fn(k);
    return output
}

function range(from, to, step = 1) {
    const output = [];
    for (let i = from; i < to; i += step) output.push(i);
    return output
}

const option = optionManager
    .registerNamesapace("better-door")
    .addItem({
        name: "door",
        description: "允许双开门",
        values: [[true], [false]],
        defaultValue: true,
        events: {
            changed: (selected, original) => console.warn("better-door:door -> from", original, "to", selected)
        }
    })
    .addItem({
        name: "trapdoor",
        description: "允许双开活板门",
        values: [[true], [false]],
        defaultValue: false,
        events: {
            changed: (selected, original) => console.warn("better-door:trapdoor -> from", original, "to", selected)
        }
    })
    .addItem({
        name: "max_trapdoor_length",
        description: "允许双开活板门的最大距离",
        values: range(1, 51).map(i => [i]),  // TODO: 因为没有为滑块的专门设置，先暂时这么写
        defaultValue: 3,
        events: {
            changed: (selected, original) => console.warn("better-door:max_trapdoor_length -> from", original, "to", selected)
        }
    });

class Vector3Template {
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    
    static parse(vectorStr) {
        return new this(...vectorStr.split(" ").map(Number))
    }
    static create(vector) {
        if (Array.isArray(vector)) return new this(...vector)
        else if (typeof vector === "string") return this.parse(vector)
        else if (typeof vector === "object") return new this(vector.x, vector.y, vector.z)
        else throw new TypeError('The argument "vector" must be an array, a vector string or a vector object.')
    }
    
    stringify() {
        return this[Symbol.toPrimitive]("string")
    }
    toArray() {
        return [...this]
    }
    
    [Symbol.toPrimitive](hint) {
        if (hint === "string") return `${this.x} ${this.y} ${this.z}`
        else return this
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
}

class Vector3Utils {
    static clone(a) {
        return Vector3.create(a)
    }
    
    static add(a, b) {
        return new Vector3(a.x + b.x, a.y + b.y, a.z + b.z)
    }
    static subtract(a, b) {
        return new Vector3(a.x - b.x, a.y - b.y, a.z - b.z)
    }
    static multiply(a, b) {
        return new Vector3(a.x * b.x, a.y * b.y, a.z * b.z)
    }
    static divide(a, b) {
        return new Vector3(a.x / b.x, a.y / b.y, a.z / b.z)
    }
    static scale(a, n) {
        return new Vector3(a.x * n, a.y * n, a.z * n)
    }
    static negate(a) {
        return new Vector3(-a.x, -a.y, -a.z)
    }
    static inverse(a) {
        return new Vector3(1 / a.x, 1 / a.y, 1 / a.z)
    }
    
    static exchange(a, axes = []) {
        if (axes.length !== 2) throw new Error("You could only exchange two axes.")
        const output = this.clone(a);
        const n0 = output[axes[0]];
        const n1 = output[axes[1]];
        output[axes[0]] = n1;
        output[axes[1]] = n0;
        return output
    }
    
    static exactEquals(a, b) {
        return (
            a.x === b.x &&
            a.y === b.y &&
            a.z === b.z
        )
    }
    static equals(a, b) {
        return (
            equals(a.x, b.x) &&
            equals(a.y, b.y) &&
            equals(a.z, b.z)
        )
    }
    
    static max(...vectors) {
        return new Vector3(
            Math.max(...vectors.map(({ x }) => x)),
            Math.max(...vectors.map(({ y }) => y)),
            Math.max(...vectors.map(({ z }) => z))
        )
    }
    static min(...vectors) {
        return new Vector3(
            Math.min(...vectors.map(({ x }) => x)),
            Math.min(...vectors.map(({ y }) => y)),
            Math.min(...vectors.map(({ z }) => z))
        )
    }
    static floor(a) {
        return new Vector3(
            Math.floor(a.x),
            Math.floor(a.y),
            Math.floor(a.z)
        )
    }
    static ceil(a) {
        return new Vector3(
            Math.ceil(a.x),
            Math.ceil(a.y),
            Math.ceil(a.z)
        )
    }
    static round(a) {
        return new Vector3(
            round(a.x),
            round(a.y),
            round(a.z)
        )
    }
    static abs(a) {
        return new Vector3(
            Math.abs(a.x),
            Math.abs(a.y),
            Math.abs(a.z)
        )
    }
    
    static maxMagnitude(...vectors) {
        return vectors.reduce((prev, curr) => this.magnitude(curr) > this.magnitude(prev) ? curr : prev)
    }
    static minMagnitude(...vectors) {
        return vectors.reduce((prev, curr) => this.magnitude(curr) < this.magnitude(prev) ? curr : prev)
    }
    
    static magnitude(a) {
        return Math.sqrt(this.squaredMagnitude(a))
    }
    static squaredMagnitude(a) {
        return a.x ** 2 + a.y ** 2 + a.z ** 2
    }
    static distance(a, b) {
        return Math.sqrt(this.squaredDistance(a, b))
    }
    static squaredDistance(a, b) {
        const dx = b.x - a.x;
        const dy = b.y - a.y;
        const dz = b.x - a.z;
        return dx ** 2 + dy ** 2 + dz ** 2
    }
    
    static dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z
    }
    static cross(a, b) {
        return new Vector3(
            a.y * b.z - a.z * b.y,
            a.z * b.x - a.x * b.z,
            a.x * b.y - a.y * b.x
        )
    }
    static normalize(a) {
        const magnitude = this.magnitude(a);
        if (magnitude) return this.scale(a, 1 / magnitude)
        else return this.zero
    }
    static angle(a, b) {
        const cosOmega = this.dot(
            this.normalize(a),
            this.normalize(b)
        );
        return Math.acos(cosOmega)
    }
    static random(scale = 1) {
        const r = Math.random() * 2 * Math.PI;
        const z = Math.random() * 2 - 1;
        const zScale = Math.sqrt(1 - z * z) * scale;
        return new Vector3(
            Math.cos(r) * zScale,
            Math.sin(r) * zScale,
            z * scale
        )
    }
    static lerp(a, b, t) {
        return new Vector3(
            a.x * (1 - t) + b.x * t,
            a.y * (1 - t) + b.y * t,
            a.z * (1 - t) + b.z * t,
        )
    }
    static slerp(a, b, t) {
        if (t <= 0) return Vector3.create(a)
        if (t >= 1) return Vector3.create(b)
        
        const omega = this.angle(a, b);
        const sinOmega = Math.sin(omega);
        
        if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)
        
        const ratioA = Math.sin(omega * (1 - t)) / sinOmega;
        const ratioB = Math.sin(omega * t) / sinOmega;
        return new Vector3(
            a.x * ratioA + b.x * ratioB,
            a.y * ratioA + b.y * ratioB,
            a.z * ratioA + b.z * ratioB
        )
    }
    static bezier(points, t) {
        const n = points.length - 1;
        const coefficient = binomial(1 - t, t, n);
        return new Vector3(
            sum(0, n, k => points[k].x * coefficient(k)),
            sum(0, n, k => points[k].y * coefficient(k)),
            sum(0, n, k => points[k].z * coefficient(k))
        )
    }
    // TODO: Hermite interpolation
}

class Vector3 extends Vector3Template {
    constructor(x, y, z) {
        super(x, y, z);
    }
    
    get magnitude() {
        return Vector3Utils.magnitude(this)
    }
    get squaredMagnitude() {
        return Vector3Utils.squaredMagnitude(this)
    }
    get normalized() {
        return Vector3Utils.normalize(this)
    }
    
    get floored() {
        return Vector3Utils.floor(this)
    }
    get ceiled() {
        return Vector3Utils.ceil(this)
    }
    get rounded() {
        return Vector3Utils.round(this)
    }
    get absolute() {
        return Vector3Utils.abs(this)
    }
    
    set(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this
    }
    clone() {
        return new Vector3(this.x, this.y, this.z)
    }
    equals(v) {
        return Vector3Utils.equals(this, v)
    }
    
    distance(v) {
        return Vector3Utils.distance(this, v)
    }
    squaredDistance(v) {
        return Vector3Utils.squaredDistance(this, v)
    }
    
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this
    }
    subtract(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        return this
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        this.z /= v.z;
        return this
    }
    scale(n) {
        this.x *= n;
        this.y *= n;
        this.z *= n;
        return this
    }
    negate(v) {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this
    }
    inverse(v) {
        this.x = 1 / this.x;
        this.y = 1 / this.y;
        this.z = 1 / this.z;
        return this
    }
    
    floor() {
        this.copy(Vector3Utils.floor(this));
        return this
    }
    ceil() {
        this.copy(Vector3Utils.ceil(this));
        return this
    }
    round() {
        this.copy(Vector3Utils.round(this));
        return this
    }
    abs() {
        this.copy(Vector3Utils.abs(this));
        return this
    }
    
    normalize() {
        this.copy(Vector3Utils.normalize(this));
        return this
    }
}

class Location extends Vector3 {
    constructor(x, y, z) {
        super(x, y, z);
        // TODO: delete this.normalized
    }
    
    get centerCorrected() {
        return new Location(...Vector3Utils.add(
            this.floored,
            new Vector3(0.5, 0.5, 0.5)
        ))
    }
    
    clone() {
        return new Location(this.x, this.y, this.z)
    }
    equals(v) {
        return Vector3Utils.exactEquals(this, v)
    }
    
    offset(v) {
        return this.add(v)
    }
    isNear(v, distance) {
        return this.distance(v) <= distance
    }
}

class BlockLocation extends Location {
    constructor(x, y, z) {
        super(x, y, z);
        
        this.floor();
    }
    
    get centerCorrected() {
        throw new Error('Couldn\'t get "centerCorrected" on BlockLocation.')
    }
    
    clone() {
        return new BlockLocation(this.x, this.y, this.z)
    }
    
    divide(v) {
        super.divide(v);
        return this.floor()
    }
    inverse() {
        throw new Error('Couldn\'t call "inverse" on BlockLocation.')
    }
    
    between(v) {
        const dx = v.x - this.x;
        const dy = v.y - this.y;
        const dz = v.z - this.z;
        const output = [];
        for (let x = 0; x <= dx; x++) {
            for (let y = 0; y <= dy; y++) {
                for (let z = 0; z <= dz; z++) {
                    output.push(
                        new BlockLocation(...Vector3Utils.add(this, { x, y, z }))
                    );
                }
            }
        }
        return output
    }
}

class LocationUtils {
    static getFacingOffset(facing) {
        return Location.create({
            x: facing === 0  // east (x+)
                ? +1
                : facing === 2  // west (x-)
                    ? -1
                    : 0,
            y: 0,
            z: facing === 1  // south (z+)
                ? +1
                : facing === 3  // north (z-)
                    ? -1
                    : 0
        })
    }
}

class BlockWrapperTemplate {
    constructor(block) {
        this.block = block;
        this.type = block.type;
        this.typeId = block.typeId;
        this.location = BlockLocation.create(block.location);
        this.dimension = block.dimension;
        this.permutation = block.permutation;
    }
    
    getOffsetBlock(v) {
        const location = this.location.clone().offset(v);
        return new BlockWrapperTemplate(
            this.dimension.getBlock(location)
        )
    }
    
    getState(name) {
        return this.permutation.getState(name)
    }
    hasState(name) {
        return !!this.getState(name)
    }
    setState(name, value) {
        const states = this.permutation.getAllStates();
        states[name] = value;
        this.block.setPermutation(
            BlockPermutation.resolve(this.typeId, states)
        );
    }
}

class WrappedBlocks {
    constructor(blocks) {
        this.blocks = (Array.isArray(blocks) ? blocks : [blocks])
            .map(block => {
                return block instanceof BlockWrapperTemplate
                    ? block
                    : new BlockWrapperTemplate(block)
            });
    }
    
    get block() {
        return this.blocks[0]
    }
    
    get type() {
        return this.block.type
    }
    get typeId() {
        return this.block.typeId
    }
    get location() {
        return this.block.location
    }
    get dimension() {
        return this.block.dimension
    }
}

// import { MinecraftBlockTypes } from "@minecraft/vanilla-data"

const WOODEN_DOORS = new Set([
    MinecraftBlockTypes.acaciaDoor,
    MinecraftBlockTypes.bambooDoor,
    MinecraftBlockTypes.birchDoor,
    MinecraftBlockTypes.cherryDoor,
    MinecraftBlockTypes.crimsonDoor,
    MinecraftBlockTypes.darkOakDoor,
    MinecraftBlockTypes.jungleDoor,
    MinecraftBlockTypes.mangroveDoor,
    MinecraftBlockTypes.spruceDoor,
    MinecraftBlockTypes.warpedDoor,
    MinecraftBlockTypes.woodenDoor
]);

class WoodenDoorBlock extends WrappedBlocks {
    constructor(block) {
        if (!WoodenDoorBlock.isWoodenDoorBlock(block))
            throw new TypeError(`"${block.typeId}" is not a wooden door.`)
        
        const wrappedBlock = block instanceof BlockWrapperTemplate
            ? block
            : new BlockWrapperTemplate(block);
        
        const isUpper = wrappedBlock.getState("upper_block_bit");
        const blocks = [
            // _lower
            isUpper
                ? wrappedBlock.getOffsetBlock(new BlockLocation(0, -1, 0))
                : wrappedBlock,
            // _upper
            isUpper
                ? wrappedBlock
                : wrappedBlock.getOffsetBlock(new BlockLocation(0, +1, 0))
        ];
        
        super(blocks);
    }
    
    static isWoodenDoorBlock(block) {
        return WOODEN_DOORS.has(block.type)
    }
    
    get _lower() {
        return this.blocks[0]
    }
    get _upper() {
        return this.blocks[1]
    }
    
    get opened() {
        return this._lower.getState("open_bit")
    }
    get facingDirection() {
        return this._lower.getState("direction")
        // the direction you are facing when you place the door
        // 0 -> east (x+)
        // 1 -> south (z+)
        // 2 -> west (x-)
        // 3 -> north (z-)
    }
    get hingeSide() {
        return this._upper.getState("door_hinge_bit")
        // true -> right
        // false -> left
    }
    
    open() {
        this._lower.setState("open_bit", true);
    }
    close() {
        this._lower.setState("open_bit", false);
    }
    
    getRelated() {
        // 获取可以与该门双开的另一个门和这个门组成的列表
        
        // 1. 获取另一个门的位置
        //    根据门的方向和门轴位置确定
        // e.g. 如果一个门的朝向是东边，门轴在左边（即北边）
        //      那么另一个门应该位于南边，即 z+1 的位置
        
        // 于是我们有下面的 switch 语句：
        // let relatedBlock
        // switch (this.facingDirection) {
        //     case 0: {
        //         relatedBlock = this._lower.getOffsetBlock(
        //             this.hingeSide
        //                 ? new BlockLocation(0, 0, -1)  // s -> n
        //                 : new BlockLocation(0, 0, +1)  // n -> s
        //         )
        //         break
        //     }
        //     case 1: {
        //         relatedBlock = this._lower.getOffsetBlock(
        //             this.hingeSide
        //                 ? new BlockLocation(+1, 0, 0)  // w -> e
        //                 : new BlockLocation(-1, 0, 0)  // e -> w
        //         )
        //         break
        //     }
        //     case 2: {
        //         relatedBlock = this._lower.getOffsetBlock(
        //             this.hingeSide
        //                 ? new BlockLocation(0, 0, +1)  // n -> s
        //                 : new BlockLocation(0, 0, -1)  // s -> n
        //         )
        //         break
        //     }
        //     case 3: {
        //         relatedBlock = this._lower.getOffsetBlock(
        //             this.hingeSide
        //                 ? new BlockLocation(-1, 0, 0)  // e -> w
        //                 : new BlockLocation(+1, 0, 0)  // w -> e
        //         )
        //         break
        //     }
        // }
        
        // 经过压缩，可以得到：
        const facingDirection = this.facingDirection;
        const hingeSide = this.hingeSide;
        const offset = BlockLocation.create({
            x: Number(
                facingDirection === 1
                    ? hingeSide || -1
                    : facingDirection === 3
                        ? !hingeSide || -1
                        : 0
            ),
            y: 0,
            z: Number(
                facingDirection === 0
                    ? !hingeSide || -1
                    : facingDirection === 2
                        ? hingeSide || -1
                        : 0
            )
        });
        const relatedBlock = this._lower.getOffsetBlock(offset);
        
        const output = [this];
        
        // 2. 进行判断
        if (WoodenDoorBlock.isWoodenDoorBlock(relatedBlock)) {
            const relatedDoor = new WoodenDoorBlock(relatedBlock);
            
            // 另一扇门应该方向相同，而门轴相反
            if (
                relatedDoor.facingDirection === facingDirection &&
                relatedDoor.hingeSide === !hingeSide
            ) output.push(relatedDoor);
        }
        
        return output
    }
}

class WrappedPlayer {
    constructor(player) {
        if (!(player instanceof Player)) throw new TypeError("Parameter is not an instance of Player.")
        
        this.player = player;
        this.dimension = player.dimension;
    }
    
    getFacing() {
        const rotation = this.player.getRotation().y;
        
        if (rotation > -135 && rotation <= -45) return 0  // east (x+)
        else if (rotation > -45 && rotation <= 45) return 1  // south (z+)
        else if (rotation > 45 && rotation <= 135) return 2  // west (x-)
        else if (rotation > 135 || rotation <= -135) return 3  // north (z-)
    }
    
    getGameMode() {
        const matches = [];
        each(GameMode, mode => {
            if (this.testGameMode(mode)) matches.push(mode);
        });
        return matches[0]
    }
    testGameMode(mode) {
        const playersUnderMode = this.dimension.getPlayers({ gameMode: mode });
        return playersUnderMode.some((player => player.id === this.player.id))
    }
    setGameMode(mode) {
        if (!Object.values(GameMode).includes(mode)) throw new TypeError("Unknown gamemode.")
        Commands.run(`gamemode ${mode}`, this.player);
    }
}

// import { MinecraftBlockTypes } from "@minecraft/vanilla-data"

const WOODEN_TRAPDOORS = new Set([
    MinecraftBlockTypes.acaciaTrapdoor,
    MinecraftBlockTypes.bambooTrapdoor,
    MinecraftBlockTypes.birchTrapdoor,
    MinecraftBlockTypes.cherryTrapdoor,
    MinecraftBlockTypes.crimsonTrapdoor,
    MinecraftBlockTypes.darkOakTrapdoor,
    MinecraftBlockTypes.jungleTrapdoor,
    MinecraftBlockTypes.mangroveTrapdoor,
    MinecraftBlockTypes.spruceTrapdoor,
    MinecraftBlockTypes.trapdoor,
    MinecraftBlockTypes.warpedTrapdoor
]);

class WoodenTrapdoorBlock extends WrappedBlocks {
    constructor(block) {
        if (!WoodenTrapdoorBlock.isWoodenTrapdoorBlock(block))
            throw new TypeError(`"${block.typeId}" is not a wooden door.`)
        
        block instanceof BlockWrapperTemplate
            ? block
            : new BlockWrapperTemplate(block);
        
        super([block]);
    }
    
    static isWoodenTrapdoorBlock(block) {
        return WOODEN_TRAPDOORS.has(block.type)
    }
    
    get opened() {
        return this.block.getState("open_bit")
    }
    get facingDirection() {
        const direction = this.block.getState("direction");
        if (direction === 1) return 2
        else if (direction === 2) return 1
        else return direction
        // 0 -> trapdoor is on the >east (x+)< side of a block
        // 1 -> south (z+)
        // 2 -> west (x-)
        // 3 -> north (z-)
    }
    get upsideOrDown() {
        return this.block.getState("upside_down_bit")
    }
    
    open() {
        this.block.setState("open_bit", true);
    }
    close() {
        this.block.setState("open_bit", false);
    }
    
    getRelated(player, maxLength = 1) {
        // 获取可以与该活板门双开的另外一些活板门和这个活板门组成的列表
        
        // 1. 获取另一个活板门的位置
        // e.g. 如果一个活板门位于一个方块的东边
        //      那么另一个活板门应该位于东边，即 x+1 的位置
        const facingDirection = this.facingDirection;
        const offset = LocationUtils.getFacingOffset(facingDirection);
        const relatedBlock = this.block.getOffsetBlock(offset);
        
        const output = [this];
        
        // 如果 maxLength 大于 0
        if (maxLength) {
            // 2. 判断是否为相关活板门
            if (WoodenTrapdoorBlock.isWoodenTrapdoorBlock(relatedBlock)) {
                const relatedTrapdoor = new WoodenTrapdoorBlock(relatedBlock);
                
                // 方向相反，上下位置相同
                if (
                    Math.abs(relatedTrapdoor.facingDirection - facingDirection) === 2 &&
                    relatedTrapdoor.upsideOrDown === this.upsideOrDown
                ) output.push(relatedTrapdoor);
                
                // 3. 获取扩展活板门
                //    即能与该活板门延伸联动的另一个活板门
                const wrappedPlayer = new WrappedPlayer(player);
                const playerFacing = wrappedPlayer.getFacing();
                const extensiveOffset = LocationUtils.getFacingOffset(playerFacing);
                const extensiveBlock = this.block.getOffsetBlock(extensiveOffset);
                if (WoodenTrapdoorBlock.isWoodenTrapdoorBlock(extensiveBlock)) {
                    const extensiveTrapdoor = new WoodenTrapdoorBlock(extensiveBlock);
                    
                    // 方向相同，上下位置相同
                    if (
                        extensiveTrapdoor.facingDirection === facingDirection &&
                        extensiveTrapdoor.upsideOrDown === this.upsideOrDown
                    ) {
                        // 进行递归运算
                        const result = extensiveTrapdoor.getRelated(player, maxLength - 1);
                        if (result.length > 1) output.push(...result);  // TODO: 如果指定的长度还未达到，就反向运行
                    }
                }
            }
        }
        
        return output
    }
}

const setupListener = () => world.beforeEvents.itemUseOn.subscribe(event => {
    const { block, source: player } = event;
    const playerOption = option.getPlayer(player);
    
    if (
        WoodenDoorBlock.isWoodenDoorBlock(block) &&
        playerOption.getItemVal("door")
    ) {
        event.cancel = true;
        const doors = (new WoodenDoorBlock(block)).getRelated();
        asyncRun(() => {
            if (doors[0].opened) each(doors, _ => _.close());
            else each(doors, _ => _.open());
        });
    } else if (
        WoodenTrapdoorBlock.isWoodenTrapdoorBlock(block) &&
        playerOption.getItemVal("trapdoor")
    ) {
        event.cancel = true;
        const maxLength = playerOption.getItemVal("max_trapdoor_length");
        const trapdoors = (new WoodenTrapdoorBlock(block)).getRelated(player, maxLength);
        asyncRun(() => {
            if (trapdoors[0].opened) each(trapdoors, _ => _.close());
            else each(trapdoors, _ => _.open());
        });
    }
});

option.applyMainPlayer()
    .then(() => each(world.getAllPlayers(), player => option.applyPlayer(player)))
    .then(() => option.init())
    .then(() => setupListener())
    .catch(BetterConsole.error);
//# sourceMappingURL=better-door.min.js.map
