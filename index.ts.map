{"version":3,"file":"index.ts","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/LocationInfo.class.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/lib/wrapper/item/ItemStackWithDurability.class.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/WrappedBlocks.class.ts","../src/lib/wrapper/block/BlockList.class.ts","../src/lib/wrapper/block/DoorBlock.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/Container.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/lib/wrapper/block/TrapdoorBlock.class.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/better-door/option.ts","../src/script/better-door/event.ts","../src/script/better-door/index.ts","../src/script/scoreboard-statistic/db.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts","../src/script/tpx/db.ts","../src/script/tpx/option.ts","../src/script/tpx/Handler.class.ts","../src/script/tpx/command.ts","../src/script/tpx/index.ts","../src/script/vein-mining/config.ts","../src/script/vein-mining/option.ts","../src/script/vein-mining/event.ts","../src/script/vein-mining/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport function serialize(obj): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport const AsyncFunction = (async () => {}).constructor\nexport function isAsyncFunc(func) {\n  return func[Symbol.toStringTag] === \"AsyncFunction\"\n}\n\nexport function arraySample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function arrayAt(arr, index) {\n  return index >= 0 ? arr[index] : arr[arr.length + index]\n}\n\nexport function toCamelCase(str) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup {\n  constructor(types) {\n    this.types = new Set(types)\n  }\n\n  add(...types) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export function round(n) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p) {\n  return Math.random() <= p\n}\n\nexport function equals(a, b, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n) {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a, b, n) {\n  return (k) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n, p) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from, to, fn) {\n  let output = 0\n  for (let k = from; k <= to; k++) output += fn(k)\n  return output\n}\n\nexport function range(from, to, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN {\n  /**\n   * Create a vector.\n   * @param {...number} axes - The axes of the vector.\n   */\n  constructor(...axes) {\n    this.axes = axes\n  }\n\n  /**\n   * Create a vector.\n   * @param {Array<number>|string} vector - The vector wrote in array or string.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param {string} vectorStr - The string to parse.\n   * @returns {VectorN} The vector.\n   */\n  static parse(vectorStr) {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns {string} The string representation of the vector.\n   */\n  stringify() {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns {Array<number>} The array representation of the vector.\n   */\n  toArray() {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param {string} hint - The type hint.\n   * @returns {string|VectorN} The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns {Iterator<number>} The iterator for the axes.\n   */\n  [Symbol.iterator]() {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns {number} The number of dimensions.\n   */\n  get dimensions() {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @returns {number} The component value.\n   */\n  get(index) {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @param {number} value - The value to set.\n   */\n  set(index, value) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {VectorN} The new vector.\n   */\n  map(callbackfn) {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { binomial, equals, round, sum } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param {Array<number>} vector - The vector write in array.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param {VectorN} a - The vector to clone.\n   * @returns {VectorN} The cloned vector.\n   */\n  static clone(a) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a, b) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static add(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static subtract(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static multiply(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static divide(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param {VectorN} a - The vector to scale.\n   * @param {number} n - The scalar value.\n   * @returns {VectorN} The resulting vector.\n   */\n  static scale(a, n) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param {VectorN} a - The vector to negate.\n   * @returns {VectorN} The resulting vector.\n   */\n  static negate(a) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param {VectorN} a - The vector to invert.\n   * @returns {VectorN} The resulting vector.\n   */\n  static inverse(a) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @param {number} axis1 - The first axis to exchange.\n   * @param {number} axis2 - The second axis to exchange\n   * @returns {VectorN} The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a, axis1, axis2) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static max(...vectors) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static min(...vectors) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static floor(a) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static ceil(a) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static round(a) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static abs(a) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the magnitude of.\n   * @returns {number} The magnitude of the vector.\n   */\n  static magnitude(a) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the squared magnitude of.\n   * @returns {number} The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The distance between the vectors.\n   */\n  static distance(a, b) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The squared distance between the vectors.\n   */\n  static squaredDistance(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The dot product of the vectors.\n   */\n  static dot(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param {VectorN} a - The vector to normalize.\n   * @returns {VectorN} The normalized vector.\n   */\n  static normalize(a) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The angle between the vectors in radians.\n   */\n  static angle(a, b) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param {number} dimensions - The number of dimensions.\n   * @param {number} [scale=1] - The scale of the random components.\n   * @returns {VectorN} The random vector.\n   */\n  static random(dimensions, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static lerp(a, b, t) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static slerp(a, b, t) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param {VectorN[]} points - The control points.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static bezier(points, t) {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @returns {Vector3} The cross product of the vectors.\n   */\n  static cross(a, b) {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param {number} x - The x axis.\n   * @param {number} y - The y axis.\n   * @param {number} z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {Vector3} The new vector.\n   */\n  map(callbackfn) {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import { Vector3, Vector3Utils } from \"../vector/index\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v, distance) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v) {\n    return this.add(v)\n  }\n}\n","import { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction) {\n    return Location.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(a, b, s = 1) {\n    const output = []\n    for (let x = a.x; x <= b.x; x += s) {\n      for (let y = a.y; y <= b.y; y += s) {\n        for (let z = a.z; z <= b.z; z += s) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","import { LocationUtils } from \"./LocationUtils.class\"\n\nimport { Location } from \"./Location.class\"\n\nexport class BlockLocation extends Location {\n  constructor(x, y, z) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  // @ts-ignore\n  get centerCorrected() {\n    throw new Error('Couldn\\'t get \"centerCorrected\" on BlockLocation.')\n  }\n\n  // @ts-ignore\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n\n  divide(v) {\n    super.divide(v)\n    return this.floor()\n  }\n  // @ts-ignore\n  inverse() {\n    throw new Error('Couldn\\'t call \"inverse\" on BlockLocation.')\n  }\n\n  between(v) {\n    return LocationUtils.between(this, v)\n  }\n}\n","import { system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms) =>\n  // @ts-ignore\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun(fn) {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText, target) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn() {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id, name) {\n  const objective = world.scoreboard.getObjective(id)\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","import { Dimension, world } from \"@minecraft/server\"\n\nimport { removeMinecraftNamespace } from \"../util/game\"\nimport { Location } from \"./Location.class\"\n\nexport class LocationInfo {\n  constructor({ location, dimension }) {\n    this.location =\n      location instanceof Location ? location : Location.create(location)\n    this.dimension =\n      dimension instanceof Dimension ? dimension : world.getDimension(dimension)\n  }\n  textify() {\n    return {\n      location: `${this.location}`,\n      dimension: this.dimension.id,\n    }\n  }\n\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\")\n      return `${removeMinecraftNamespace(this.dimension.id)}: ${this.location}`\n    return this\n  }\n}\n","export class Direction {\n  constructor(directionCode) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  constructor(itemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  components = new Map()\n\n  hasComponent(componentId) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\"enchantable\")\n  }\n}\n","import { withProbability } from \"../../util/math\"\nimport { WrappedItemStack } from \"./WrappedItemStack.class\"\n\nexport class ItemStackWithDurability extends WrappedItemStack {\n  constructor(itemStack) {\n    if (!ItemStackWithDurability.match(itemStack))\n      throw new TypeError(\n        `The \"${itemStack.typeId}\" doesn't have the \"minecraft:durability\" component.`\n      )\n\n    super(itemStack)\n  }\n\n  static match(itemStack) {\n    return itemStack.hasComponent(\"minecraft:durability\")\n  }\n\n  get damage() {\n    return this.components.get(\"durability\").damage\n  }\n  set damage(value) {\n    this.components.get(\"durability\").damage = value < 0 ? 0 : value\n  }\n  get maxDurability() {\n    return this.components.get(\"durability\").maxDurability\n  }\n  get durability() {\n    return this.maxDurability - this.damage\n  }\n  set durability(value) {\n    this.damage += this.durability - value\n  }\n\n  applyDamage(damage) {\n    const unbreakingLevel = this.enchants.hasEnchantment(\"unbreaking\")\n    const probability =\n      this.components.get(\"durability\").getDamageChance(unbreakingLevel) / 100\n\n    for (let i = 0; i < damage; i++) {\n      if (withProbability(probability)) this.durability -= 1\n    }\n\n    return this\n  }\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n}\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n    \"acacia_log\": acaciaLog,\n    \"amethyst_block\": amethystBlock,\n    \"amethyst_cluster\": amethystCluster,\n    \"ancient_debris\": ancientDebris,\n    \"birch_log\": birchLog,\n    \"cherry_log\": cherryLog,\n    \"coal_ore\": coalOre,\n    \"copper_ore\": copperOre,\n    \"crimson_stem\": crimsonStem,\n    \"dark_oak_log\": darkOakLog,\n    \"deepslate\": deepslate,\n    \"deepslate_coal_ore\": deepslateCoalOre,\n    \"deepslate_copper_ore\": deepslateCopperOre,\n    \"deepslate_diamond_ore\": deepslateDiamondOre,\n    \"deepslate_emerald_ore\": deepslateEmeraldOre,\n    \"deepslate_gold_ore\": deepslateGoldOre,\n    \"deepslate_iron_ore\": deepslateIronOre,\n    \"deepslate_lapis_ore\": deepslateLapisOre,\n    \"deepslate_redstone_ore\": deepslateRedstoneOre,\n    \"diamond_ore\": diamondOre,\n    \"emerald_ore\": emeraldOre,\n    \"gold_ore\": goldOre,\n    \"iron_ore\": ironOre,\n    \"jungle_log\": jungleLog,\n    \"lapis_ore\": lapisOre,\n    \"mangrove_log\": mangroveLog,\n    \"nether_gold_ore\": netherGoldOre,\n    \"oak_log\": oakLog,\n    \"obsidian\": obsidian,\n    \"quartz_ore\": quartzOre,\n    \"redstone_ore\": redstoneOre,\n    \"spruce_log\": spruceLog,\n    \"stone\": stone,\n    \"warped_stem\": warpedStem\n}\n","import { range } from \"./util/math\"\n\nexport class NumberRange {\n  constructor(min, max, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport class LootTable {\n  constructor(items) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set()\n  totalWeight = 0\n\n  addItem(item) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import { BlockPermutation } from \"@minecraft/server\"\n\n// @ts-ignore\nimport BlockDefinition from \"@/data/block/index\"\n\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\n\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  constructor({\n    // @ts-ignore\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  } = {}) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult() {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  constructor(group) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output = []\n    each(this.items, (item) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport const FORTUNE_RULES = {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  ore: \"ore\",\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  melon: \"melon\",\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  grass: \"grass\",\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  flower: \"flower\",\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  crop: \"crop\",\n  // 使用自定义的战利品表\n  custom: \"custom\",\n}\n\nexport class BlockDrops {\n  constructor(blockTypeId, useItem) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    if (useItem) this.setItemUse(useItem)\n  }\n\n  setItemUse(useItem = \"<empty>\") {\n    const dropConfig =\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n\n    if (!dropConfig) {\n      // throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n      return false\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId,\n    })\n    this.rawResource = new DropItem(dropConfig.raw) ?? this.blockItem\n\n    // for ore like\n    this.refinedResource = new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seendResource = new DropItem(dropConfig.seed) ?? this.rawResource\n    this.immatureResource =\n      new DropItem(dropConfig.immature) ?? this.seendResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FORTUNE_RULES.custom) {\n      this.custumLootTable = dropConfig.option?.custom\n      if (!this.custumLootTable)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n    }\n\n    return true\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FORTUNE_RULES.ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FORTUNE_RULES.flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seendResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FORTUNE_RULES.custom: {\n          const lootTable = new LootTable(this.custumLootTable[level])\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n      // biome-ignore lint/style/noUselessElse: <explanation>\n    } else {\n      return this.rawResource.getResult()\n    }\n  }\n}\n","import {\n  BlockPermutation,\n  BlockVolume,\n  ItemStack as MinecraftItemStack,\n} from \"@minecraft/server\"\n\nimport { BlockLocation, LocationUtils } from \"../../location/index\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nimport { WrappedItemStack } from \"../item/index\"\n\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  constructor(block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v) {\n    // @ts-ignore\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name) {\n    return this.permutation.getState(name)\n  }\n  hasState(name) {\n    return !!this.getState(name)\n  }\n  setState(name, value) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId = \"<empty>\") {\n    return new BlockDrops(this.typeId).setItemUse(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack) {\n    const drops = new BlockDrops(this.typeId, useItemStack?.typeId ?? \"<empty>\")\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.hasEnchantment(\"fortune\")\n            ? item.enchants.getEnchantment(\"fortune\").level\n            : 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new MinecraftItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class WrappedBlocks extends WrapperTemplate {\n  constructor(blocks) {\n    super()\n\n    this._blocks = (Array.isArray(blocks) ? blocks : [blocks]).map((block) => {\n      return block instanceof WrappedBlock // TODO: TypeError\n        ? block\n        : new WrappedBlock(block)\n    })\n  }\n\n  get _block() {\n    return this._blocks[0]\n  }\n\n  get type() {\n    return this._block.type\n  }\n  get typeId() {\n    return this._block.typeId\n  }\n  get location() {\n    return this._block.location\n  }\n  get dimension() {\n    return this._block.dimension\n  }\n  get permutation() {\n    return this._block.permutation\n  }\n}\n","import { each } from \"../../util/index\"\nimport { Vector3Utils } from \"../../vector/index\"\n\nexport class BlockList {\n  constructor(blocks) {\n    if (blocks) this.add(...blocks)\n  }\n\n  blocks = []\n\n  get size() {\n    return this.blocks.length\n  }\n\n  add(...blocks) {\n    each(blocks, (block) => {\n      if (!this.has(block)) this.blocks.push(block)\n    })\n  }\n  has(block) {\n    return this.blocks.some(({ location }) =>\n      Vector3Utils.exactEquals(location, block.location)\n    )\n  }\n\n  shift() {\n    return this.blocks.shift()\n  }\n\n  [Symbol.iterator]() {\n    return this.blocks.values()\n  }\n}\n","import { BlockLocation, Directions } from \"../../location/index\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\nimport { WrappedBlocks } from \"./WrappedBlocks.class\"\n\nimport {\n  COPPER_DOORS,\n  DOORS,\n  WOODEN_DOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class DoorBlock extends WrappedBlocks {\n  constructor(block) {\n    DoorBlock.assert(block)\n\n    const wrappedBlock =\n      block instanceof WrappedBlock ? block : new WrappedBlock(block)\n\n    const isUpper = wrappedBlock.getState(\"upper_block_bit\")\n    const blocks = [\n      // _lower\n      isUpper ? wrappedBlock.getNeighbourBlock(Directions.Down) : wrappedBlock,\n      // _upper\n      isUpper ? wrappedBlock : wrappedBlock.getNeighbourBlock(Directions.Up),\n    ]\n\n    super(blocks)\n  }\n\n  static match(block) {\n    return DOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (DoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a door.`)\n  }\n\n  get _lower() {\n    return this._blocks[0]\n  }\n  get _upper() {\n    return this._blocks[1]\n  }\n\n  get opened() {\n    return this._lower.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // the direction you are facing when you place the door\n    const directionCode = this._lower.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 1:\n        return Directions.South\n      case 2:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get hingeSide() {\n    return this._upper.getState(\"door_hinge_bit\")\n    // true -> right\n    // false -> left\n  }\n\n  isWooden() {\n    return WOODEN_DOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_DOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this._lower.setState(\"open_bit\", true)\n  }\n  close() {\n    this._lower.setState(\"open_bit\", false)\n  }\n\n  getRelated({ shouldBeTheSameType = true } = {}) {\n    // 获取可以与该门双开的另一个门和这个门组成的列表\n    const output = [this]\n\n    // 1. 获取另一个门的位置\n    //    根据门的方向和门轴位置确定\n    // e.g. 如果一个门的朝向是东边，门轴在左边（即北边）\n    //      那么另一个门应该位于南边，即 z+1 的位置\n    const facingDirection = this.facingDirection\n    const hingeSide = this.hingeSide\n    const offset = BlockLocation.create({\n      x: Number(\n        facingDirection.isSouth()\n          ? hingeSide || -1\n          : facingDirection.isNorth()\n            ? !hingeSide || -1\n            : 0\n      ),\n      y: 0,\n      z: Number(\n        facingDirection.isEast()\n          ? !hingeSide || -1\n          : facingDirection.isWest()\n            ? hingeSide || -1\n            : 0\n      ),\n    })\n\n    // 2. 进行判断\n    const relatedBlock = this._lower.getOffsetBlock(offset)\n    if (DoorBlock.match(relatedBlock)) {\n      const relatedDoor = new DoorBlock(relatedBlock)\n      // 另一扇门应该方向相同，而门轴相反\n      if (\n        relatedDoor.canBeOpenedByHand() &&\n        (shouldBeTheSameType ? relatedDoor.typeId === this.typeId : true) &&\n        relatedDoor.facingDirection.code === facingDirection.code &&\n        relatedDoor.hingeSide === !hingeSide\n      )\n        // @ts-ignore\n        output.push(relatedDoor)\n    }\n\n    return output\n  }\n}\n","import { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  components = new Map()\n\n  constructor(entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  world,\n} from \"@minecraft/server\"\n\n// import { Parser } from \"mcbe-command-parser\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set()\n\nexport class Commands {\n  static run(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(prefix, command, /* grammar, */ callback) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner = async (commandString, target) => {\n      // callback(new Parser(commandString, grammar), target)\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class Container extends WrapperTemplate {\n  constructor(container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot, itemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import { Container } from \"./Container.class\"\n\nexport class EntityContainer extends Container {\n  constructor(entity, container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import { GameMode } from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  constructor(player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(slot, callback = async (_) => {}) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(callback = async () => {}) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}) {\n    if (useXpOrb && amount >= 0) {\n      while (amount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { Directions } from \"../../location/index\"\n\nimport { WrappedPlayer } from \"../entity/index\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nimport {\n  COPPER_TRAPDOORS,\n  TRAPDOORS,\n  WOODEN_TRAPDOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class TrapdoorBlock extends WrappedBlock {\n  constructor(block) {\n    TrapdoorBlock.assert(block)\n\n    super(block)\n  }\n\n  static match(block) {\n    return TRAPDOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (TrapdoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a trapdoor.`)\n  }\n\n  get opened() {\n    return this.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // trapdoor is on the >direction< side of a block\n    const directionCode = this.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 2:\n        return Directions.South\n      case 1:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get upsideOrDown() {\n    return this.getState(\"upside_down_bit\")\n  }\n\n  isWooden() {\n    return WOODEN_TRAPDOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_TRAPDOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this.setState(\"open_bit\", true)\n  }\n  close() {\n    this.setState(\"open_bit\", false)\n  }\n\n  getRelated(\n    player,\n    { extensive = true, maxLength = 1, shouldBeTheSameType = true } = {}\n  ) {\n    // 获取可以与该活板门双开的另外一些活板门和这个活板门组成的列表\n    const output = [this]\n\n    if (maxLength > 0) {\n      // 1. 获取另一个活板门的位置\n      // e.g. 如果一个活板门位于一个方块的东边\n      //      那么另一个活板门应该位于东边，即 x+1 的位置\n      const relatedBlock = this.getNeighbourBlock(this.facingDirection)\n\n      // 2. 判断是否为相关活板门\n      if (TrapdoorBlock.match(relatedBlock)) {\n        // TODO: refactor _bloc6k\n        const relatedTrapdoor = new TrapdoorBlock(relatedBlock._block)\n        // 方向相反，上下位置相同\n        if (\n          relatedTrapdoor.canBeOpenedByHand() &&\n          (shouldBeTheSameType\n            ? relatedTrapdoor.typeId === this.typeId\n            : true) &&\n          relatedTrapdoor.facingDirection.isOppositeTo(this.facingDirection) &&\n          relatedTrapdoor.upsideOrDown === this.upsideOrDown\n        )\n          // @ts-ignore\n          output.push(relatedTrapdoor)\n      }\n    }\n\n    if (extensive) {\n      let that = this\n      let needOpposite = false\n\n      // 仅 maxLength > 1 时才会运行\n      while (--maxLength) {\n        // 3. 获取扩展活板门\n        //    即能与该活板门延伸联动的另一个活板门\n        // @ts-ignore\n        const playerFacing = WrappedPlayer.wrap(player).getFacingDirectionXZ()\n        const extensiveBlock = needOpposite\n          ? that.getNeighbourBlock(playerFacing.getOpposite())\n          : that.getNeighbourBlock(playerFacing)\n\n        if (TrapdoorBlock.match(extensiveBlock)) {\n          const extensiveTrapdoor = new TrapdoorBlock(extensiveBlock._block)\n\n          // 方向相同，上下位置相同\n          if (\n            extensiveTrapdoor.canBeOpenedByHand() &&\n            (shouldBeTheSameType\n              ? extensiveTrapdoor.typeId === this.typeId\n              : true) &&\n            extensiveTrapdoor.facingDirection.equals(this.facingDirection) &&\n            extensiveTrapdoor.upsideOrDown === this.upsideOrDown\n          ) {\n            const result = extensiveTrapdoor.getRelated(player, {\n              extensive: false,\n              maxLength,\n            })\n            if (result.length > 1) {\n              // @ts-ignore\n              output.push(...result)\n\n              // @ts-ignore\n              that = extensiveTrapdoor\n              continue\n            }\n          }\n        }\n\n        // 当玩家面对的方向可以联动的活板门数量不足时\n        // 反向查找\n        if (!needOpposite) {\n          needOpposite = true\n          that = this\n          // 因为此变向操纵消耗了一次迭代，故补充一次\n          maxLength++\n        } else {\n          break\n        }\n      }\n    }\n\n    return output\n  }\n}\n","import {\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\nexport class Dialog {\n  static async confirm({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => {},\n    onConfirm = async () => {},\n  }) {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  constructor({\n    dialog,\n    onClose = async () => {},\n    onSubmit = async (_) => {},\n    onSelectButton1 = async () => {},\n    onSelectButton2 = async () => {},\n    onSelect = async (_) => {},\n  }) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n  async show(target) {\n    let response\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n\n    return response\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { deserialize, each, eachAsync, serialize } from \"../util/index\"\n\nexport const ALL_DATABASES = new Map()\n\nexport class Database {\n  static open(player, dbName) {\n    return new Database(player, dbName)\n  }\n  constructor(player, dbName) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName)\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key) {\n    return this.store.has(key)\n  }\n  async delete(key) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key) {\n    if (this.has(key)) return this.store.get(key).value\n  }\n  async set(key, value) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries() {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys() {\n    for (const key of this.store.keys()) yield key\n  }\n  *values() {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName, listener) {\n    if (this._events[eventName]) {\n      const newListeners = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName, ...args) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName, ...args) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName, listener) {\n    return this.on(eventName, listener)\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport class OptionItemRange {\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(n) {\n    return this.range.includes(n)\n  }\n}\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport class OptionItemSelection {\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(name) {\n    return this.values.has(name) || !this.values.size\n  }\n}\n","import { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { each, eachAsync } from \"../util/index\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionItemRange } from \"./OptionItemRange.class\"\nimport { OptionItemSelection } from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  constructor(player, name) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items = {}\n\n  addItem(opts) {\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = undefined\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name) {\n    return this.items[name]\n  }\n  hasItem(name) {\n    return !!this.items[name]\n  }\n  setItemVal(\n    name,\n    value,\n    callback = (_, __, ___) => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\n\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  constructor(name) {\n    this.name = name\n  }\n\n  players = new Map()\n  _items = new Set()\n\n  addItem(opts) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = undefined\n    return valueMap\n  }\n\n  getPlayer(player) {\n    return this.players.get(player)\n  }\n}\n","import { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { each } from \"../util/index\"\n\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map()\n\n  registerNamesapace(name) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name) {\n    return this.namespaces.get(name)\n  }\n  async showDialog(player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\n\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"better-door\")\n  .addItem({\n    name: \"door\",\n    description: \"允许双开门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:door -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"trapdoor\",\n    description: \"允许多开活板门\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:trapdoor -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_trapdoor_length\",\n    description: \"允许多开活板门的最大距离\",\n    range: [1, 32],\n    defaultValue: 3,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:max_trapdoor_length -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"should_be_the_same_type\",\n    description: \"是否需要是同种门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:should_be_the_same_type -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { DoorBlock, TrapdoorBlock } from \"@/lib/wrapper/block/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.beforeEvents.itemUseOn.subscribe((event) => {\n    const { block, source: player } = event\n    const playerOption = option.getPlayer(player)\n\n    const shouldBeTheSameType = playerOption.getItemVal(\n      \"should_be_the_same_type\"\n    )\n\n    if (DoorBlock.match(block) && playerOption.getItemVal(\"door\")) {\n      event.cancel = true\n      // @ts-ignore\n      const doors = DoorBlock.wrap(block).getRelated({ shouldBeTheSameType })\n      asyncRun(() => {\n        if (doors[0].opened) each(doors, (_) => _.close())\n        else each(doors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    } else if (\n      TrapdoorBlock.match(block) &&\n      playerOption.getItemVal(\"trapdoor\")\n    ) {\n      event.cancel = true\n      const maxLength = playerOption.getItemVal(\"max_trapdoor_length\")\n      // @ts-ignore\n      const trapdoors = TrapdoorBlock.wrap(block).getRelated(player, {\n        maxLength,\n        shouldBeTheSameType,\n      })\n      asyncRun(() => {\n        if (trapdoors[0].opened) each(trapdoors, (_) => _.close())\n        else each(trapdoors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    }\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n","import { Database } from \"@/lib/database/index\"\n\nexport const globalDB = new Database(\n  { id: \"global\" },\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map()\n\nexport class EventDB {\n  constructor(player) {\n    this.db = new Database(player, \"scoreboard-statistic-player\")\n    this.player = player\n  }\n\n  events = new Map()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId, events) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId, events) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"scoreboard-statistic\")\n  .addItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  killed,\n  \"minecraft:killed_by\": killed_by,\n  killed_by,\n  \"minecraft:killed_for\": killed_for,\n  killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  mined,\n  \"minecraft:placed\": placed,\n  placed, // not in vanilla\n\n  // item\n  // TODO\n}\n","export default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener() {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})\n","export default ({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener() {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})\n","import killed from \"./statistic/types/mob/killed\"\n\nexport default ({ player, callback }) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\n// @ts-ignore\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","import {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  world,\n} from \"@minecraft/server\"\n\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport { asyncRun, getOrAddObjective } from \"@/util/game\"\nimport { eachAsync } from \"@/util/index\"\n\nimport { ALL_PLAYER_DATABASES, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nimport CRITERIA from \"./criteria/index\"\n\nexport class Handler {\n  constructor(player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n    this.playerDB = ALL_PLAYER_DATABASES.get(player)\n  }\n\n  async add({ objectiveId, criteria, displayName = objectiveId }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n  async remove({ objectiveId }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n  async start({ objectiveId, criteria = globalDB.get(objectiveId) }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          // @ts-ignore\n          !WrappedPlayer.wrap(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  objective.getScore(this.player) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              // TODO: scoreboard wrapper #addScore()\n              objective.setScore(\n                this.player,\n                objective.getScore(this.player) + result.value\n              )\n            }\n          }\n        }\n      },\n    })\n\n    await eachAsync(\n      tigger.events,\n      async ({ option: subscribeOption, listener }, eventName) => {\n        if (subscribeOption)\n          await asyncRun(() =>\n            world.afterEvents[eventName].subscribe(listener, subscribeOption)\n          )\n        else\n          await asyncRun(() => world.afterEvents[eventName].subscribe(listener)) // 为什么多传参数还报错啊啊啊啊啊啊啊！！！\n      }\n    )\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n  async stop({ objectiveId }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n    await eachAsync(events, async ({ listener }, eventName) => {\n      await asyncRun(() => world.afterEvents[eventName].unsubscribe(listener))\n    })\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria) {\n  return criteria\n    .split(\":\")\n    .map((e) => e.replace(\".\", \":\"))\n    .map((e, i) => {\n      if (i === 0) return e\n      return e.match(/^(.+)\\:/) ? e : `minecraft:${e}`\n    })\n}\n","import { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv, sender) {\n  const playerOption = option.getPlayer(sender)\n  const handler = new Handler(sender)\n\n  const objectiveId = argv[2]\n  switch (argv[1]) {\n    case \"add\": {\n      const [, , , criteria, displayName] = argv\n      if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n      if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n      if (!playerOption.getItemVal(\"enable_creative\"))\n        sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n      const result = await handler.add({ objectiveId, criteria, displayName })\n      if (result.code)\n        sender.sendMessage(\n          `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n        )\n      else {\n        switch (result.message) {\n          case \"DUPLICATE_OBJECTIVE\": {\n            throw errorHandler(`添加失败：记分板 ${objectiveId} 已存在`, sender)\n          }\n          case \"UNKNOWN_CRITERIA\": {\n            throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n          }\n        }\n      }\n\n      if (playerOption.getItemVal(\"auto_start\")) {\n        const startResult = await handler.start({ objectiveId, criteria })\n        if (startResult)\n          sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n      }\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      async function _remove() {\n        const result = await handler.remove({ objectiveId })\n        if (result) sender.sendMessage(`删除成功 ${objectiveId}`)\n        else\n          throw errorHandler(\n            `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n            sender\n          )\n      }\n\n      if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n        await Dialog.confirm({\n          body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n          target: sender,\n          onConfirm: _remove,\n        })\n      else await _remove()\n\n      break\n    }\n    case \"stop\": {\n      const result = await handler.stop({ objectiveId })\n\n      if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"start\": {\n      const result = await handler.start({ objectiveId })\n\n      if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => playerOption.showDialog())\n      break\n    }\n    default: {\n      throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n    }\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each, eachAsync } from \"@/util/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(async () => {\n    await eachAsync(option.players, async ([player]) => {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      await eachAsync(participated, async (objectiveId) => {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      })\n    })\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n","import { each } from \"@/util/index\"\n\nimport { Database } from \"@/lib/database/index\"\nimport { Dialog } from \"@/lib/dialog/index\"\nimport { LocationInfo } from \"@/lib/location/index\"\n\nexport const ALL_PLAYER_DATABASES = new Map()\n\nexport class TpxDB {\n  constructor(player) {\n    this.db = Database.open(player, \"tpx\")\n    this.player = player\n  }\n\n  static init(player) {\n    const db = new TpxDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async set({ name, disposable, force }) {\n    const info = new LocationInfo(this.player)\n    const handleSet = async () => {\n      await this.db.set(name, {\n        info: info.textify(),\n        disposable,\n      })\n      return info\n    }\n    if (!force && this.db.has(name)) {\n      return await Dialog.confirm({\n        body: `名称 ${name} 已被占用，是否覆盖？`,\n        target: this.player,\n        // @ts-ignore\n        onConfirm: async () => await handleSet(),\n      })\n    }\n    return await handleSet()\n  }\n  async get(name) {\n    if (!this.db.has(name)) return\n    const { info: data, disposable } = this.db.get(name)\n    if (disposable) await this.db.delete(name)\n    if (data) return new LocationInfo(data)\n  }\n  async remove(name) {\n    if (!this.db.has(name)) return false\n    return await Dialog.confirm({\n      body: `是否删除 ${name} `,\n      target: this.player,\n      // @ts-ignore\n      onConfirm: async () => await this.db.delete(name),\n    })\n  }\n  getAll() {\n    const output = []\n    each(this.db, ([name, { info: data, disposable }]) => {\n      const info = new LocationInfo(data)\n      output.push({\n        name,\n        info,\n        disposable,\n        text: `${name} (${info})${disposable ? \" [一次性]\" : \"\"}`,\n      })\n    })\n    return output\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { optionManager } from \"@/lib/option-manager/index\"\n\nimport { Handler } from \"./Handler.class\"\n\nasync function afterEntityDieCallback(event) {\n  const player = event.deadEntity\n  const handler = new Handler(player)\n\n  await handler.set({\n    name: \"__death__\",\n    option: {\n      disposable: true,\n      force: true,\n    },\n  })\n}\n\nexport const option = optionManager\n  .registerNamesapace(\"tpx\")\n  .addItem({\n    name: \"auto_back_point\",\n    description: \"允许使用 tpx 传送时自动添加返回点\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:auto_back_point -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"back_after_death\",\n    description: \"允许死亡时自动添加死亡点\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) => {\n        console.warn(\"tpx:back_after_death -> from\", original, \"to\", selected)\n\n        if (selected)\n          world.afterEvents.entityDie.subscribe(afterEntityDieCallback, {\n            entityTypes: [\"minecraft:player\"],\n          })\n        else world.afterEvents.entityDie.unsubscribe(afterEntityDieCallback)\n      },\n    },\n  })\n  .addItem({\n    name: \"back_cmd\",\n    description: \"允许使用独立的 back 命令\",\n    values: [[true], [false]],\n    defaultValue: false,\n    reload: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:back_cmd -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"home_cmd\",\n    description: \"允许使用独立的 home 命令\",\n    values: [[true], [false]],\n    defaultValue: false,\n    reload: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:home_cmd -> from\", original, \"to\", selected),\n    },\n  })\n","import { asyncRun } from \"@/util/game\"\n\nimport { ALL_PLAYER_DATABASES } from \"./db\"\nimport { option } from \"./option\"\n\nexport class Handler {\n  constructor(player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n    this.playerDB = ALL_PLAYER_DATABASES.get(player)\n  }\n\n  async set({ name = \"default\", option = {} }) {\n    const info = await this.playerDB.set(Object.assign({ name }, option))\n    if (name !== \"__back__\" && name !== \"__death__\") return { info }\n  }\n  async remove({ name = \"default\" }) {\n    return await this.playerDB.remove(name)\n  }\n  async teleport({ name = \"default\" }) {\n    const info = await this.playerDB.get(name)\n    if (info) {\n      if (\n        this.playerOption.getItemVal(\"auto_back_point\") &&\n        name !== \"__death__\"\n      ) {\n        await this.set({\n          name: \"__back__\",\n          option: {\n            disposable: true,\n            force: true,\n          },\n        })\n      }\n      await asyncRun(() =>\n        this.player.teleport(info.location, {\n          dimension: info.dimension,\n          checkForBlocks: false,\n          keepVelocity: false,\n        })\n      )\n      return { info }\n    }\n  }\n  async tryTeleport({ names = [] }) {\n    for (const name of names) {\n      const result = await this.teleport({ name })\n      if (result) return result\n    }\n  }\n  list() {\n    const datas = this.playerDB.getAll().map(({ text }) => text)\n    if (datas.length) return { msg: datas }\n  }\n}\n","import { Commands } from \"@/lib/commands/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nconst SUB_COMMANDS = [\n  \"set\",\n  \"-s\",\n  \"remove\",\n  \"rm\",\n  \"-r\",\n  \"back\",\n  \"bk\",\n  \"-b\",\n  \"list\",\n  \"ls\",\n  \"-l\",\n  \"help\",\n  \"-h\",\n  \"option\",\n  \"opt\",\n  \"-o\",\n]\n\nexport async function tpxCommand(argv, sender) {\n  const name = argv[2] ?? \"default\"\n  const handler = new Handler(sender)\n\n  switch (argv[1]) {\n    case \"set\":\n    case \"-s\": {\n      if (SUB_COMMANDS.includes(name) || name === \"__back__\")\n        throw errorHandler(`添加失败：不能使用 ${name} 作为名称`, sender)\n\n      const result = await handler.set({\n        name,\n        option: {\n          disposable:\n            argv[3] === \"true\" ? true : argv[3] === \"false\" ? false : null,\n        },\n      })\n\n      if (result) sender.sendMessage(`成功设置 ${name} 在 ${result.info}`)\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      const result = await handler.remove({ name })\n\n      if (result === true) sender.sendMessage(`成功删除 ${name}`)\n      else if (result === false)\n        throw errorHandler(`删除失败：未找到 ${name}`, sender)\n\n      break\n    }\n    case \"back\":\n    case \"bk\":\n    case \"-b\": {\n      const result = await handler.tryTeleport({\n        names: [\"__death__\", \"__back__\"],\n      })\n\n      if (result) sender.sendMessage(`已返回到 ${result.info}`)\n      else throw errorHandler(\"传送失败：未找到返回点\", sender)\n\n      break\n    }\n    case \"list\":\n    case \"ls\":\n    case \"-l\": {\n      const result = handler.list()\n\n      if (result) {\n        result.msg.unshift(\"您的传送点有：\")\n        sender.sendMessage(result.msg.join(\"\\n- \"))\n      } else sender.sendMessage(\"您目前没有传送点\")\n\n      break\n    }\n    case \"help\":\n    case \"-h\": {\n      // TODO command-parser\n      sender.sendMessage(\"制作中...\")\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => option.getPlayer(sender).showDialog())\n      break\n    }\n    default: {\n      const result = await handler.teleport({ name: argv[1] })\n\n      if (result) sender.sendMessage(`已传送到 ${result.info}`)\n      else throw errorHandler(`传送失败：未找到传送点 ${argv[1]}`, sender)\n    }\n  }\n}\n\nexport async function backCommand(_, sender) {\n  if (option.getPlayer(sender).getItemVal(\"back_cmd\"))\n    await Commands.asyncRun(\"!tpx back\", sender)\n  else sender.sendMessage(\"您未启用该命令\")\n}\n\nexport async function homeCommand(argv, sender) {\n  if (option.getPlayer(sender).getItemVal(\"home_cmd\")) {\n    switch (argv[1]) {\n      case \"set\": {\n        await Commands.asyncRun(\"!tpx set __home__\", sender)\n        break\n      }\n      default: {\n        await Commands.asyncRun(\"!tpx __home__\", sender)\n      }\n    }\n  } else sender.sendMessage(\"您未启用该命令\")\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each } from \"@/util/index\"\n\nimport { backCommand, homeCommand, tpxCommand } from \"./command\"\nimport { TpxDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then((optMap) => {\n    // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n    // 同时避免在 beforeEvent 中构建导致的 read-only mode 问题\n    const players = optMap.keys()\n    each(players, (player) => TpxDB.init(player))\n\n    Commands.register(\"!\", \"tpx\", tpxCommand)\n\n    const values = [...optMap.values()]\n    if (values.some(({ back_cmd }) => back_cmd))\n      Commands.register(\"!\", \"back\", backCommand)\n    if (values.some(({ home_cmd }) => home_cmd))\n      Commands.register(\"!\", \"home\", homeCommand)\n  })\n  .catch(BetterConsole.error)\n","import { TypeGroup } from \"@/lib/wrapper/TypeGroup.class\"\nimport { BlockTypeGroups } from \"@/lib/wrapper/block/index\"\n\nexport const ENABLE_BLOCKS = new TypeGroup([\n  ...BlockTypeGroups.LOGS,\n  ...BlockTypeGroups.STEMS,\n  ...BlockTypeGroups.ORES,\n  \"minecraft:obsidian\",\n  \"minecraft:ancient_debris\",\n  \"minecraft:amethyst_block\",\n])\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"vein-mining\")\n  .addItem({\n    name: \"condition\",\n    description: \"触发条件\",\n    values: [\n      [\"off\", \"关闭\"],\n      [\"always\", \"总是\"],\n      [\"sneaking\", \"仅潜行时\"],\n    ],\n    defaultValue: \"sneaking\",\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"vein-mining:tigger -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_amount\",\n    description: \"最多检测的方块数量（并非最终挖掘的方块数）\",\n    range: [8, 128],\n    defaultValue: 64,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_stone\",\n    description: \"允许连锁挖掘岩石类方块（石头、深板岩）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_stone -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_collection\",\n    description: \"自动收集掉落物及经验（绕过经验修补）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:auto_collect_drops -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"prevent_tool_destruction\",\n    description: \"防止工具耐久耗尽\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:prevent_tool_destruction -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_edge\",\n    description: \"是否检测仅棱相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_diagonal\",\n    description: \"是否检测仅角相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_diagonal -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { ItemStack, world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { BlockLocation } from \"@/lib/location/index\"\nimport {\n  BlockList,\n  BlockTypeGroups,\n  WrappedBlock,\n} from \"@/lib/wrapper/block/index\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  ItemStackWithDurability,\n  WrappedItemStack,\n} from \"@/lib/wrapper/item/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { ENABLE_BLOCKS } from \"./config\"\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.afterEvents.playerBreakBlock.subscribe((event) => {\n    const basicBlock = new WrappedBlock(event.block)\n    const blockTypeId = event.brokenBlockPermutation.type.id\n    const player = new WrappedPlayer(event.player)\n    const playerOption = option.getPlayer(event.player)\n\n    let enableBlocks = ENABLE_BLOCKS\n    if (playerOption.getItemVal(\"enable_stone\"))\n      enableBlocks = ENABLE_BLOCKS.clone().add(...BlockTypeGroups.STONES)\n\n    player\n      .useMainHandItem(async (mainHandItem) => {\n        if (\n          !mainHandItem ||\n          !enableBlocks.has(blockTypeId) ||\n          !WrappedBlock.prototype.canBeDugBy.call(\n            { typeId: blockTypeId },\n            mainHandItem.typeId\n          ) ||\n          playerOption.getItemVal(\"condition\") === \"off\" ||\n          (playerOption.getItemVal(\"condition\") === \"sneaking\" &&\n            !player.isSneaking)\n        )\n          return mainHandItem\n\n        const blockList = getRelatedBlocks(\n          playerOption,\n          basicBlock,\n          blockTypeId\n        )\n\n        const wrappedItem =\n          ItemStackWithDurability.tryWrap(mainHandItem) ??\n          new WrappedItemStack(mainHandItem)\n\n        let totalDamage = 0\n\n        const totalItems = []\n        let totalXp = 0\n\n        while (\n          blockList.size > 0 &&\n          (!playerOption.getItemVal(\"prevent_tool_destruction\") ||\n            (playerOption.getItemVal(\"prevent_tool_destruction\") &&\n              totalDamage <\n                // @ts-ignore\n                (wrappedItem.durability ?? Number.POSITIVE_INFINITY)))\n        ) {\n          const block = blockList.shift()\n\n          const result = await asyncRun(() => block.breakBy(mainHandItem))\n\n          totalDamage += result.getTotalDamage()\n\n          if (playerOption.getItemVal(\"auto_collection\")) {\n            each(result.drops, (drop) => {\n              if (drop.xp) totalXp += drop.xp\n              totalItems.push(drop)\n            })\n          } else {\n            result.spawnDrops()\n          }\n        }\n\n        if (playerOption.getItemVal(\"auto_collection\")) {\n          each(totalItems, ({ itemId, amount }) =>\n            player.inventory.addItem(new ItemStack(itemId, amount))\n          )\n          player.addExperience(totalXp)\n        }\n\n        if (wrappedItem instanceof ItemStackWithDurability)\n          wrappedItem.applyDamage(totalDamage)\n\n        // @ts-ignore\n        return wrappedItem._item\n      })\n      .catch(BetterConsole.error)\n  })\n\nfunction getNeighbourBlocks(playerOption, basicBlock, blockTypeId) {\n  const offsets = [\n    new BlockLocation(1, 0, 0),\n    new BlockLocation(-1, 0, 0),\n    new BlockLocation(0, 0, 1),\n    new BlockLocation(0, 0, -1),\n    new BlockLocation(0, 1, 0),\n    new BlockLocation(0, -1, 0),\n  ]\n\n  if (playerOption.getItemVal(\"enable_edge\")) {\n    offsets.push(\n      new BlockLocation(1, 1, 0),\n      new BlockLocation(1, -1, 0),\n      new BlockLocation(-1, 1, 0),\n      new BlockLocation(-1, -1, 0),\n      new BlockLocation(0, 1, 1),\n      new BlockLocation(0, -1, 1),\n      new BlockLocation(0, 1, -1),\n      new BlockLocation(0, -1, -1),\n      new BlockLocation(1, 0, 1),\n      new BlockLocation(1, 0, -1),\n      new BlockLocation(-1, 0, 1),\n      new BlockLocation(-1, 0, -1)\n    )\n  }\n\n  if (playerOption.getItemVal(\"enable_diagonal\")) {\n    offsets.push(\n      new BlockLocation(-1, -1, -1),\n      new BlockLocation(-1, 1, -1),\n      new BlockLocation(-1, -1, 1),\n      new BlockLocation(-1, 1, 1),\n      new BlockLocation(1, -1, -1),\n      new BlockLocation(1, 1, -1),\n      new BlockLocation(1, -1, 1),\n      new BlockLocation(1, 1, 1)\n    )\n  }\n\n  const list = new BlockList()\n\n  each(offsets, (offset) => {\n    const block = basicBlock.getOffsetBlock(offset)\n    if (block.typeId === blockTypeId) list.add(block)\n  })\n\n  return list\n}\n\nfunction getRelatedBlocks(playerOption, basicBlock, blockTypeId) {\n  const maxAmount = playerOption.getItemVal(\"max_amount\")\n\n  const list = new BlockList()\n  list.add(...getNeighbourBlocks(playerOption, basicBlock, blockTypeId))\n\n  let previousSize = 0\n  let currentSize = list.size\n\n  while (currentSize < maxAmount && currentSize - previousSize > 0) {\n    for (const block of list) {\n      list.add(...getNeighbourBlocks(playerOption, block, blockTypeId))\n      previousSize = currentSize\n      currentSize = list.size\n\n      if (currentSize >= maxAmount) break\n    }\n  }\n\n  return list\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","toStringTag","TypeGroup","add","types","type","has","clone","toArray","constructor","WOODEN_DOORS","COPPER_DOORS","DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","TRAPDOORS","LOGS","STEMS","ORES","STONES","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","create","vector","vectorStr","split","Number","toPrimitive","hint","axes","dimensions","get","index","set","VectorNUtils","_assertDimensions","Error","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","y","z","x","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","s","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","toString","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","LocationInfo","textify","location","dimension","Dimension","getDimension","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","itemStack","typeId","getComponents","component","ItemStackWithDurability","damage","maxDurability","durability","applyDamage","unbreakingLevel","hasEnchantment","probability","getDamageChance","TypeError","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","acaciaLog","amethystBlock","amethystCluster","ancientDebris","birchLog","cherryLog","coalOre","copperOre","crimsonStem","darkOakLog","deepslate","deepslateCoalOre","deepslateCopperOre","deepslateDiamondOre","deepslateEmeraldOre","deepslateGoldOre","deepslateIronOre","deepslateLapisOre","deepslateRedstoneOre","diamondOre","emeraldOre","goldOre","ironOre","jungleLog","lapisOre","mangroveLog","netherGoldOre","oakLog","obsidian","quartzOre","redstoneOre","spruceLog","stone","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","defaultRange","max_amount","DropItemGroup","group","e","FORTUNE_RULES","ore","melon","grass","flower","crop","custom","BlockDrops","setItemUse","useItem","dropConfig","find","digBy","blockItem","BlockPermutation","blockTypeId","getItemStack","rawResource","refinedResource","seendResource","seed","immatureResource","immature","fortuneRule","custumLootTable","option","getDrops","withFortune","withSilkTouch","level","lootTable","distribution","customItemDrop","BlockDefinition","WrappedBlock","getOffsetBlock","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","getEnchantment","spawnDrops","drop","spawnItem","MinecraftItemStack","spawnEntity","getTotalDamage","block","WrappedBlocks","_blocks","blocks","BlockList","size","some","shift","DoorBlock","_lower","_upper","opened","facingDirection","hingeSide","isWooden","isCopper","isIron","canBeOpenedByHand","open","close","getRelated","shouldBeTheSameType","relatedBlock","relatedDoor","wrappedBlock","isUpper","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Entity","runCommand","customCommands","filter","regex","test","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","Container","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","_","useMainHandItem","useXpOrb","addLevels","TrapdoorBlock","upsideOrDown","extensive","maxLength","relatedTrapdoor","that","needOpposite","playerFacing","extensiveBlock","extensiveTrapdoor","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","prototype","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","ALL_DATABASES","Database","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","_defaultValue","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","__","___","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","OptionManager","registerNamesapace","namespaces","getNamesapace","ActionFormData","button","optionManager","changed","warn","setupListener","itemUseOn","source","playerOption","doors","trapdoors","then","globalDB","ALL_PLAYER_DATABASES","EventDB","addParticipated","objectiveId","participated","getParticipated","setEvents","getEvents","entityDie","entityTypes","cause","damageSource","damagingEntity","EntityDamageCause","entityAttack","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","killed","killed_by","killed_for","mined","placed","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","creative","getScore","subscribeOption","stop","handler","startResult","_remove","TpxDB","disposable","force","info","handleSet","text","afterEntityDieCallback","deadEntity","assign","teleport","checkForBlocks","keepVelocity","tryTeleport","names","list","datas","msg","SUB_COMMANDS","tpxCommand","unshift","backCommand","homeCommand","optMap","back_cmd","home_cmd","ENABLE_BLOCKS","BlockTypeGroups","basicBlock","enableBlocks","mainHandItem","blockList","getRelatedBlocks","wrappedItem","totalDamage","totalItems","totalXp","ItemStack","getNeighbourBlocks","offsets","previousSize","currentSize"],"mappings":"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","x_google_ignoreList":[68,69,70,71]}