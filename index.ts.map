{"version":3,"file":"index.ts","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/LocationInfo.class.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/lib/wrapper/item/ItemStackWithDurability.class.ts","../src/data/block/types.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/WrappedBlocks.class.ts","../src/lib/wrapper/block/BlockList.class.ts","../src/lib/wrapper/block/DoorBlock.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/WrappedContainer.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/lib/wrapper/block/TrapdoorBlock.class.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/better-door/option.ts","../src/script/better-door/event.ts","../src/script/better-door/index.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../src/script/scoreboard-statistic/db.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts","../src/script/tpx/db.ts","../src/script/tpx/option.ts","../src/script/tpx/Handler.class.ts","../src/script/tpx/command.ts","../src/script/tpx/index.ts","../src/script/vein-mining/config.ts","../src/script/vein-mining/option.ts","../src/script/vein-mining/event.ts","../src/script/vein-mining/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err: Error) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code: string, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport type Serializable =\n  | Set<Serializable>\n  | Map<Serializable, Serializable>\n  | { [key: string]: Serializable }\n  | Array<Serializable>\n  | string\n  | number\n  | boolean\n\nexport function serialize(obj: Serializable): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str: string): Serializable {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport function isAsyncFunc(func: Function): boolean {\n  return Object.prototype.toString.call(func) === \"[object AsyncFunction]\"\n}\n\nexport function arraySample<T>(arr: Array<T>): T {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function toCamelCase(str: string) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup<T> {\n  types: Set<T>\n\n  constructor(types: T[]) {\n    this.types = new Set(types)\n  }\n\n  add(...types: T[]) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type: T) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export function round(n: number) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p: number) {\n  return Math.random() <= p\n}\n\nexport function equals(a: number, b: number, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n: number): number {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n: number, k: number) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a: number, b: number, n: number) {\n  return (k: number) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n: number, p: number) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from: number, to: number, fn: (i: number) => number) {\n  let output = 0\n  for (let i = from; i <= to; i++) output += fn(i)\n  return output\n}\n\nexport function range(from: number, to: number, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","import type { Vector3 as IVector3 } from \"@minecraft/server\"\n\nimport { serialize } from \"../util\"\n\n/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN implements IVector3 {\n  axes: number[]\n\n  /**\n   * Create a vector.\n   * @param axes - The axes of the vector.\n   */\n  constructor(...axes: number[]) {\n    this.axes = axes\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n  get w() {\n    return this.get(3)\n  }\n  set w(value) {\n    this.set(3, value)\n  }\n\n  /**\n   * Create a vector.\n   * @param vector - The vector wrote in array or string.\n   * @returns The vector.\n   */\n  static create(vector: number[] | string): VectorN {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n\n    throw new Error(`Can't create vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string): VectorN {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns The string representation of the vector.\n   */\n  stringify(): string {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns The array representation of the vector.\n   */\n  toArray(): Array<number> {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param hint - The type hint.\n   * @returns The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint: string): string | VectorN {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns The iterator for the axes.\n   */\n  [Symbol.iterator](): Iterator<number> {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns The number of dimensions.\n   */\n  get dimensions(): number {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param index - The index of the component.\n   * @returns The component value.\n   */\n  get(index: number): number {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param index - The index of the component.\n   * @param value - The value to set.\n   */\n  set(index: number, value: number) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): VectorN {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { equals, round } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Array<number>) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param a - The vector to clone.\n   * @returns The cloned vector.\n   */\n  static clone(a: VectorN) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a: VectorN, b: VectorN) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static add(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static subtract(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static multiply(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static divide(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param a - The vector to scale.\n   * @param n - The scalar value.\n   * @returns The resulting vector.\n   */\n  static scale(a: VectorN, n: number) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param a - The vector to negate.\n   * @returns The resulting vector.\n   */\n  static negate(a: VectorN) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param a - The vector to invert.\n   * @returns The resulting vector.\n   */\n  static inverse(a: VectorN) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param a - The vector to modify.\n   * @param axis1 - The first axis to exchange.\n   * @param axis2 - The second axis to exchange\n   * @returns The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a: VectorN, axis1: number, axis2: number) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static max(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static min(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static floor(a: VectorN) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static ceil(a: VectorN) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static round(a: VectorN) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static abs(a: VectorN) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param a - The vector to calculate the magnitude of.\n   * @returns The magnitude of the vector.\n   */\n  static magnitude(a: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param a - The vector to calculate the squared magnitude of.\n   * @returns The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a: VectorN) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The distance between the vectors.\n   */\n  static distance(a: VectorN, b: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The squared distance between the vectors.\n   */\n  static squaredDistance(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The dot product of the vectors.\n   */\n  static dot(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param a - The vector to normalize.\n   * @returns The normalized vector.\n   */\n  static normalize(a: VectorN) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The angle between the vectors in radians.\n   */\n  static angle(a: VectorN, b: VectorN) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param dimensions - The number of dimensions.\n   * @param scale - The scale of the random components.\n   * @returns The random vector.\n   */\n  static random(dimensions: number, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static lerp(a: VectorN, b: VectorN, t: number) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static slerp(a: VectorN, b: VectorN, t: number) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param points - The control points.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static bezier(points: VectorN[], t: number): VectorN {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(\n    vector: number[] | string | { x: number; y: number; z: number }\n  ): Vector3 {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The cross product of the vectors.\n   */\n  static cross(a: Vector3, b: Vector3): Vector3 {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { serialize } from \"../util\"\nimport { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\nexport type Vector3Like =\n  | string\n  | number[]\n  | { x: number; y: number; z: number }\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param x - The x axis.\n   * @param y - The y axis.\n   * @param z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Vector3Like): Vector3 {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n\n    throw new Error(`Can't create 3d vector for ${serialize(vector)}`)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): Vector3 {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v: Vector3 | VectorN) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v: Vector3) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v: Vector3) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v: Vector3) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v: Vector3) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v: Vector3) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v: Vector3) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v: Vector3) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n: number) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import type { Vector3Like } from \"../vector/Vector3.class\"\nimport { Vector3, Vector3Utils } from \"../vector/index\"\nimport type { BlockLocation } from \"./BlockLocation.class\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as Location\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v: Location) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: Location | BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: Location | BlockLocation) {\n    return this.add(v)\n  }\n}\n","import { Vector3Utils } from \"../vector\"\nimport { Vector3, type Vector3Like } from \"../vector/Vector3.class\"\n\nexport class BlockLocation extends Vector3 {\n  constructor(x: number, y: number, z: number) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as BlockLocation\n  }\n\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n  equals(v: BlockLocation) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: BlockLocation) {\n    return this.add(v)\n  }\n\n  divide(v: BlockLocation) {\n    super.divide(v)\n    return this.floor()\n  }\n}\n","import { type Player, system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms: number): Promise<void> =>\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun<T>(fn: () => T): Promise<T> {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText: string, target: Player) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn(): Promise<Player> {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id: string, name?: string) {\n  const objective = world.scoreboard.getObjective(id)\n\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier: string) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier: string) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","import { Dimension, world } from \"@minecraft/server\"\n\nimport { removeMinecraftNamespace } from \"../util/game\"\nimport { Location } from \"./Location.class\"\n\nexport class LocationInfo {\n  location: Location\n  dimension: Dimension\n\n  constructor({\n    location,\n    dimension,\n  }: {\n    location:\n      | Location\n      | number[]\n      | string\n      | {\n          x: number\n          y: number\n          z: number\n        }\n    dimension: string | Dimension\n  }) {\n    this.location =\n      location instanceof Location ? location : Location.create(location)\n    this.dimension =\n      dimension instanceof Dimension ? dimension : world.getDimension(dimension)\n  }\n  textify() {\n    return {\n      location: `${this.location}`,\n      dimension: this.dimension.id,\n    }\n  }\n\n  [Symbol.toPrimitive](hint: string) {\n    if (hint === \"string\")\n      return `${removeMinecraftNamespace(this.dimension.id)}: ${this.location}`\n    return this\n  }\n}\n","import { BlockLocation } from \"./BlockLocation.class\"\nimport type { Direction } from \"./Directions.class\"\nimport { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction: Direction) {\n    return BlockLocation.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(from: Location, to: Location, step = 1) {\n    const output = []\n    for (let x = from.x; x <= to.x; x += step) {\n      for (let y = from.y; y <= to.y; y += step) {\n        for (let z = from.z; z <= to.z; z += step) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","export class Direction {\n  code: number\n\n  constructor(directionCode: number) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n      default:\n        throw new Error(\"Unexpected error.\")\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction: Direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction: Direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import {\n  type ItemComponentTypeMap,\n  ItemComponentTypes,\n  type ItemEnchantableComponent,\n  type ItemStack,\n} from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  _item: ItemStack\n  type: ItemStack[\"type\"]\n  typeId: MinecraftItemTypes\n\n  constructor(itemStack: ItemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId as MinecraftItemTypes\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(\n        removeMinecraftNamespace(\n          component.typeId\n        ) as keyof ItemComponentTypeMap,\n        component\n      )\n    })\n  }\n\n  components = new Map<\n    keyof ItemComponentTypeMap,\n    ItemComponentTypeMap[keyof ItemComponentTypeMap]\n  >()\n\n  hasComponent(componentId: string) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\n      ItemComponentTypes.Enchantable\n    ) as ItemEnchantableComponent\n  }\n}\n","import {\n  ItemComponentTypes,\n  type ItemDurabilityComponent,\n  type ItemStack,\n} from \"@minecraft/server\"\n\nimport { withProbability } from \"../../util/math\"\nimport { WrappedItemStack } from \"./WrappedItemStack.class\"\n\nexport class ItemStackWithDurability extends WrappedItemStack {\n  constructor(itemStack: ItemStack) {\n    if (!ItemStackWithDurability.match(itemStack))\n      throw new TypeError(\n        `The \"${itemStack.typeId}\" doesn't have the \"${ItemComponentTypes.Durability}\" component.`\n      )\n\n    super(itemStack)\n  }\n\n  static match(itemStack) {\n    return itemStack.hasComponent(\"minecraft:durability\")\n  }\n\n  get damage() {\n    return (\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).damage\n  }\n  set damage(value) {\n    ;(\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).damage = value < 0 ? 0 : value\n  }\n  get maxDurability() {\n    return (\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).maxDurability\n  }\n  get durability() {\n    return this.maxDurability - this.damage\n  }\n  set durability(value) {\n    this.damage += this.durability - value\n  }\n\n  applyDamage(damage: number) {\n    const unbreakingLevel = this.enchants.getEnchantment(\"unbreaking\")?.level\n    const probability =\n      (\n        this.components.get(\n          ItemComponentTypes.Durability\n        ) as ItemDurabilityComponent\n      ).getDamageChance(unbreakingLevel) / 100\n\n    for (let i = 0; i < damage; i++) {\n      if (withProbability(probability)) this.durability -= 1\n    }\n\n    return this\n  }\n}\n","import type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport type { ILootTableItemConfig } from \"@/lib/wrapper/LootTable.class\"\n\nexport type ItemDropConfig = {\n  item_id: MinecraftItemTypes\n  default_range?: [number, number] // default [1, 1]\n  max_amount?: number // default Number.POSITIVE_INFINITY\n  xp_range?: [number, number] // default [0, 0]\n  damage?: number // default 1\n}\n\nexport enum FortuneRules {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  Ore = 0,\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  Melon = 1,\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  Grass = 2,\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  Flower = 3,\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  Crop = 4,\n  // 使用自定义的战利品表\n  Custom = 5,\n}\n\nexport type BlockDropsConfigOption = {\n  // necessary if the fortune rule is custom\n  custom?: Record<\n    \"0\" | \"1\" | \"2\" | \"3\",\n    Array<ILootTableItemConfig<ItemDropConfig[]>>\n  >\n}\n\nexport type BlockDropsConfig = Array<{\n  // when dig with item\n  // use \"<empty>\" for empty-handed\n  // use \"<default>\" if none of the other items meet the requirements\n  dig_by:\n    | MinecraftItemTypes\n    | Array<MinecraftItemTypes | \"<empty>\">\n    | {\n        item_group: string\n      }\n    | \"<empty>\"\n    | \"<default>\"\n\n  // the raw resource that drop\n  // default to use the block item (if has)\n  raw?: ItemDropConfig\n\n  // for ore like\n  // refined resource\n  refined?: ItemDropConfig\n\n  // for crop like\n  // seend resource, default to use raw resource\n  seed?: ItemDropConfig\n  // immature resource, default to use seed resource\n  immature?: ItemDropConfig\n\n  // the rule template for fortune enchantment\n  fortune_rule?: FortuneRules\n\n  option?: BlockDropsConfigOption\n}>\n\nexport type BlockConfig = {\n  drops: BlockDropsConfig\n}\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport type { BlockConfig } from \"./types\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n  acacia_log: acaciaLog,\n  amethyst_block: amethystBlock,\n  amethyst_cluster: amethystCluster,\n  ancient_debris: ancientDebris,\n  birch_log: birchLog,\n  cherry_log: cherryLog,\n  coal_ore: coalOre,\n  copper_ore: copperOre,\n  crimson_stem: crimsonStem,\n  dark_oak_log: darkOakLog,\n  deepslate: deepslate,\n  deepslate_coal_ore: deepslateCoalOre,\n  deepslate_copper_ore: deepslateCopperOre,\n  deepslate_diamond_ore: deepslateDiamondOre,\n  deepslate_emerald_ore: deepslateEmeraldOre,\n  deepslate_gold_ore: deepslateGoldOre,\n  deepslate_iron_ore: deepslateIronOre,\n  deepslate_lapis_ore: deepslateLapisOre,\n  deepslate_redstone_ore: deepslateRedstoneOre,\n  diamond_ore: diamondOre,\n  emerald_ore: emeraldOre,\n  gold_ore: goldOre,\n  iron_ore: ironOre,\n  jungle_log: jungleLog,\n  lapis_ore: lapisOre,\n  mangrove_log: mangroveLog,\n  nether_gold_ore: netherGoldOre,\n  oak_log: oakLog,\n  obsidian: obsidian,\n  quartz_ore: quartzOre,\n  redstone_ore: redstoneOre,\n  spruce_log: spruceLog,\n  stone: stone,\n  warped_stem: warpedStem,\n} as Record<string, BlockConfig>\n","import type { NumberRange as INumberRange } from \"@minecraft/common\"\n\nimport { range } from \"./util/math\"\n\nexport class NumberRange implements INumberRange {\n  min: number\n  max: number\n  step: number\n\n  constructor(min: number, max: number, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n: number) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport interface ILootTableItemConfig<T> {\n  weight: number\n  value: T\n}\n\nexport class LootTable<T = number> {\n  constructor(items: Array<number | ILootTableItemConfig<T>>) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set<ILootTableItemConfig<T>>()\n  totalWeight = 0\n\n  addItem(item: ILootTableItemConfig<T>) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n\n    throw new Error(\"Unexpected error.\")\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import {\n  type BlockDropsConfig,\n  type BlockDropsConfigOption,\n  FortuneRules,\n  type ItemDropConfig,\n} from \"@/data/block/types\"\nimport { BlockPermutation } from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport BlockDefinition from \"../../../data/block/index\"\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  itemId: MinecraftItemTypes\n  range: NumberRange\n  amountLootTable: LootTable\n  maxAmount: number\n  xpRange: NumberRange\n  damage: number\n\n  constructor({\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  }: ItemDropConfig) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult(): Array<{\n    itemId: MinecraftItemTypes\n    amount: number\n    xp?: number\n    damage?: number\n  }> {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  items: DropItem[]\n\n  constructor(group: ItemDropConfig[]) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output: ReturnType<DropItem[\"getResult\"]> = []\n    each(this.items, (item: DropItem) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport class BlockDrops {\n  blockTypeId: string\n  drops: BlockDropsConfig\n\n  blockItem: DropItem\n  rawResource: DropItem\n  refinedResource: DropItem | undefined\n  seedResource: DropItem\n  immatureResource: DropItem\n\n  fortuneRule: BlockDropsConfig[number][\"fortune_rule\"]\n\n  custumLootTables: BlockDropsConfigOption[\"custom\"]\n\n  constructor(\n    blockTypeId: string,\n    useItem: MinecraftItemTypes | \"<empty>\" = \"<empty>\"\n  ) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    const dropConfig = this.getDropConfig(useItem)\n    if (!dropConfig) {\n      throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId as MinecraftItemTypes,\n    })\n    this.rawResource = dropConfig.raw\n      ? new DropItem(dropConfig.raw)\n      : this.blockItem\n\n    // for ore like\n    this.refinedResource =\n      dropConfig.refined && new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seedResource = dropConfig.seed\n      ? new DropItem(dropConfig.seed)\n      : this.rawResource\n    this.immatureResource = dropConfig.immature\n      ? new DropItem(dropConfig.immature)\n      : this.seedResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FortuneRules.Custom) {\n      if (!dropConfig.option?.custom)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n\n      this.custumLootTables = dropConfig.option.custom\n    }\n  }\n\n  getDropConfig(useItem: MinecraftItemTypes | \"<empty>\") {\n    return (\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n    )\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule !== undefined) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FortuneRules.Ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FortuneRules.Flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seedResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FortuneRules.Custom: {\n          const lootTable = new LootTable<ItemDropConfig[]>(\n            this.custumLootTables![`${level}` as \"0\" | \"1\" | \"2\" | \"3\"]\n          )\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n    }\n\n    return this.rawResource.getResult()\n  }\n}\n","import {\n  type Block,\n  BlockPermutation,\n  BlockVolume,\n  ItemStack,\n} from \"@minecraft/server\"\nimport type {\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n} from \"@minecraft/vanilla-data\"\n\nimport {\n  BlockLocation,\n  type Direction,\n  type Location,\n  LocationUtils,\n} from \"../../location/index\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\nimport { WrappedItemStack } from \"../item/index\"\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  _block: Block\n  type: Block[\"type\"]\n  typeId: MinecraftBlockTypes\n  location: BlockLocation\n  dimension: Block[\"dimension\"]\n  permutation: Block[\"permutation\"]\n\n  constructor(block: Block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId as MinecraftBlockTypes\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v: Location | BlockLocation) {\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction: Direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name: string) {\n    return this.permutation.getState(name)\n  }\n  hasState(name: string) {\n    return !!this.getState(name)\n  }\n  setState(name: string, value: string | number | boolean) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId: MinecraftItemTypes | \"<empty>\" = \"<empty>\") {\n    return !!new BlockDrops(this.typeId).getDropConfig(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack: ItemStack | WrappedItemStack) {\n    const drops = new BlockDrops(\n      this.typeId,\n      (useItemStack.typeId as MinecraftItemTypes) ?? \"<empty>\"\n    )\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.getEnchantment(\"fortune\")?.level ?? 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new ItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\nimport type { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class WrappedBlocks extends WrapperTemplate {\n  _blocks: WrappedBlock[]\n\n  constructor(blocks: WrappedBlock[]) {\n    super()\n\n    this._blocks = blocks\n  }\n\n  get _block() {\n    return this._blocks[0]\n  }\n\n  get type() {\n    return this._block.type\n  }\n  get typeId() {\n    return this._block.typeId\n  }\n  get location() {\n    return this._block.location\n  }\n  get dimension() {\n    return this._block.dimension\n  }\n  get permutation() {\n    return this._block.permutation\n  }\n}\n","import type { Block } from \"@minecraft/server\"\n\nimport { each } from \"../../util/index\"\nimport { type Vector3, Vector3Utils } from \"../../vector/index\"\nimport type { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class BlockList<T extends Block | WrappedBlock> {\n  constructor(blocks?: T[]) {\n    if (blocks) this.add(...blocks)\n  }\n\n  blocks: T[] = []\n\n  get size() {\n    return this.blocks.length\n  }\n\n  add(...blocks: T[]) {\n    each(blocks, (block) => {\n      if (!this.has(block)) this.blocks.push(block)\n    })\n  }\n  has(block: T) {\n    return this.blocks.some(({ location }) =>\n      Vector3Utils.exactEquals(location as Vector3, block.location as Vector3)\n    )\n  }\n\n  shift() {\n    return this.blocks.shift()\n  }\n\n  [Symbol.iterator]() {\n    return this.blocks.values()\n  }\n}\n","import type { Block } from \"@minecraft/server\"\n\nimport { BlockLocation, Directions } from \"../../location/index\"\nimport { WrappedBlock } from \"./WrappedBlock.class\"\nimport { WrappedBlocks } from \"./WrappedBlocks.class\"\n\nimport {\n  COPPER_DOORS,\n  DOORS,\n  WOODEN_DOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class DoorBlock extends WrappedBlocks {\n  constructor(block: Block) {\n    DoorBlock.assert(block)\n\n    const wrappedBlock =\n      block instanceof WrappedBlock ? block : new WrappedBlock(block)\n\n    const isUpper = wrappedBlock.getState(\"upper_block_bit\")\n    const blocks = [\n      // _lower\n      isUpper ? wrappedBlock.getNeighbourBlock(Directions.Down) : wrappedBlock,\n      // _upper\n      isUpper ? wrappedBlock : wrappedBlock.getNeighbourBlock(Directions.Up),\n    ]\n\n    super(blocks)\n  }\n\n  static match(block) {\n    return DOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (DoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a door.`)\n  }\n\n  get _lower() {\n    return this._blocks[0]\n  }\n  get _upper() {\n    return this._blocks[1]\n  }\n\n  get opened() {\n    return this._lower.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // the direction you are facing when you place the door\n    const directionCode = this._lower.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 1:\n        return Directions.South\n      case 2:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get hingeSide() {\n    return this._upper.getState(\"door_hinge_bit\")\n    // true -> right\n    // false -> left\n  }\n\n  isWooden() {\n    return WOODEN_DOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_DOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this._lower.setState(\"open_bit\", true)\n  }\n  close() {\n    this._lower.setState(\"open_bit\", false)\n  }\n\n  getRelated({ shouldBeTheSameType = true } = {}) {\n    // 获取可以与该门双开的另一个门和这个门组成的列表\n    const output: DoorBlock[] = [this]\n\n    // 1. 获取另一个门的位置\n    //    根据门的方向和门轴位置确定\n    // e.g. 如果一个门的朝向是东边，门轴在左边（即北边）\n    //      那么另一个门应该位于南边，即 z+1 的位置\n    const facingDirection = this.facingDirection\n    const hingeSide = this.hingeSide\n    const offset = BlockLocation.create({\n      x: Number(\n        facingDirection.isSouth()\n          ? hingeSide || -1\n          : facingDirection.isNorth()\n            ? !hingeSide || -1\n            : 0\n      ),\n      y: 0,\n      z: Number(\n        facingDirection.isEast()\n          ? !hingeSide || -1\n          : facingDirection.isWest()\n            ? hingeSide || -1\n            : 0\n      ),\n    })\n\n    // 2. 进行判断\n    const relatedBlock = this._lower.getOffsetBlock(offset)\n    if (DoorBlock.match(relatedBlock)) {\n      const relatedDoor = new DoorBlock(relatedBlock._block)\n      // 另一扇门应该方向相同，而门轴相反\n      if (\n        relatedDoor.canBeOpenedByHand() &&\n        (shouldBeTheSameType ? relatedDoor.typeId === this.typeId : true) &&\n        relatedDoor.facingDirection.code === facingDirection.code &&\n        relatedDoor.hingeSide === !hingeSide\n      )\n        output.push(relatedDoor)\n    }\n\n    return output\n  }\n}\n","import type { Entity } from \"@minecraft/server\"\n\nimport { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport type { MinecraftEntityTypes } from \"@minecraft/vanilla-data\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  _entity: Entity\n  id: Entity[\"id\"]\n  typeId: MinecraftEntityTypes\n  scoreboardIdentity: Entity[\"scoreboardIdentity\"]\n  components = new Map()\n\n  constructor(entity: Entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId as MinecraftEntityTypes\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n\n    throw new Error(\"Unexpected error.\")\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\ntype CommandConfig = {\n  regex: RegExp\n  runner: (commandString: string, target: Player) => Promise<void>\n}\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set<CommandConfig>()\n\nexport class Commands {\n  static run(commandString: string, target: Entity | Dimension = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(\n    commandString: string,\n    target: Entity | Dimension = overworld\n  ) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(\n    prefix: string,\n    command: string,\n    callback: (argv: string[], target: Player) => Promise<void>\n  ) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner: CommandConfig[\"runner\"] = async (commandString, target) => {\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import type { Container, ItemStack } from \"@minecraft/server\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedContainer extends WrapperTemplate {\n  _container: Container\n\n  constructor(container: Container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot: number) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot: number, itemStack: ItemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack: ItemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import type { Container, Entity, ItemStack } from \"@minecraft/server\"\n\nimport type { WrappedEntity } from \"../entity\"\nimport { WrappedContainer } from \"./WrappedContainer.class\"\n\nexport class EntityContainer extends WrappedContainer {\n  _entity: Entity\n\n  constructor(entity: Entity | WrappedEntity, container: Container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack: ItemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import {\n  type Entity,\n  GameMode,\n  type ItemStack,\n  type Player,\n} from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\nimport { EntityContainer } from \"../container/index\"\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  name: Player[\"name\"]\n\n  constructor(player: Player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity: Entity | WrappedEntity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity as Player\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches: GameMode[] = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode: GameMode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode: GameMode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item: ItemStack) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(\n    slot: number,\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}): number {\n    let xpAmount = amount\n\n    if (useXpOrb && amount >= 0) {\n      while (xpAmount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import type { Block, Player } from \"@minecraft/server\"\n\nimport { Directions } from \"../../location/index\"\nimport { WrappedPlayer } from \"../entity/index\"\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nimport {\n  COPPER_TRAPDOORS,\n  TRAPDOORS,\n  WOODEN_TRAPDOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class TrapdoorBlock extends WrappedBlock {\n  constructor(block: Block) {\n    TrapdoorBlock.assert(block)\n\n    super(block)\n  }\n\n  static match(block) {\n    return TRAPDOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (TrapdoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a trapdoor.`)\n  }\n\n  get opened() {\n    return this.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // trapdoor is on the >direction< side of a block\n    const directionCode = this.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 2:\n        return Directions.South\n      case 1:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get upsideOrDown() {\n    return this.getState(\"upside_down_bit\")\n  }\n\n  isWooden() {\n    return WOODEN_TRAPDOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_TRAPDOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this.setState(\"open_bit\", true)\n  }\n  close() {\n    this.setState(\"open_bit\", false)\n  }\n\n  getRelated(\n    player: Player,\n    { extensive = true, maxLength = 1, shouldBeTheSameType = true } = {}\n  ) {\n    // 获取可以与该活板门双开的另外一些活板门和这个活板门组成的列表\n    const output: TrapdoorBlock[] = [this]\n\n    if (maxLength > 0) {\n      // 1. 获取另一个活板门的位置\n      // e.g. 如果一个活板门位于一个方块的东边\n      //      那么另一个活板门应该位于东边，即 x+1 的位置\n      const relatedBlock = this.getNeighbourBlock(this.facingDirection)\n\n      // 2. 判断是否为相关活板门\n      if (TrapdoorBlock.match(relatedBlock)) {\n        // TODO: refactor _bloc6k\n        const relatedTrapdoor = new TrapdoorBlock(relatedBlock._block)\n        // 方向相反，上下位置相同\n        if (\n          relatedTrapdoor.canBeOpenedByHand() &&\n          (shouldBeTheSameType\n            ? relatedTrapdoor.typeId === this.typeId\n            : true) &&\n          relatedTrapdoor.facingDirection.isOppositeTo(this.facingDirection) &&\n          relatedTrapdoor.upsideOrDown === this.upsideOrDown\n        )\n          output.push(relatedTrapdoor)\n      }\n    }\n\n    if (extensive) {\n      let that: TrapdoorBlock = this\n      let needOpposite = false\n\n      // 仅 maxLength > 1 时才会运行\n      while (--maxLength) {\n        // 3. 获取扩展活板门\n        //    即能与该活板门延伸联动的另一个活板门\n        // @ts-ignore\n        const playerFacing = new WrappedPlayer(player).getFacingDirectionXZ()\n        const extensiveBlock = needOpposite\n          ? that.getNeighbourBlock(playerFacing.getOpposite())\n          : that.getNeighbourBlock(playerFacing)\n\n        if (TrapdoorBlock.match(extensiveBlock)) {\n          const extensiveTrapdoor = new TrapdoorBlock(extensiveBlock._block)\n\n          // 方向相同，上下位置相同\n          if (\n            extensiveTrapdoor.canBeOpenedByHand() &&\n            (shouldBeTheSameType\n              ? extensiveTrapdoor.typeId === this.typeId\n              : true) &&\n            extensiveTrapdoor.facingDirection.equals(this.facingDirection) &&\n            extensiveTrapdoor.upsideOrDown === this.upsideOrDown\n          ) {\n            const result = extensiveTrapdoor.getRelated(player, {\n              extensive: false,\n              maxLength,\n            })\n            if (result.length > 1) {\n              output.push(...result)\n\n              that = extensiveTrapdoor\n              continue\n            }\n          }\n        }\n\n        // 当玩家面对的方向可以联动的活板门数量不足时\n        // 反向查找\n        if (!needOpposite) {\n          needOpposite = true\n          that = this\n          // 因为此变向操纵消耗了一次迭代，故补充一次\n          maxLength++\n        } else {\n          break\n        }\n      }\n    }\n\n    return output\n  }\n}\n","import type { Player, RawMessage } from \"@minecraft/server\"\nimport {\n  type ActionFormData,\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  type ModalFormData,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\ninterface DialogHandlers<T> {\n  dialog: ModalFormData | MessageFormData | ActionFormData\n  onClose?: () => Promise<T>\n  onSubmit?: (\n    submitted: NonNullable<ModalFormResponse[\"formValues\"]>\n  ) => Promise<T>\n  onSelectButton1?: () => Promise<T>\n  onSelectButton2?: () => Promise<T>\n  onSelect?: (\n    selected: NonNullable<ActionFormResponse[\"selection\"]>\n  ) => Promise<T>\n}\n\nexport class Dialog<T> implements DialogHandlers<T> {\n  static async confirm<U>({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => ({}) as U,\n    onConfirm = async () => ({}) as U,\n  }: {\n    title?: string\n    body: RawMessage | string\n    target: Player\n    onCancel?: () => Promise<U>\n    onConfirm?: () => Promise<U>\n  }): Promise<U | undefined> {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog<U>({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  dialog\n  onClose\n  onSubmit\n  onSelectButton1\n  onSelectButton2\n  onSelect\n\n  constructor({\n    dialog,\n    onClose = async () => ({}) as T,\n    onSubmit = async () => ({}) as T,\n    onSelectButton1 = async () => ({}) as T,\n    onSelectButton2 = async () => ({}) as T,\n    onSelect = async () => ({}) as T,\n  }: DialogHandlers<T>) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n\n  async show(target: Player): Promise<T | undefined> {\n    let response: ModalFormResponse | MessageFormResponse | ActionFormResponse\n\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n\n    if (response instanceof ModalFormResponse) {\n      if (!response.formValues) throw new Error(\"Unexpected error.\")\n\n      return await this.onSubmit(response.formValues)\n    }\n\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n\n      throw new Error(\"Unexpected error.\")\n    }\n\n    if (response instanceof ActionFormResponse) {\n      if (!response.selection) throw new Error(\"Unexpected error.\")\n\n      return await this.onSelect(response.selection)\n    }\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import type {\n  Player,\n  ScoreboardIdentity,\n  ScoreboardObjective,\n} from \"@minecraft/server\"\n\nimport md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport {\n  type Serializable,\n  deserialize,\n  each,\n  eachAsync,\n  serialize,\n} from \"../util/index\"\nimport type { WrappedPlayer } from \"../wrapper/entity\"\n\nexport const ALL_DATABASES = new Map<string, Database<any>>()\n\nexport class Database<T extends Serializable> {\n  id: string\n  objective: ScoreboardObjective\n\n  static open<U extends Serializable>(\n    player: Player | WrappedPlayer,\n    dbName: string\n  ) {\n    return new Database<U>(player, dbName)\n  }\n  constructor(player: Player | WrappedPlayer, dbName: string) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map<string, { value: T; participant: ScoreboardIdentity }>()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName) as Record<string, T>\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key: string) {\n    return this.store.has(key)\n  }\n  async delete(key: string) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)!\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key: string) {\n    return this.store.get(key)?.value\n  }\n  async set(key: string, value: T) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output: Record<string, T> = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries(): Generator<[string, T]> {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys(): Generator<string> {\n    for (const key of this.store.keys()) yield key\n  }\n  *values(): Generator<T> {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  _events: Record<string, Function[]> = {}\n\n  on(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args: any[]) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args: any[]) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName: string, listener: Function) {\n    if (this._events[eventName]) {\n      const newListeners: Function[] = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName: string, ...args: any[]) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName: string, ...args: any[]) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName: string, listener: Function) {\n    return this.on(eventName, listener)\n  }\n  off(eventName: string, listener: Function) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemRange {\n  name: string\n  description: string\n  range?: [number, number, number?]\n  defaultValue?: number\n  reload?: boolean\n  events?: {\n    inited?: (selected: number, player: Player) => void\n    changed?: (selected: number, original: number, player: Player) => void\n    selected?: (selected: number, original: number, player: Player) => void\n  }\n}\n\nexport class OptionItemRange {\n  name: string\n  description: string\n  range: NumberRange\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: number | undefined\n  selected: number | undefined\n\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: {\n    _player: Player\n  } & IOptionItemRange) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: number) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(value: number) {\n    return this.range.includes(value)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Array<[T, string?]>\n  defaultValue?: T\n  reload?: boolean\n  events?: {\n    inited?: (selected: T, player: Player) => void\n    changed?: (selected: T, original: T, player: Player) => void\n    selected?: (selected: T, original: T, player: Player) => void\n  }\n}\n\nexport class OptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Map<T, string>\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: T | undefined\n  selected: T | undefined\n\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: { _player: Player } & IOptionItemSelection<T>) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      //@ts-ignore\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: T) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(value: T) {\n    return this.values.has(value) || !this.values.size\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\nimport { each, eachAsync } from \"../util/index\"\nimport { type IOptionItemRange, OptionItemRange } from \"./OptionItemRange.class\"\nimport {\n  type IOptionItemSelection,\n  OptionItemSelection,\n} from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  name: string\n  db: Database<string | number | boolean>\n  player: Player\n\n  constructor(player: Player, name: string) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items: Record<string, OptionItemSelection<any> | OptionItemRange> = {}\n  reload = false\n\n  addItem(\n    opts: { _player: Player } & (IOptionItemRange | IOptionItemSelection<any>)\n  ) {\n    //@ts-ignore\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    //@ts-ignore\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name: string) {\n    return this.items[name]\n  }\n  hasItem(name: string) {\n    return !!this.items[name]\n  }\n  setItemVal<T>(\n    name: string,\n    value: T,\n    callback: (\n      selected: T,\n      original: T,\n      map: Record<string, any>\n    ) => void = () => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      //@ts-ignore\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name: string) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    // TODO: use map\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog?: Dialog<any>) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog?: Dialog<any>) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap: Array<{\n      name: string\n      valuesMap:\n        | Map<boolean, boolean>\n        | Map<number, string | number | boolean>\n        | Map<number, number>\n    }> = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog<void>({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\nimport type { IOptionItemRange } from \"./OptionItemRange.class\"\nimport type { IOptionItemSelection } from \"./OptionItemSelection.class\"\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n\n  players = new Map<Player, PlayerOption>()\n  _items = new Set()\n\n  addItem(opts: IOptionItemSelection<any> | IOptionItemRange) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player: Player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = () => {\n      throw new Error(\"Can't apply player after initialization.\")\n    }\n    return valueMap\n  }\n  getPlayer(player: Player) {\n    const playerOption = this.players.get(player)\n\n    if (!playerOption) throw new Error(\"Can't get player  options.\")\n\n    return playerOption\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ActionFormData } from \"@minecraft/server-ui\"\nimport { Dialog } from \"../dialog/index\"\nimport { each } from \"../util/index\"\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map<string, OptionNamespace>()\n\n  registerNamesapace(name: string) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name: string) {\n    const namespace = this.namespaces.get(name)\n\n    if (!namespace) throw new Error(\"Can't get namespace.\")\n\n    return namespace\n  }\n  async showDialog(player: Player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap: string[] = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO: name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"better-door\")\n  .addItem({\n    name: \"door\",\n    description: \"允许双开门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:door -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"trapdoor\",\n    description: \"允许多开活板门\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:trapdoor -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_trapdoor_length\",\n    description: \"允许多开活板门的最大距离\",\n    range: [1, 32],\n    defaultValue: 3,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:max_trapdoor_length -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"should_be_the_same_type\",\n    description: \"是否需要是同种门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:should_be_the_same_type -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { DoorBlock, TrapdoorBlock } from \"@/lib/wrapper/block/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.beforeEvents.itemUseOn.subscribe((event) => {\n    const { block, source: player } = event\n    const playerOption = option.getPlayer(player)\n\n    const shouldBeTheSameType = playerOption.getItemVal(\n      \"should_be_the_same_type\"\n    )\n\n    if (DoorBlock.match(block) && playerOption.getItemVal(\"door\")) {\n      event.cancel = true\n      // @ts-ignore\n      const doors = DoorBlock.wrap(block).getRelated({ shouldBeTheSameType })\n      asyncRun(() => {\n        if (doors[0].opened) each(doors, (_) => _.close())\n        else each(doors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    } else if (\n      TrapdoorBlock.match(block) &&\n      playerOption.getItemVal(\"trapdoor\")\n    ) {\n      event.cancel = true\n      const maxLength = playerOption.getItemVal(\"max_trapdoor_length\")\n      // @ts-ignore\n      const trapdoors = TrapdoorBlock.wrap(block).getRelated(player, {\n        maxLength,\n        shouldBeTheSameType,\n      })\n      asyncRun(() => {\n        if (trapdoors[0].opened) each(trapdoors, (_) => _.close())\n        else each(trapdoors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    }\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { type Entity, EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO:\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  \"minecraft:killed_by\": killed_by,\n  \"minecraft:killed_for\": killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  \"minecraft:placed\": placed, // not in vanilla\n\n  // item\n  // TODO:\n}\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(_) {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener(_) {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import killed from \"./statistic/types/mob/killed\"\nimport type { Criteria } from \"./types\"\n\nexport default ({ player, callback }: Parameters<Criteria>[0]) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","import type { Player } from \"@minecraft/server\"\n\nimport { Database } from \"@/lib/database/index\"\n\nimport type { Criteria } from \"./criteria/types\"\n\nexport const globalDB = new Database<string>(\n  { id: \"global\" } as Player,\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map<Player, EventDB>()\n\nexport class EventDB {\n  player: Player\n  db: Database<Set<string>>\n\n  constructor(player: Player) {\n    this.player = player\n    this.db = Database.open(player, \"scoreboard-statistic-player\")\n  }\n\n  events = new Map<string, ReturnType<Criteria>[\"events\"]>()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player: Player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId: string) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId: string) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId: string) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId: string) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"scoreboard-statistic\")\n  .addItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport type { PlayerOption } from \"@/lib/option-manager/PlayerOption.class\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  addMinecraftNamespaceIfNeed,\n  asyncRun,\n  getOrAddObjective,\n} from \"@/util/game\"\nimport { eachAsync } from \"@/util/index\"\n\nimport CRITERIA from \"./criteria/index\"\nimport { ALL_PLAYER_DATABASES, type EventDB, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nexport class Handler {\n  player: Player\n  playerOption: PlayerOption\n  playerDB: EventDB\n\n  constructor(player: Player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n\n    const playerDB = ALL_PLAYER_DATABASES.get(player)\n\n    if (!playerDB) throw new Error(\"Can't get player database.\")\n\n    this.playerDB = playerDB\n  }\n\n  async add({\n    objectiveId,\n    criteria,\n    displayName = objectiveId,\n  }: {\n    objectiveId: string\n    criteria: string\n    displayName?: string\n  }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n\n  async remove({ objectiveId }: { objectiveId: string }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n\n  async start({\n    objectiveId,\n    criteria = globalDB.get(objectiveId) as string,\n  }: {\n    objectiveId: string\n    criteria?: string\n  }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n\n    if (!setupTigger) throw new Error(\"Unknown criteria.\")\n\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          !new WrappedPlayer(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  (objective.getScore(this.player) ?? 0) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              objective.addScore(this.player, result.value)\n            }\n          }\n        }\n      },\n    })\n\n    await eachAsync(tigger.events, async ({ options, listener }, eventName) => {\n      if (options)\n        await asyncRun(() =>\n          world.afterEvents[eventName].subscribe(listener, options)\n        )\n      else\n        await asyncRun(() => world.afterEvents[eventName].subscribe(listener)) // 为什么多传参数还报错啊啊啊啊啊啊啊！！！\n    })\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n\n  async stop({ objectiveId }: { objectiveId: string }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n    await eachAsync(events, async ({ listener }, eventName) => {\n      await asyncRun(() => world.afterEvents[eventName].unsubscribe(listener))\n    })\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria: string) {\n  return criteria\n    .split(\":\")\n    .map((e) => addMinecraftNamespaceIfNeed(e.replace(\".\", \":\")))\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv: string[], sender: Player) {\n  const playerOption = option.getPlayer(sender)\n  const handler = new Handler(sender)\n\n  const objectiveId = argv[2]\n  switch (argv[1]) {\n    case \"add\": {\n      const [, , , criteria, displayName] = argv\n      if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n      if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n      if (!playerOption.getItemVal(\"enable_creative\"))\n        sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n      const result = await handler.add({ objectiveId, criteria, displayName })\n      if (result.code)\n        sender.sendMessage(\n          `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n        )\n      else {\n        switch (result.message) {\n          case \"DUPLICATE_OBJECTIVE\": {\n            throw errorHandler(`添加失败：记分板 ${objectiveId} 已存在`, sender)\n          }\n          case \"UNKNOWN_CRITERIA\": {\n            throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n          }\n        }\n      }\n\n      if (playerOption.getItemVal(\"auto_start\")) {\n        const startResult = await handler.start({ objectiveId, criteria })\n        if (startResult)\n          sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n      }\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      async function _remove() {\n        const result = await handler.remove({ objectiveId })\n        if (result) sender.sendMessage(`删除成功 ${objectiveId}`)\n        else\n          throw errorHandler(\n            `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n            sender\n          )\n      }\n\n      if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n        await Dialog.confirm({\n          body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n          target: sender,\n          onConfirm: _remove,\n        })\n      else await _remove()\n\n      break\n    }\n    case \"stop\": {\n      const result = await handler.stop({ objectiveId })\n\n      if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"start\": {\n      const result = await handler.start({ objectiveId })\n\n      if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => playerOption.showDialog())\n      break\n    }\n    default: {\n      throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n    }\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each, eachAsync } from \"@/util/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(async () => {\n    await eachAsync(option.players, async ([player]) => {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      await eachAsync(participated, async (objectiveId) => {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      })\n    })\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n","import type { Player } from \"@minecraft/server\"\n\nimport { Database } from \"@/lib/database/index\"\nimport { Dialog } from \"@/lib/dialog/index\"\nimport { LocationInfo } from \"@/lib/location/index\"\nimport { each } from \"@/util/index\"\n\nexport const ALL_PLAYER_DATABASES = new Map<Player, TpxDB>()\n\nexport class TpxDB {\n  player: Player\n  db: Database<{\n    info: ReturnType<LocationInfo[\"textify\"]>\n    disposable: boolean\n  }>\n\n  constructor(player: Player) {\n    this.player = player\n    this.db = Database.open(player, \"tpx\")\n  }\n\n  static init(player: Player) {\n    const db = new TpxDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async set({\n    name,\n    disposable = false,\n    force = false,\n  }: {\n    name: string\n    disposable?: boolean\n    force?: boolean\n  }) {\n    const info = new LocationInfo(this.player)\n    const handleSet = async () => {\n      await this.db.set(name, {\n        info: info.textify(),\n        disposable,\n      })\n      return info\n    }\n    if (!force && this.db.has(name)) {\n      return await Dialog.confirm({\n        body: `名称 ${name} 已被占用，是否覆盖？`,\n        target: this.player,\n        onConfirm: async () => await handleSet(),\n      })\n    }\n    return await handleSet()\n  }\n  async get(name: string) {\n    if (!this.db.has(name)) return\n    const data = this.db.get(name)\n\n    if (!data) return\n\n    if (data.disposable) await this.db.delete(name)\n    if (data.info) return new LocationInfo(data.info)\n  }\n  async remove(name: string) {\n    if (!this.db.has(name)) return false\n\n    return await Dialog.confirm({\n      body: `是否删除 ${name} `,\n      target: this.player,\n      onConfirm: async () => await this.db.delete(name),\n    })\n  }\n  getAll() {\n    const output: Array<{\n      name: string\n      info: LocationInfo\n      disposable: boolean\n      text: string\n    }> = []\n    each(this.db, ([name, { info: data, disposable }]) => {\n      const info = new LocationInfo(data)\n      output.push({\n        name,\n        info,\n        disposable,\n        text: `${name} (${info})${disposable ? \" [一次性]\" : \"\"}`,\n      })\n    })\n    return output\n  }\n}\n","import { type EntityDieAfterEvent, type Player, world } from \"@minecraft/server\"\n\nimport { optionManager } from \"@/lib/option-manager/index\"\n\nimport { Handler } from \"./Handler.class\"\n\nasync function afterEntityDieCallback(event: EntityDieAfterEvent) {\n  const player = event.deadEntity as Player\n  const handler = new Handler(player)\n\n  await handler.set({\n    name: \"__death__\",\n    option: {\n      disposable: true,\n      force: true,\n    },\n  })\n}\n\nexport const option = optionManager\n  .registerNamesapace(\"tpx\")\n  .addItem({\n    name: \"auto_back_point\",\n    description: \"允许使用 tpx 传送时自动添加返回点\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:auto_back_point -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"back_after_death\",\n    description: \"允许死亡时自动添加死亡点\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) => {\n        console.warn(\"tpx:back_after_death -> from\", original, \"to\", selected)\n\n        if (selected)\n          world.afterEvents.entityDie.subscribe(afterEntityDieCallback, {\n            entityTypes: [\"minecraft:player\"],\n          })\n        else world.afterEvents.entityDie.unsubscribe(afterEntityDieCallback)\n      },\n    },\n  })\n  .addItem({\n    name: \"back_cmd\",\n    description: \"允许使用独立的 back 命令\",\n    values: [[true], [false]],\n    defaultValue: false,\n    reload: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:back_cmd -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"home_cmd\",\n    description: \"允许使用独立的 home 命令\",\n    values: [[true], [false]],\n    defaultValue: false,\n    reload: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"tpx:home_cmd -> from\", original, \"to\", selected),\n    },\n  })\n","import type { Player } from \"@minecraft/server\"\n\nimport type { PlayerOption } from \"@/lib/option-manager/PlayerOption.class\"\nimport { asyncRun } from \"@/util/game\"\n\nimport { ALL_PLAYER_DATABASES, type TpxDB } from \"./db\"\nimport { option } from \"./option\"\n\nexport class Handler {\n  player: Player\n  playerOption: PlayerOption\n  playerDB: TpxDB\n\n  constructor(player: Player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n\n    const playerDB = ALL_PLAYER_DATABASES.get(player)\n\n    if (!playerDB) throw new Error(\"Can't get player database.\")\n\n    this.playerDB = playerDB\n  }\n\n  async set({\n    name = \"default\",\n    option = {},\n  }: {\n    name?: string\n    option?: {\n      disposable?: boolean\n      force?: boolean\n    }\n  }) {\n    const info = await this.playerDB.set(Object.assign({ name }, option))\n    if (name !== \"__back__\" && name !== \"__death__\") return { info }\n  }\n  async remove({ name = \"default\" }) {\n    return await this.playerDB.remove(name)\n  }\n  async teleport({ name = \"default\" }) {\n    const info = await this.playerDB.get(name)\n    if (info) {\n      if (\n        this.playerOption.getItemVal(\"auto_back_point\") &&\n        name !== \"__death__\"\n      ) {\n        await this.set({\n          name: \"__back__\",\n          option: {\n            disposable: true,\n            force: true,\n          },\n        })\n      }\n      await asyncRun(() =>\n        this.player.teleport(info.location, {\n          dimension: info.dimension,\n          checkForBlocks: false,\n          keepVelocity: false,\n        })\n      )\n      return { info }\n    }\n  }\n  async tryTeleport({\n    names = [],\n  }: {\n    names: string[]\n  }) {\n    for (const name of names) {\n      const result = await this.teleport({ name })\n      if (result) return result\n    }\n  }\n  list() {\n    const datas = this.playerDB.getAll().map(({ text }) => text)\n    if (datas.length) return { msg: datas }\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { Commands } from \"@/lib/commands/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nconst SUB_COMMANDS = [\n  \"set\",\n  \"-s\",\n  \"remove\",\n  \"rm\",\n  \"-r\",\n  \"back\",\n  \"bk\",\n  \"-b\",\n  \"list\",\n  \"ls\",\n  \"-l\",\n  \"help\",\n  \"-h\",\n  \"option\",\n  \"opt\",\n  \"-o\",\n]\n\nexport async function tpxCommand(argv: string[], sender: Player) {\n  const name = argv[2] ?? \"default\"\n  const handler = new Handler(sender)\n\n  switch (argv[1]) {\n    case \"set\":\n    case \"-s\": {\n      if (SUB_COMMANDS.includes(name) || name === \"__back__\")\n        throw errorHandler(`添加失败：不能使用 ${name} 作为名称`, sender)\n\n      const result = await handler.set({\n        name,\n        option: {\n          disposable:\n            argv[3] === \"true\" ? true : argv[3] === \"false\" ? false : undefined,\n        },\n      })\n\n      if (result) sender.sendMessage(`成功设置 ${name} 在 ${result.info}`)\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      const result = await handler.remove({ name })\n\n      if (result === true) sender.sendMessage(`成功删除 ${name}`)\n      else if (result === false)\n        throw errorHandler(`删除失败：未找到 ${name}`, sender)\n\n      break\n    }\n    case \"back\":\n    case \"bk\":\n    case \"-b\": {\n      const result = await handler.tryTeleport({\n        names: [\"__death__\", \"__back__\"],\n      })\n\n      if (result) sender.sendMessage(`已返回到 ${result.info}`)\n      else throw errorHandler(\"传送失败：未找到返回点\", sender)\n\n      break\n    }\n    case \"list\":\n    case \"ls\":\n    case \"-l\": {\n      const result = handler.list()\n\n      if (result) {\n        result.msg.unshift(\"您的传送点有：\")\n        sender.sendMessage(result.msg.join(\"\\n- \"))\n      } else sender.sendMessage(\"您目前没有传送点\")\n\n      break\n    }\n    case \"help\":\n    case \"-h\": {\n      // TODO command-parser\n      sender.sendMessage(\"制作中...\")\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => option.getPlayer(sender).showDialog())\n      break\n    }\n    default: {\n      const result = await handler.teleport({ name: argv[1] })\n\n      if (result) sender.sendMessage(`已传送到 ${result.info}`)\n      else throw errorHandler(`传送失败：未找到传送点 ${argv[1]}`, sender)\n    }\n  }\n}\n\nexport async function backCommand(_: string[], sender: Player) {\n  if (option.getPlayer(sender).getItemVal(\"back_cmd\"))\n    await Commands.asyncRun(\"!tpx back\", sender)\n  else sender.sendMessage(\"您未启用该命令\")\n}\n\nexport async function homeCommand(argv: string[], sender: Player) {\n  if (option.getPlayer(sender).getItemVal(\"home_cmd\")) {\n    switch (argv[1]) {\n      case \"set\": {\n        await Commands.asyncRun(\"!tpx set __home__\", sender)\n        break\n      }\n      default: {\n        await Commands.asyncRun(\"!tpx __home__\", sender)\n      }\n    }\n  } else sender.sendMessage(\"您未启用该命令\")\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each } from \"@/util/index\"\n\nimport { backCommand, homeCommand, tpxCommand } from \"./command\"\nimport { TpxDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then((optMap) => {\n    // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n    // 同时避免在 beforeEvent 中构建导致的 read-only mode 问题\n    const players = optMap.keys()\n    each(players, (player) => TpxDB.init(player))\n\n    Commands.register(\"!\", \"tpx\", tpxCommand)\n\n    const values = [...optMap.values()]\n    if (values.some(({ back_cmd }) => back_cmd))\n      Commands.register(\"!\", \"back\", backCommand)\n    if (values.some(({ home_cmd }) => home_cmd))\n      Commands.register(\"!\", \"home\", homeCommand)\n  })\n  .catch(BetterConsole.error)\n","import { TypeGroup } from \"@/lib/wrapper/TypeGroup.class\"\nimport { BlockTypeGroups } from \"@/lib/wrapper/block/index\"\n\nexport const ENABLE_BLOCKS = new TypeGroup([\n  ...BlockTypeGroups.LOGS,\n  ...BlockTypeGroups.STEMS,\n  ...BlockTypeGroups.ORES,\n  \"minecraft:obsidian\",\n  \"minecraft:ancient_debris\",\n  \"minecraft:amethyst_block\",\n])\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"vein-mining\")\n  .addItem({\n    name: \"condition\",\n    description: \"触发条件\",\n    values: [\n      [\"off\", \"关闭\"],\n      [\"always\", \"总是\"],\n      [\"sneaking\", \"仅潜行时\"],\n    ],\n    defaultValue: \"sneaking\",\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"vein-mining:tigger -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_amount\",\n    description: \"最多检测的方块数量（并非最终挖掘的方块数）\",\n    range: [8, 128],\n    defaultValue: 64,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_stone\",\n    description: \"允许连锁挖掘岩石类方块（石头、深板岩）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_stone -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_collection\",\n    description: \"自动收集掉落物及经验（绕过经验修补）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:auto_collect_drops -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"prevent_tool_destruction\",\n    description: \"防止工具耐久耗尽\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:prevent_tool_destruction -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_edge\",\n    description: \"是否检测仅棱相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_diagonal\",\n    description: \"是否检测仅角相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_diagonal -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { ItemStack, world } from \"@minecraft/server\"\nimport type {\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n} from \"@minecraft/vanilla-data\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { BlockLocation } from \"@/lib/location/index\"\nimport type { PlayerOption } from \"@/lib/option-manager/PlayerOption.class\"\nimport type { BlockDrops } from \"@/lib/wrapper/block/BlockDrops.class\"\nimport {\n  BlockList,\n  BlockTypeGroups,\n  WrappedBlock,\n} from \"@/lib/wrapper/block/index\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  ItemStackWithDurability,\n  WrappedItemStack,\n} from \"@/lib/wrapper/item/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { ENABLE_BLOCKS } from \"./config\"\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.afterEvents.playerBreakBlock.subscribe((event) => {\n    const basicBlock = new WrappedBlock(event.block)\n    const blockTypeId = event.brokenBlockPermutation.type\n      .id as MinecraftBlockTypes\n    const player = new WrappedPlayer(event.player)\n    const playerOption = option.getPlayer(event.player)\n\n    let enableBlocks = ENABLE_BLOCKS\n    if (playerOption.getItemVal(\"enable_stone\"))\n      enableBlocks = ENABLE_BLOCKS.clone().add(...BlockTypeGroups.STONES)\n\n    player\n      .useMainHandItem(async (mainHandItem) => {\n        if (\n          !mainHandItem ||\n          !enableBlocks.has(blockTypeId) ||\n          !WrappedBlock.prototype.canBeDugBy.call(\n            { typeId: blockTypeId },\n            mainHandItem.typeId as MinecraftItemTypes\n          ) ||\n          playerOption.getItemVal(\"condition\") === \"off\" ||\n          (playerOption.getItemVal(\"condition\") === \"sneaking\" &&\n            !player.isSneaking)\n        )\n          return mainHandItem\n\n        const blockList = getRelatedBlocks(\n          playerOption,\n          basicBlock,\n          blockTypeId\n        )\n\n        const wrappedItem =\n          ItemStackWithDurability.tryWrap(mainHandItem) ??\n          new WrappedItemStack(mainHandItem)\n\n        let totalDamage = 0\n\n        const totalItems: ReturnType<BlockDrops[\"getDrops\"]> = []\n        let totalXp = 0\n\n        while (\n          blockList.size > 0 &&\n          (!playerOption.getItemVal(\"prevent_tool_destruction\") ||\n            (playerOption.getItemVal(\"prevent_tool_destruction\") &&\n              totalDamage <\n                // @ts-ignore\n                (wrappedItem.durability ?? Number.POSITIVE_INFINITY)))\n        ) {\n          const block = blockList.shift()\n\n          if (!block) throw new Error(\"Unexpected error.\")\n\n          const result = await asyncRun(() => block.breakBy(mainHandItem))\n\n          totalDamage += result.getTotalDamage()\n\n          if (playerOption.getItemVal(\"auto_collection\")) {\n            each(result.drops, (drop) => {\n              if (drop.xp) totalXp += drop.xp\n\n              totalItems.push(drop)\n            })\n          } else {\n            result.spawnDrops()\n          }\n        }\n\n        if (playerOption.getItemVal(\"auto_collection\")) {\n          each(totalItems, ({ itemId, amount }) =>\n            player.inventory.addItem(new ItemStack(itemId, amount))\n          )\n          player.addExperience(totalXp)\n        }\n\n        if (wrappedItem instanceof ItemStackWithDurability)\n          wrappedItem.applyDamage(totalDamage)\n\n        return wrappedItem._item\n      })\n      .catch(BetterConsole.error)\n  })\n\nfunction getNeighbourBlocks(\n  playerOption: PlayerOption,\n  basicBlock: WrappedBlock,\n  blockTypeId: MinecraftBlockTypes\n) {\n  const offsets = [\n    new BlockLocation(1, 0, 0),\n    new BlockLocation(-1, 0, 0),\n    new BlockLocation(0, 0, 1),\n    new BlockLocation(0, 0, -1),\n    new BlockLocation(0, 1, 0),\n    new BlockLocation(0, -1, 0),\n  ]\n\n  if (playerOption.getItemVal(\"enable_edge\")) {\n    offsets.push(\n      new BlockLocation(1, 1, 0),\n      new BlockLocation(1, -1, 0),\n      new BlockLocation(-1, 1, 0),\n      new BlockLocation(-1, -1, 0),\n      new BlockLocation(0, 1, 1),\n      new BlockLocation(0, -1, 1),\n      new BlockLocation(0, 1, -1),\n      new BlockLocation(0, -1, -1),\n      new BlockLocation(1, 0, 1),\n      new BlockLocation(1, 0, -1),\n      new BlockLocation(-1, 0, 1),\n      new BlockLocation(-1, 0, -1)\n    )\n  }\n\n  if (playerOption.getItemVal(\"enable_diagonal\")) {\n    offsets.push(\n      new BlockLocation(-1, -1, -1),\n      new BlockLocation(-1, 1, -1),\n      new BlockLocation(-1, -1, 1),\n      new BlockLocation(-1, 1, 1),\n      new BlockLocation(1, -1, -1),\n      new BlockLocation(1, 1, -1),\n      new BlockLocation(1, -1, 1),\n      new BlockLocation(1, 1, 1)\n    )\n  }\n\n  const list = new BlockList<WrappedBlock>()\n\n  each(offsets, (offset) => {\n    const block = basicBlock.getOffsetBlock(offset)\n    if (block.typeId === blockTypeId) list.add(block)\n  })\n\n  return list\n}\n\nfunction getRelatedBlocks(\n  playerOption: PlayerOption,\n  basicBlock: WrappedBlock,\n  blockTypeId: MinecraftBlockTypes\n) {\n  const maxAmount = playerOption.getItemVal(\"max_amount\")\n\n  const list = new BlockList<WrappedBlock>()\n  list.add(...getNeighbourBlocks(playerOption, basicBlock, blockTypeId))\n\n  let previousSize = 0\n  let currentSize = list.size\n\n  while (currentSize < maxAmount && currentSize - previousSize > 0) {\n    for (const block of list) {\n      list.add(...getNeighbourBlocks(playerOption, block, blockTypeId))\n      previousSize = currentSize\n      currentSize = list.size\n\n      if (currentSize >= maxAmount) break\n    }\n  }\n\n  return list\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","prototype","toString","TypeGroup","add","types","type","has","clone","toArray","constructor","WOODEN_DOORS","COPPER_DOORS","DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","TRAPDOORS","LOGS","STEMS","ORES","STONES","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","x","get","set","y","z","w","create","vector","Error","vectorStr","split","Number","toPrimitive","hint","axes","dimensions","index","VectorNUtils","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","addMinecraftNamespaceIfNeed","test","LocationInfo","textify","location","dimension","Dimension","getDimension","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","ItemComponentTypes","Enchantable","itemStack","typeId","getComponents","component","ItemStackWithDurability","damage","Durability","maxDurability","durability","applyDamage","unbreakingLevel","getEnchantment","level","probability","getDamageChance","TypeError","FortuneRules","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","Ore","Melon","acacia_log","acaciaLog","amethyst_block","amethystBlock","amethyst_cluster","amethystCluster","ancient_debris","ancientDebris","birch_log","birchLog","cherry_log","cherryLog","coal_ore","coalOre","copper_ore","copperOre","crimson_stem","crimsonStem","dark_oak_log","darkOakLog","deepslate","deepslate_coal_ore","deepslateCoalOre","deepslate_copper_ore","deepslateCopperOre","deepslate_diamond_ore","deepslateDiamondOre","deepslate_emerald_ore","deepslateEmeraldOre","deepslate_gold_ore","deepslateGoldOre","deepslate_iron_ore","deepslateIronOre","deepslate_lapis_ore","deepslateLapisOre","deepslate_redstone_ore","deepslateRedstoneOre","diamond_ore","diamondOre","emerald_ore","emeraldOre","gold_ore","goldOre","iron_ore","ironOre","jungle_log","jungleLog","lapis_ore","lapisOre","mangrove_log","mangroveLog","nether_gold_ore","netherGoldOre","oak_log","oakLog","obsidian","quartz_ore","quartzOre","redstone_ore","redstoneOre","spruce_log","spruceLog","stone","warped_stem","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","defaultRange","max_amount","DropItemGroup","group","e","BlockDrops","getDropConfig","useItem","find","digBy","getDrops","withFortune","withSilkTouch","immature","immatureResource","blockItem","fortuneRule","undefined","rawResource","lootTable","Grass","Flower","Crop","distribution","seedResource","Custom","custumLootTables","customItemDrop","blockTypeId","BlockDefinition","dropConfig","BlockPermutation","getItemStack","refinedResource","seed","option","custom","WrappedBlock","getOffsetBlock","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","hasEnchantment","spawnDrops","drop","spawnItem","ItemStack","spawnEntity","getTotalDamage","block","WrappedBlocks","_blocks","blocks","BlockList","size","some","shift","DoorBlock","_lower","_upper","opened","facingDirection","hingeSide","isWooden","isCopper","isIron","canBeOpenedByHand","open","close","getRelated","shouldBeTheSameType","relatedBlock","relatedDoor","wrappedBlock","isUpper","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Entity","runCommand","customCommands","filter","regex","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","WrappedContainer","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","useMainHandItem","useXpOrb","xpAmount","addLevels","TrapdoorBlock","upsideOrDown","extensive","maxLength","relatedTrapdoor","that","needOpposite","playerFacing","extensiveBlock","extensiveTrapdoor","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","formValues","onSubmit","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","digestbytes","asBytes","asString","ALL_DATABASES","Database","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","_","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","playerOption","OptionManager","registerNamesapace","namespaces","getNamesapace","namespace","ActionFormData","button","optionManager","changed","warn","setupListener","itemUseOn","source","doors","trapdoors","then","entityDie","entityTypes","cause","damageSource","damagingEntity","EntityDamageCause","entityAttack","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","killed","killed_by","killed_for","mined","placed","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","globalDB","ALL_PLAYER_DATABASES","EventDB","addParticipated","objectiveId","participated","getParticipated","setEvents","getEvents","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","creative","getScore","addScore","stop","handler","startResult","_remove","TpxDB","disposable","force","info","handleSet","text","afterEntityDieCallback","deadEntity","assign","teleport","checkForBlocks","keepVelocity","tryTeleport","names","list","datas","msg","SUB_COMMANDS","tpxCommand","unshift","backCommand","homeCommand","optMap","back_cmd","home_cmd","ENABLE_BLOCKS","BlockTypeGroups","basicBlock","enableBlocks","mainHandItem","blockList","getRelatedBlocks","wrappedItem","totalDamage","totalItems","totalXp","getNeighbourBlocks","offsets","previousSize","currentSize"],"mappings":"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","x_google_ignoreList":[69,70,71,72]}