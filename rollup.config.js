// @ts-check

import { readFileSync, readdirSync } from "node:fs"

import { getPathAlias, isProduction } from "./src/lib/util/node.js"

import alias from "@rollup/plugin-alias"
import commonjs from "@rollup/plugin-commonjs"
import { nodeResolve } from "@rollup/plugin-node-resolve"
import swc from "@rollup/plugin-swc"
import { defineConfig } from "rollup"

const pkg = JSON.parse(readFileSync("./package.json").toString())
const tsconfig = JSON.parse(
  readFileSync("./tsconfig.json", { encoding: "utf-8" })
)
const banner = (/** @type {string} */ name) =>
  `
/*!
 * ${name} v${pkg.version} (${pkg.homepage})
 * Copyright 2022-${new Date().getFullYear()} ${pkg.author}
 * Licensed under ${pkg.license}
 *
 * This file is automatically generated, please do not change it.
 */
`.trim()

// @ts-ignore
function createConfig({ src, dest, name: _name }) {
  const name = `${pkg.name}${_name ? `-${_name}` : ""}.js`

  return defineConfig({
    // @ts-ignore
    name,
    input: src,
    output: {
      file: dest,
      format: "es",
      sourcemap: true,
      strict: true,
      interop: "auto",
      banner: banner(name),
    },
    plugins: [
      swc({
        swc: {
          minify: isProduction(),
        },
      }),
      alias({
        entries: getPathAlias(tsconfig.compilerOptions, import.meta),
      }),
      commonjs(),
      nodeResolve({
        extensions: [".js", ".ts"],
      }),
    ],
  })
}

export default readdirSync("./src/script", { withFileTypes: true }).map(
  (dirent) => {
    const parentPath = dirent.parentPath
    const name = dirent.name
    if (dirent.isFile()) {
      return createConfig({
        src: `${parentPath}/${name}`,
        dest: `./dist/${name}`,
        name: name.split(".")[0],
      })
    }
    if (dirent.isDirectory()) {
      return createConfig({
        src: `${parentPath}/${name}/index.ts`,
        dest: `./dist/${name}.js`,
        name,
      })
    }
  }
)
