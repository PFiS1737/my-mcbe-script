{"version":3,"file":"scoreboard-statistic.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/commands/Commands.class.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/wrapper/container/Container.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js","../node_modules/.pnpm/serialize-javascript@6.0.2/node_modules/serialize-javascript/index.js","../src/lib/database/Database.class.ts","../src/script/scoreboard-statistic/db.ts","../src/lib/dialog/Dialog.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/NumberRange.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport function deserialize(str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport const AsyncFunction = (async () => {}).constructor\nexport function isAsyncFunc(func) {\n  return func[Symbol.toStringTag] === \"AsyncFunction\"\n}\n\nexport function arraySample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function arrayAt(arr, index) {\n  return index >= 0 ? arr[index] : arr[arr.length + index]\n}\n\nexport function toCamelCase(str) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  world,\n} from \"@minecraft/server\"\n\n// import { Parser } from \"mcbe-command-parser\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set()\n\nexport class Commands {\n  static run(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(prefix, command, /* grammar, */ callback) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner = async (commandString, target) => {\n      // callback(new Parser(commandString, grammar), target)\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","export function round(n) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p) {\n  return Math.random() <= p\n}\n\nexport function equals(a, b, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n) {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a, b, n) {\n  return (k) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n, p) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from, to, fn) {\n  let output = 0\n  for (let k = from; k <= to; k++) output += fn(k)\n  return output\n}\n\nexport function range(from, to, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN {\n  /**\n   * Create a vector.\n   * @param {...number} axes - The axes of the vector.\n   */\n  constructor(...axes) {\n    this.axes = axes\n  }\n\n  /**\n   * Create a vector.\n   * @param {Array<number>|string} vector - The vector wrote in array or string.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param {string} vectorStr - The string to parse.\n   * @returns {VectorN} The vector.\n   */\n  static parse(vectorStr) {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns {string} The string representation of the vector.\n   */\n  stringify() {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns {Array<number>} The array representation of the vector.\n   */\n  toArray() {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param {string} hint - The type hint.\n   * @returns {string|VectorN} The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns {Iterator<number>} The iterator for the axes.\n   */\n  [Symbol.iterator]() {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns {number} The number of dimensions.\n   */\n  get dimensions() {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @returns {number} The component value.\n   */\n  get(index) {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @param {number} value - The value to set.\n   */\n  set(index, value) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {VectorN} The new vector.\n   */\n  map(callbackfn) {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { binomial, equals, round, sum } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param {Array<number>} vector - The vector write in array.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param {VectorN} a - The vector to clone.\n   * @returns {VectorN} The cloned vector.\n   */\n  static clone(a) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a, b) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static add(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static subtract(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static multiply(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static divide(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param {VectorN} a - The vector to scale.\n   * @param {number} n - The scalar value.\n   * @returns {VectorN} The resulting vector.\n   */\n  static scale(a, n) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param {VectorN} a - The vector to negate.\n   * @returns {VectorN} The resulting vector.\n   */\n  static negate(a) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param {VectorN} a - The vector to invert.\n   * @returns {VectorN} The resulting vector.\n   */\n  static inverse(a) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @param {number} axis1 - The first axis to exchange.\n   * @param {number} axis2 - The second axis to exchange\n   * @returns {VectorN} The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a, axis1, axis2) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static max(...vectors) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static min(...vectors) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static floor(a) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static ceil(a) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static round(a) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static abs(a) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the magnitude of.\n   * @returns {number} The magnitude of the vector.\n   */\n  static magnitude(a) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the squared magnitude of.\n   * @returns {number} The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The distance between the vectors.\n   */\n  static distance(a, b) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The squared distance between the vectors.\n   */\n  static squaredDistance(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The dot product of the vectors.\n   */\n  static dot(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param {VectorN} a - The vector to normalize.\n   * @returns {VectorN} The normalized vector.\n   */\n  static normalize(a) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The angle between the vectors in radians.\n   */\n  static angle(a, b) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param {number} dimensions - The number of dimensions.\n   * @param {number} [scale=1] - The scale of the random components.\n   * @returns {VectorN} The random vector.\n   */\n  static random(dimensions, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static lerp(a, b, t) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static slerp(a, b, t) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param {VectorN[]} points - The control points.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static bezier(points, t) {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @returns {Vector3} The cross product of the vectors.\n   */\n  static cross(a, b) {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param {number} x - The x axis.\n   * @param {number} y - The y axis.\n   * @param {number} z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {Vector3} The new vector.\n   */\n  map(callbackfn) {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import { Vector3, Vector3Utils } from \"../vector/index\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v, distance) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v) {\n    return this.add(v)\n  }\n}\n","import { system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms) =>\n  // @ts-ignore\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun(fn) {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText, target) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn() {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id, name) {\n  const objective = world.scoreboard.getObjective(id)\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  constructor(directionCode) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  components = new Map()\n\n  constructor(entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class Container extends WrapperTemplate {\n  constructor(container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot, itemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import { Container } from \"./Container.class\"\n\nexport class EntityContainer extends Container {\n  constructor(entity, container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import { GameMode } from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  constructor(player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(slot, callback = async (_) => {}) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(callback = async () => {}) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}) {\n    if (useXpOrb && amount >= 0) {\n      while (amount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","module.exports = require('crypto').randomBytes\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nvar randomBytes = require('randombytes');\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID_LENGTH          = 16;\nvar UID                 = generateUID();\nvar PLACE_HOLDER_REGEXP = new RegExp('(\\\\\\\\)?\"@__(F|R|D|M|S|A|U|I|B|L)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nfunction generateUID() {\n    var bytes = randomBytes(UID_LENGTH);\n    var result = '';\n    for(var i=0; i<UID_LENGTH; ++i) {\n        result += bytes[i].toString(16);\n    }\n    return result;\n}\n\nfunction deleteFunctions(obj){\n    var functionKeys = [];\n    for (var key in obj) {\n        if (typeof obj[key] === \"function\") {\n            functionKeys.push(key);\n        }\n    }\n    for (var i = 0; i < functionKeys.length; i++) {\n        delete obj[functionKeys[i]];\n    }\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n    var maps      = [];\n    var sets      = [];\n    var arrays    = [];\n    var undefs    = [];\n    var infinities= [];\n    var bigInts = [];\n    var urls = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n\n        // For nested function\n        if(options.ignoreFunction){\n            deleteFunctions(value);\n        }\n\n        if (!value && value !== undefined && value !== BigInt(0)) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Map) {\n                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Set) {\n                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Array) {\n                var isSparse = origValue.filter(function(){return true}).length !== origValue.length;\n                if (isSparse) {\n                    return '@__A-' + UID + '-' + (arrays.push(origValue) - 1) + '__@';\n                }\n            }\n\n            if(origValue instanceof URL) {\n                return '@__L-' + UID + '-' + (urls.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'undefined') {\n            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'number' && !isNaN(origValue) && !isFinite(origValue)) {\n            return '@__I-' + UID + '-' + (infinities.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'bigint') {\n            return '@__B-' + UID + '-' + (bigInts.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    function serializeFunc(fn) {\n      var serializedFn = fn.toString();\n      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n          throw new TypeError('Serializing native function: ' + fn.name);\n      }\n\n      // pure functions, example: {key: function() {}}\n      if(IS_PURE_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      // arrow functions, example: arg1 => arg1+5\n      if(IS_ARROW_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      var argsStartsAt = serializedFn.indexOf('(');\n      var def = serializedFn.substr(0, argsStartsAt)\n        .trim()\n        .split(' ')\n        .filter(function(val) { return val.length > 0 });\n\n      var nonReservedSymbols = def.filter(function(val) {\n        return RESERVED_SYMBOLS.indexOf(val) === -1\n      });\n\n      // enhanced literal objects, example: {key() {}}\n      if(nonReservedSymbols.length > 0) {\n          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'\n            + (def.join('').indexOf('*') > -1 ? '*' : '')\n            + serializedFn.substr(argsStartsAt);\n      }\n\n      // arrow functions\n      return serializedFn;\n    }\n\n    // Check if the parameter is function\n    if (options.ignoreFunction && typeof obj === \"function\") {\n        obj = undefined;\n    }\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (obj === undefined) {\n        return String(obj);\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && arrays.length === 0 && undefs.length === 0 && infinities.length === 0 && bigInts.length === 0 && urls.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, backSlash, type, valueIndex) {\n        // The placeholder may not be preceded by a backslash. This is to prevent\n        // replacing things like `\"a\\\"@__R-<UID>-0__@\"` and thus outputting\n        // invalid JS.\n        if (backSlash) {\n            return match;\n        }\n\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return \"new RegExp(\" + serialize(regexps[valueIndex].source) + \", \\\"\" + regexps[valueIndex].flags + \"\\\")\";\n        }\n\n        if (type === 'M') {\n            return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n        }\n\n        if (type === 'S') {\n            return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n        }\n\n        if (type === 'A') {\n            return \"Array.prototype.slice.call(\" + serialize(Object.assign({ length: arrays[valueIndex].length }, arrays[valueIndex]), options) + \")\";\n        }\n\n        if (type === 'U') {\n            return 'undefined'\n        }\n\n        if (type === 'I') {\n            return infinities[valueIndex];\n        }\n\n        if (type === 'B') {\n            return \"BigInt(\\\"\" + bigInts[valueIndex] + \"\\\")\";\n        }\n\n        if (type === 'L') {\n            return \"new URL(\" + serialize(urls[valueIndex].toString(), options) + \")\";\n        }\n\n        var fn = functions[valueIndex];\n\n        return serializeFunc(fn);\n    });\n}\n","import md5 from \"md5\"\n// @ts-ignore\nimport { serialize } from \"serialize-javascript\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { deserialize, each, eachAsync } from \"../util/index\"\n\nexport const ALL_DATABASES = new Map()\n\nexport class Database {\n  static open(player, dbName) {\n    return new Database(player, dbName)\n  }\n  constructor(player, dbName) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName)\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key) {\n    return this.store.has(key)\n  }\n  async delete(key) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key) {\n    if (this.has(key)) return this.store.get(key).value\n  }\n  async set(key, value) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries() {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys() {\n    for (const key of this.store.keys()) yield key\n  }\n  *values() {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { Database } from \"@/lib/database/index\"\n\nexport const globalDB = new Database(\n  { id: \"global\" },\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map()\n\nexport class EventDB {\n  constructor(player) {\n    this.db = new Database(player, \"scoreboard-statistic-player\")\n    this.player = player\n  }\n\n  events = new Map()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId, events) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId, events) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import {\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\nexport class Dialog {\n  static async confirm({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => {},\n    onConfirm = async () => {},\n  }) {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  constructor({\n    dialog,\n    onClose = async () => {},\n    onSubmit = async (_) => {},\n    onSelectButton1 = async () => {},\n    onSelectButton2 = async () => {},\n    onSelect = async (_) => {},\n  }) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n  async show(target) {\n    let response\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n\n    return response\n  }\n}\n\nexport default Dialog\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName, listener) {\n    if (this._events[eventName]) {\n      const newListeners = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName, ...args) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName, ...args) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName, listener) {\n    return this.on(eventName, listener)\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import { range } from \"./util/math\"\n\nexport class NumberRange {\n  constructor(min, max, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport class OptionItemRange {\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(n) {\n    return this.range.includes(n)\n  }\n}\n","// @ts-ignore\nimport { serialize } from \"serialize-javascript\"\n\nimport { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport class OptionItemSelection {\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      values.map((value) => {\n        if (typeof value[0] === \"object\" || value[0] === undefined)\n          value[0] = serialize(value[0])\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(name) {\n    return this.values.has(name) || !this.values.size\n  }\n}\n","import { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { each, eachAsync } from \"../util/index\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionItemRange } from \"./OptionItemRange.class\"\nimport { OptionItemSelection } from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  constructor(player, name) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items = {}\n\n  addItem(opts) {\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = undefined\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name) {\n    return this.items[name]\n  }\n  hasItem(name) {\n    return !!this.items[name]\n  }\n  setItemVal(\n    name,\n    value,\n    callback = (_, __, ___) => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\n\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  constructor(name) {\n    this.name = name\n  }\n\n  players = new Map()\n  _items = new Set()\n\n  addItem(opts) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = undefined\n    return valueMap\n  }\n\n  getPlayer(player) {\n    return this.players.get(player)\n  }\n}\n","import { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { each } from \"../util/index\"\n\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map()\n\n  registerNamesapace(name) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name) {\n    return this.namespaces.get(name)\n  }\n  async showDialog(player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\n\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"scoreboard-statistic\")\n  .addItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  killed,\n  \"minecraft:killed_by\": killed_by,\n  killed_by,\n  \"minecraft:killed_for\": killed_for,\n  killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  mined,\n  \"minecraft:placed\": placed,\n  placed, // not in vanilla\n\n  // item\n  // TODO\n}\n","export default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener() {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})\n","export default ({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener() {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})\n","import killed from \"./statistic/types/mob/killed\"\n\nexport default ({ player, callback }) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\n// @ts-ignore\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","import {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  world,\n} from \"@minecraft/server\"\n\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport { asyncRun, getOrAddObjective } from \"@/util/game\"\nimport { eachAsync } from \"@/util/index\"\n\nimport { ALL_PLAYER_DATABASES, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nimport CRITERIA from \"./criteria/index\"\n\nexport class Handler {\n  constructor(player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n    this.playerDB = ALL_PLAYER_DATABASES.get(player)\n  }\n\n  async add({ objectiveId, criteria, displayName = objectiveId }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n  async remove({ objectiveId }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n  async start({ objectiveId, criteria = globalDB.get(objectiveId) }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          // @ts-ignore\n          !WrappedPlayer.wrap(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  objective.getScore(this.player) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              // TODO: scoreboard wrapper #addScore()\n              objective.setScore(\n                this.player,\n                objective.getScore(this.player) + result.value\n              )\n            }\n          }\n        }\n      },\n    })\n\n    await eachAsync(\n      tigger.events,\n      async ({ option: subscribeOption, listener }, eventName) => {\n        if (subscribeOption)\n          await asyncRun(() =>\n            world.afterEvents[eventName].subscribe(listener, subscribeOption)\n          )\n        else\n          await asyncRun(() => world.afterEvents[eventName].subscribe(listener)) // 为什么多传参数还报错啊啊啊啊啊啊啊！！！\n      }\n    )\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n  async stop({ objectiveId }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n    await eachAsync(events, async ({ listener }, eventName) => {\n      await asyncRun(() => world.afterEvents[eventName].unsubscribe(listener))\n    })\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria) {\n  return criteria\n    .split(\":\")\n    .map((e) => e.replace(\".\", \":\"))\n    .map((e, i) => {\n      if (i === 0) return e\n      return e.match(/^(.+)\\:/) ? e : `minecraft:${e}`\n    })\n}\n","import { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv, sender) {\n  const playerOption = option.getPlayer(sender)\n  const handler = new Handler(sender)\n\n  const objectiveId = argv[2]\n  switch (argv[1]) {\n    case \"add\": {\n      const [, , , criteria, displayName] = argv\n      if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n      if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n      if (!playerOption.getItemVal(\"enable_creative\"))\n        sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n      const result = await handler.add({ objectiveId, criteria, displayName })\n      if (result.code)\n        sender.sendMessage(\n          `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n        )\n      else {\n        switch (result.message) {\n          case \"DUPLICATE_OBJECTIVE\": {\n            throw errorHandler(`添加失败：记分板 ${objectiveId} 已存在`, sender)\n          }\n          case \"UNKNOWN_CRITERIA\": {\n            throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n          }\n        }\n      }\n\n      if (playerOption.getItemVal(\"auto_start\")) {\n        const startResult = await handler.start({ objectiveId, criteria })\n        if (startResult)\n          sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n      }\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      async function _remove() {\n        const result = await handler.remove({ objectiveId })\n        if (result) sender.sendMessage(`删除成功 ${objectiveId}`)\n        else\n          throw errorHandler(\n            `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n            sender\n          )\n      }\n\n      if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n        await Dialog.confirm({\n          body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n          target: sender,\n          onConfirm: _remove,\n        })\n      else await _remove()\n\n      break\n    }\n    case \"stop\": {\n      const result = await handler.stop({ objectiveId })\n\n      if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"start\": {\n      const result = await handler.start({ objectiveId })\n\n      if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => playerOption.showDialog())\n      break\n    }\n    default: {\n      throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n    }\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each, eachAsync } from \"@/util/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(async () => {\n    await eachAsync(option.players, async ([player]) => {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      await eachAsync(participated, async (objectiveId) => {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      })\n    })\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","deserialize","str","JSON","parse","isAsyncFunc","func","toStringTag","overworld","world","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Set","Commands","run","commandString","Dimension","Entity","runCommand","TypeError","asyncRun","customCommands","filter","regex","test","map","e","runner","runCommandAsync","register","prefix","command","callback","startsWith","Error","RegExp","argv","split","trim","add","beforeEvents","chatSend","subscribe","event","message","cancel","sender","catch","round","n","Math","floor","equals","a","b","epsilon","abs","max","range","from","to","step","output","push","VectorN","create","vector","vectorStr","Number","stringify","toPrimitive","toArray","hint","axes","join","dimensions","get","index","set","value","constructor","VectorNUtils","clone","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","random","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","y","z","x","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","Promise","resolve","reject","system","errorHandler","errText","sendMessage","toString","waitForFirstPlayerInitialSpawn","players","getAllPlayers","afterEvents","playerSpawn","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","Direction","isEast","isSouth","isUp","isWest","isNorth","isDown","direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","WrappedEntity","nameTag","_entity","location","dimension","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","components","Map","typeId","scoreboardIdentity","getComponents","component","Container","size","_container","emptySlotsCount","getItem","slot","setItem","itemStack","tryAddItem","addItem","container","EntityContainer","remain","spawnItem","WrappedPlayer","_player","experience","addExperience","level","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","some","setGameMode","includes","getMainHandItem","setMainHandItem","useItemFromInventory","_","useMainHandItem","amount","useXpOrb","spawnEntity","addLevels","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","obj","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","prototype","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","UID_LENGTH","UID","generateUID","PLACE_HOLDER_REGEXP","IS_NATIVE_CODE_REGEXP","IS_PURE_FUNCTION","IS_ARROW_FUNCTION","UNSAFE_CHARS_REGEXP","RESERVED_SYMBOLS","ESCAPED_CHARS","escapeUnsafeChars","unsafeChar","result","deleteFunctions","functionKeys","serialize","space","functions","regexps","dates","maps","sets","arrays","undefs","infinities","bigInts","urls","replacer","ignoreFunction","BigInt","origValue","type","Date","isSparse","URL","isNaN","isFinite","serializeFunc","serializedFn","argsStartsAt","def","nonReservedSymbols","isJSON","unsafe","backSlash","valueIndex","toISOString","source","flags","entries","assign","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","has","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","globalDB","ALL_PLAYER_DATABASES","EventDB","init","db","addParticipated","objectiveId","participated","getParticipated","setEvents","events","getEvents","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","NumberRange","array","OptionItemRange","select","selected","_includes","original","description","defaultValue","reload","_defaultValue","OptionItemSelection","hasVal","PlayerOption","opts","items","_syncToDB","getItemValMap","hasItem","_syncFromDB","setItemVal","syncFromDB","_getItem","__","___","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","OptionManager","registerNamesapace","namespaces","getNamesapace","ActionFormData","button","optionManager","option","changed","warn","entityDie","entityTypes","cause","damageSource","damagingEntity","EntityDamageCause","entityAttack","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","block","types","killed","killed_by","killed_for","mined","placed","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","creative","playerOption","getScore","subscribeOption","stop","handler","startResult","_remove","then"],"mappings":"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","x_google_ignoreList":[16,17,18,19,20,21]}