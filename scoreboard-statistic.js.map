{"version":3,"file":"scoreboard-statistic.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/commands/Commands.class.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/wrapper/container/WrappedContainer.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/script/scoreboard-statistic/db.ts","../src/lib/dialog/Dialog.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/NumberRange.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err: Error) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code: string, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport type Serializable =\n  | Set<Serializable>\n  | Map<Serializable, Serializable>\n  | { [key: string]: Serializable }\n  | Array<Serializable>\n  | string\n  | number\n  | boolean\n\nexport function serialize(obj: Serializable): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str: string): Serializable {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport function isAsyncFunc(func: Function): boolean {\n  return Object.prototype.toString.call(func) === \"[object AsyncFunction]\"\n}\n\nexport function arraySample<T>(arr: Array<T>): T {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function toCamelCase(str: string) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\ntype CommandConfig = {\n  regex: RegExp\n  runner: (commandString: string, target: Player) => Promise<void>\n}\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set<CommandConfig>()\n\nexport class Commands {\n  static run(commandString: string, target: Entity | Dimension = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(\n    commandString: string,\n    target: Entity | Dimension = overworld\n  ) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(\n    prefix: string,\n    command: string,\n    callback: (argv: string[], target: Player) => Promise<void>\n  ) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner: CommandConfig[\"runner\"] = async (commandString, target) => {\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","export function round(n: number) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p: number) {\n  return Math.random() <= p\n}\n\nexport function equals(a: number, b: number, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n: number): number {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n: number, k: number) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a: number, b: number, n: number) {\n  return (k: number) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n: number, p: number) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from: number, to: number, fn: (i: number) => number) {\n  let output = 0\n  for (let i = from; i <= to; i++) output += fn(i)\n  return output\n}\n\nexport function range(from: number, to: number, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","import type { Vector3 as IVector3 } from \"@minecraft/server\"\nimport { serialize } from \"../util\"\n\n/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN implements IVector3 {\n  axes: number[]\n\n  /**\n   * Create a vector.\n   * @param axes - The axes of the vector.\n   */\n  constructor(...axes: number[]) {\n    this.axes = axes\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n  get w() {\n    return this.get(3)\n  }\n  set w(value) {\n    this.set(3, value)\n  }\n\n  /**\n   * Create a vector.\n   * @param vector - The vector wrote in array or string.\n   * @returns The vector.\n   */\n  static create(vector: number[] | string): VectorN {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n\n    throw new Error(`Can't create vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string): VectorN {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns The string representation of the vector.\n   */\n  stringify(): string {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns The array representation of the vector.\n   */\n  toArray(): Array<number> {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param hint - The type hint.\n   * @returns The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint: string): string | VectorN {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns The iterator for the axes.\n   */\n  [Symbol.iterator](): Iterator<number> {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns The number of dimensions.\n   */\n  get dimensions(): number {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param index - The index of the component.\n   * @returns The component value.\n   */\n  get(index: number): number {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param index - The index of the component.\n   * @param value - The value to set.\n   */\n  set(index: number, value: number) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): VectorN {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { equals, round } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Array<number>) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param a - The vector to clone.\n   * @returns The cloned vector.\n   */\n  static clone(a: VectorN) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a: VectorN, b: VectorN) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static add(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static subtract(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static multiply(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static divide(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param a - The vector to scale.\n   * @param n - The scalar value.\n   * @returns The resulting vector.\n   */\n  static scale(a: VectorN, n: number) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param a - The vector to negate.\n   * @returns The resulting vector.\n   */\n  static negate(a: VectorN) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param a - The vector to invert.\n   * @returns The resulting vector.\n   */\n  static inverse(a: VectorN) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param a - The vector to modify.\n   * @param axis1 - The first axis to exchange.\n   * @param axis2 - The second axis to exchange\n   * @returns The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a: VectorN, axis1: number, axis2: number) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static max(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static min(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static floor(a: VectorN) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static ceil(a: VectorN) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static round(a: VectorN) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static abs(a: VectorN) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param a - The vector to calculate the magnitude of.\n   * @returns The magnitude of the vector.\n   */\n  static magnitude(a: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param a - The vector to calculate the squared magnitude of.\n   * @returns The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a: VectorN) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The distance between the vectors.\n   */\n  static distance(a: VectorN, b: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The squared distance between the vectors.\n   */\n  static squaredDistance(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The dot product of the vectors.\n   */\n  static dot(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param a - The vector to normalize.\n   * @returns The normalized vector.\n   */\n  static normalize(a: VectorN) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The angle between the vectors in radians.\n   */\n  static angle(a: VectorN, b: VectorN) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param dimensions - The number of dimensions.\n   * @param scale - The scale of the random components.\n   * @returns The random vector.\n   */\n  static random(dimensions: number, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static lerp(a: VectorN, b: VectorN, t: number) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static slerp(a: VectorN, b: VectorN, t: number) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param points - The control points.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static bezier(points: VectorN[], t: number): VectorN {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(\n    vector: number[] | string | { x: number; y: number; z: number }\n  ): Vector3 {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The cross product of the vectors.\n   */\n  static cross(a: Vector3, b: Vector3): Vector3 {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { serialize } from \"../util\"\nimport { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\nexport type Vector3Like =\n  | string\n  | number[]\n  | { x: number; y: number; z: number }\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param x - The x axis.\n   * @param y - The y axis.\n   * @param z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Vector3Like): Vector3 {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n\n    throw new Error(`Can't create 3d vector for ${serialize(vector)}`)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): Vector3 {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v: Vector3 | VectorN) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v: Vector3) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v: Vector3) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v: Vector3) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v: Vector3) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v: Vector3) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v: Vector3) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v: Vector3) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n: number) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import type { Vector3Like } from \"../vector/Vector3.class\"\nimport { Vector3, Vector3Utils } from \"../vector/index\"\nimport type { BlockLocation } from \"./BlockLocation.class\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as Location\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v: Location) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: Location | BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: Location | BlockLocation) {\n    return this.add(v)\n  }\n}\n","import { type Player, system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms: number): Promise<void> =>\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun<T>(fn: () => T): Promise<T> {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText: string, target: Player) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn(): Promise<Player> {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id: string, name?: string) {\n  const objective = world.scoreboard.getObjective(id)\n\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier: string) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier: string) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  code: number\n\n  constructor(directionCode: number) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n      default:\n        throw new Error(\"Unexpected error.\")\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction: Direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction: Direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import type { Entity, ScoreboardIdentity } from \"@minecraft/server\"\nimport { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport type { MinecraftEntityTypes } from \"@minecraft/vanilla-data\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  _entity: Entity\n  id: Entity[\"id\"]\n  typeId: MinecraftEntityTypes\n  scoreboardIdentity: Entity[\"scoreboardIdentity\"]\n  components = new Map()\n\n  constructor(entity: Entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId as MinecraftEntityTypes\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n\n    throw new Error(\"Unexpected error.\")\n  }\n}\n","import type { Container, ItemStack } from \"@minecraft/server\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedContainer extends WrapperTemplate {\n  _container: Container\n\n  constructor(container: Container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot: number) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot: number, itemStack: ItemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack: ItemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import type { Container, Entity, ItemStack } from \"@minecraft/server\"\nimport type { WrappedEntity } from \"../entity\"\nimport { WrappedContainer } from \"./WrappedContainer.class\"\n\nexport class EntityContainer extends WrappedContainer {\n  _entity: Entity\n\n  constructor(entity: Entity | WrappedEntity, container: Container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack: ItemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import {\n  type Entity,\n  GameMode,\n  type ItemStack,\n  type Player,\n} from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  name: Player[\"name\"]\n\n  constructor(player: Player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity: Entity | WrappedEntity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity as Player\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches: GameMode[] = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode: GameMode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode: GameMode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item: ItemStack) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(\n    slot: number,\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}): number {\n    let xpAmount = amount\n\n    if (useXpOrb && amount >= 0) {\n      while (xpAmount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { type Entity, EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO:\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  \"minecraft:killed_by\": killed_by,\n  \"minecraft:killed_for\": killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  \"minecraft:placed\": placed, // not in vanilla\n\n  // item\n  // TODO:\n}\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(_) {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener(_) {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import killed from \"./statistic/types/mob/killed\"\nimport type { Criteria } from \"./types\"\n\nexport default ({ player, callback }: Parameters<Criteria>[0]) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from \"md5\"\n\nimport type {\n  Player,\n  ScoreboardIdentity,\n  ScoreboardObjective,\n} from \"@minecraft/server\"\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport {\n  type Serializable,\n  deserialize,\n  each,\n  eachAsync,\n  serialize,\n} from \"../util/index\"\nimport type { WrappedPlayer } from \"../wrapper/entity\"\n\nexport const ALL_DATABASES = new Map<string, Database<any>>()\n\nexport class Database<T extends Serializable> {\n  id: string\n  objective: ScoreboardObjective\n\n  static open<U extends Serializable>(\n    player: Player | WrappedPlayer,\n    dbName: string\n  ) {\n    return new Database<U>(player, dbName)\n  }\n  constructor(player: Player | WrappedPlayer, dbName: string) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map<string, { value: T; participant: ScoreboardIdentity }>()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName) as Record<string, T>\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key: string) {\n    return this.store.has(key)\n  }\n  async delete(key: string) {\n    if (this.has(key)) {\n      //@ts-ignore\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key: string) {\n    return this.store.get(key)?.value\n  }\n  async set(key: string, value: T) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output: Record<string, T> = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries(): Generator<[string, T]> {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys(): Generator<string> {\n    for (const key of this.store.keys()) yield key\n  }\n  *values(): Generator<T> {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { Database } from \"@/lib/database/index\"\nimport type { Player } from \"@minecraft/server\"\nimport type { Criteria } from \"./criteria/types\"\n\nexport const globalDB = new Database<string>(\n  { id: \"global\" } as Player,\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map<Player, EventDB>()\n\nexport class EventDB {\n  player: Player\n  db: Database<Set<string>>\n\n  constructor(player: Player) {\n    this.player = player\n    this.db = Database.open(player, \"scoreboard-statistic-player\")\n  }\n\n  events = new Map<string, ReturnType<Criteria>[\"events\"]>()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player: Player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId: string) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId: string) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId: string) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId: string) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import {\n  type ActionFormData,\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  type ModalFormData,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport type { Player, RawMessage } from \"@minecraft/server\"\nimport { asyncRun } from \"../util/game\"\n\ninterface DialogHandlers<T> {\n  dialog: ModalFormData | MessageFormData | ActionFormData\n  onClose?: () => Promise<T>\n  onSubmit?: (\n    submitted?: NonNullable<ModalFormResponse[\"formValues\"]>\n  ) => Promise<T>\n  onSelectButton1?: () => Promise<T>\n  onSelectButton2?: () => Promise<T>\n  onSelect?: (\n    selected?: NonNullable<ActionFormResponse[\"selection\"]>\n  ) => Promise<T>\n}\n\nexport class Dialog<T> implements DialogHandlers<T> {\n  static async confirm<U>({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => ({}) as U,\n    onConfirm = async () => ({}) as U,\n  }: {\n    title?: string\n    body: RawMessage | string\n    target: Player\n    onCancel?: () => Promise<U>\n    onConfirm?: () => Promise<U>\n  }): Promise<U | undefined> {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog<U>({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  dialog\n  onClose\n  onSubmit\n  onSelectButton1\n  onSelectButton2\n  onSelect\n\n  constructor({\n    dialog,\n    onClose = async () => ({}) as T,\n    onSubmit = async () => ({}) as T,\n    onSelectButton1 = async () => ({}) as T,\n    onSelectButton2 = async () => ({}) as T,\n    onSelect = async () => ({}) as T,\n  }: DialogHandlers<T>) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n\n  async show(target: Player): Promise<T | undefined> {\n    let response: ModalFormResponse | MessageFormResponse | ActionFormResponse\n\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n  }\n}\n\nexport default Dialog\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  _events: Record<string, Function[]> = {}\n\n  on(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args: any[]) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args: any[]) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName: string, listener: Function) {\n    if (this._events[eventName]) {\n      const newListeners: Function[] = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName: string, ...args: any[]) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName: string, ...args: any[]) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName: string, listener: Function) {\n    return this.on(eventName, listener)\n  }\n  off(eventName: string, listener: Function) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import type { NumberRange as INumberRange } from \"@minecraft/common\"\nimport { range } from \"./util/math\"\n\nexport class NumberRange implements INumberRange {\n  min: number\n  max: number\n  step: number\n\n  constructor(min: number, max: number, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n: number) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemRange {\n  name: string\n  description: string\n  range?: [number, number, number?]\n  defaultValue?: number\n  reload?: boolean\n  events?: {\n    inited?: (selected: number, player: Player) => void\n    changed?: (selected: number, original: number, player: Player) => void\n    selected?: (selected: number, original: number, player: Player) => void\n  }\n}\n\nexport class OptionItemRange {\n  name: string\n  description: string\n  range: NumberRange\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: number | undefined\n  selected: number | undefined\n\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: {\n    _player: Player\n  } & IOptionItemRange) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: number) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(value: number) {\n    return this.range.includes(value)\n  }\n}\n","import { each } from \"../util/index\"\n\nimport type { Player } from \"@minecraft/server\"\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport interface IOptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Array<[T, string?]>\n  defaultValue?: T\n  reload?: boolean\n  events?: {\n    inited?: (selected: T, player: Player) => void\n    changed?: (selected: T, original: T, player: Player) => void\n    selected?: (selected: T, original: T, player: Player) => void\n  }\n}\n\nexport class OptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Map<T, string>\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: T | undefined\n  selected: T | undefined\n\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: { _player: Player } & IOptionItemSelection<T>) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      //@ts-ignore\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: T) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(value: T) {\n    return this.values.has(value) || !this.values.size\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ModalFormData } from \"@minecraft/server-ui\"\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\nimport { each, eachAsync } from \"../util/index\"\nimport { type IOptionItemRange, OptionItemRange } from \"./OptionItemRange.class\"\nimport {\n  type IOptionItemSelection,\n  OptionItemSelection,\n} from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  name: string\n  db: Database<string | number | boolean>\n  player: Player\n\n  constructor(player: Player, name: string) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items: Record<string, OptionItemSelection<any> | OptionItemRange> = {}\n  reload = false\n\n  addItem(\n    opts: { _player: Player } & (IOptionItemRange | IOptionItemSelection<any>)\n  ) {\n    //@ts-ignore\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    //@ts-ignore\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name: string) {\n    return this.items[name]\n  }\n  hasItem(name: string) {\n    return !!this.items[name]\n  }\n  setItemVal<T>(\n    name: string,\n    value: T,\n    callback: (\n      selected: T,\n      original: T,\n      map: Record<string, any>\n    ) => void = () => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      //@ts-ignore\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name: string) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    // TODO: use map\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog?: Dialog<any>) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog?: Dialog<any>) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap: Array<{\n      name: string\n      valuesMap:\n        | Map<boolean, boolean>\n        | Map<number, string | number | boolean>\n        | Map<number, number>\n    }> = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog<void>({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\nimport type { IOptionItemRange } from \"./OptionItemRange.class\"\nimport type { IOptionItemSelection } from \"./OptionItemSelection.class\"\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n\n  players = new Map<Player, PlayerOption>()\n  _items = new Set()\n\n  addItem(opts: IOptionItemSelection<any> | IOptionItemRange) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player: Player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = () => {\n      throw new Error(\"Can't apply player after initialization.\")\n    }\n    return valueMap\n  }\n  getPlayer(player: Player) {\n    const playerOption = this.players.get(player)\n\n    if (!playerOption) throw new Error(\"Can't get player  options.\")\n\n    return playerOption\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ActionFormData } from \"@minecraft/server-ui\"\nimport { Dialog } from \"../dialog/index\"\nimport { each } from \"../util/index\"\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map<string, OptionNamespace>()\n\n  registerNamesapace(name: string) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name: string) {\n    const namespace = this.namespaces.get(name)\n\n    if (!namespace) throw new Error(\"Can't get namespace.\")\n\n    return namespace\n  }\n  async showDialog(player: Player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap: string[] = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO: name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        //@ts-ignore\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"scoreboard-statistic\")\n  .addItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import type { PlayerOption } from \"@/lib/option-manager/PlayerOption.class\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  addMinecraftNamespaceIfNeed,\n  asyncRun,\n  getOrAddObjective,\n} from \"@/util/game\"\nimport { eachAsync } from \"@/util/index\"\nimport {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  type Player,\n  world,\n} from \"@minecraft/server\"\nimport CRITERIA from \"./criteria/index\"\nimport { ALL_PLAYER_DATABASES, type EventDB, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nexport class Handler {\n  player: Player\n  playerOption: PlayerOption\n  playerDB: EventDB\n\n  constructor(player: Player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n\n    const playerDB = ALL_PLAYER_DATABASES.get(player)\n\n    if (!playerDB) throw new Error(\"Can't get player database.\")\n\n    this.playerDB = playerDB\n  }\n\n  async add({\n    objectiveId,\n    criteria,\n    displayName = objectiveId,\n  }: {\n    objectiveId: string\n    criteria: string\n    displayName?: string\n  }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n\n  async remove({ objectiveId }: { objectiveId: string }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n\n  async start({\n    objectiveId,\n    criteria = globalDB.get(objectiveId) as string,\n  }: {\n    objectiveId: string\n    criteria?: string\n  }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n\n    if (!setupTigger) throw new Error(\"Unknown criteria.\")\n\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          !new WrappedPlayer(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  (objective.getScore(this.player) ?? 0) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              objective.addScore(this.player, result.value)\n            }\n          }\n        }\n      },\n    })\n\n    await eachAsync(tigger.events, async ({ options, listener }, eventName) => {\n      if (options)\n        await asyncRun(() =>\n          world.afterEvents[eventName].subscribe(listener, options)\n        )\n      else\n        await asyncRun(() => world.afterEvents[eventName].subscribe(listener)) // 为什么多传参数还报错啊啊啊啊啊啊啊！！！\n    })\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n\n  async stop({ objectiveId }: { objectiveId: string }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n    await eachAsync(events, async ({ listener }, eventName) => {\n      await asyncRun(() => world.afterEvents[eventName].unsubscribe(listener))\n    })\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria: string) {\n  return criteria\n    .split(\":\")\n    .map((e) => addMinecraftNamespaceIfNeed(e.replace(\".\", \":\")))\n}\n","import { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport type { Player } from \"@minecraft/server\"\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv: string[], sender: Player) {\n  const playerOption = option.getPlayer(sender)\n  const handler = new Handler(sender)\n\n  const objectiveId = argv[2]\n  switch (argv[1]) {\n    case \"add\": {\n      const [, , , criteria, displayName] = argv\n      if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n      if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n      if (!playerOption.getItemVal(\"enable_creative\"))\n        sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n      const result = await handler.add({ objectiveId, criteria, displayName })\n      if (result.code)\n        sender.sendMessage(\n          `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n        )\n      else {\n        switch (result.message) {\n          case \"DUPLICATE_OBJECTIVE\": {\n            throw errorHandler(`添加失败：记分板 ${objectiveId} 已存在`, sender)\n          }\n          case \"UNKNOWN_CRITERIA\": {\n            throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n          }\n        }\n      }\n\n      if (playerOption.getItemVal(\"auto_start\")) {\n        const startResult = await handler.start({ objectiveId, criteria })\n        if (startResult)\n          sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n      }\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      async function _remove() {\n        const result = await handler.remove({ objectiveId })\n        if (result) sender.sendMessage(`删除成功 ${objectiveId}`)\n        else\n          throw errorHandler(\n            `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n            sender\n          )\n      }\n\n      if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n        await Dialog.confirm({\n          body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n          target: sender,\n          onConfirm: _remove,\n        })\n      else await _remove()\n\n      break\n    }\n    case \"stop\": {\n      const result = await handler.stop({ objectiveId })\n\n      if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"start\": {\n      const result = await handler.start({ objectiveId })\n\n      if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => playerOption.showDialog())\n      break\n    }\n    default: {\n      throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n    }\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each, eachAsync } from \"@/util/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(async () => {\n    await eachAsync(option.players, async ([player]) => {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      await eachAsync(participated, async (objectiveId) => {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      })\n    })\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","prototype","toString","overworld","world","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","run","commandString","Dimension","Entity","runCommand","TypeError","asyncRun","customCommands","filter","regex","test","e","runner","runCommandAsync","register","prefix","command","callback","startsWith","Error","RegExp","argv","split","trim","add","beforeEvents","chatSend","subscribe","event","message","cancel","sender","catch","round","n","Math","floor","equals","a","b","epsilon","abs","max","range","to","step","output","push","VectorN","x","get","set","y","z","w","create","vector","vectorStr","Number","toPrimitive","toArray","hint","axes","dimensions","index","constructor","VectorNUtils","clone","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","random","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","Promise","resolve","reject","system","errorHandler","errText","sendMessage","waitForFirstPlayerInitialSpawn","players","getAllPlayers","afterEvents","playerSpawn","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","addMinecraftNamespaceIfNeed","Direction","isEast","isSouth","isUp","isWest","isNorth","isDown","direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","WrappedEntity","nameTag","_entity","location","dimension","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","components","typeId","scoreboardIdentity","getComponents","component","WrappedContainer","size","_container","emptySlotsCount","getItem","slot","setItem","itemStack","tryAddItem","addItem","container","EntityContainer","remain","spawnItem","WrappedPlayer","_player","experience","addExperience","level","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","some","setGameMode","includes","getMainHandItem","setMainHandItem","useItemFromInventory","useMainHandItem","amount","useXpOrb","xpAmount","spawnEntity","addLevels","events","entityDie","options","entityTypes","listener","cause","damageSource","source","damagingEntity","EntityDamageCause","entityAttack","type","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","block","types","killed","killed_by","killed_for","mined","placed","_","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","encoding","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","has","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","globalDB","ALL_PLAYER_DATABASES","EventDB","init","db","addParticipated","objectiveId","participated","getParticipated","setEvents","getEvents","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","EventEmitter","on","eventName","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","NumberRange","array","OptionItemRange","select","selected","_includes","original","description","defaultValue","reload","OptionItemSelection","hasVal","PlayerOption","opts","items","_syncToDB","getItemValMap","hasItem","_syncFromDB","setItemVal","syncFromDB","_getItem","result","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","playerOption","OptionManager","registerNamesapace","namespaces","getNamesapace","namespace","ActionFormData","button","optionManager","option","changed","warn","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","creative","getScore","addScore","stop","handler","startResult","_remove","then"],"mappings":"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","x_google_ignoreList":[27,28,29,30]}