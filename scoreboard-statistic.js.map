{"version":3,"file":"scoreboard-statistic.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/commands/Commands.class.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/wrapper/container/Container.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/script/scoreboard-statistic/db.ts","../src/lib/dialog/Dialog.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/NumberRange.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport function serialize(obj): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport const AsyncFunction = (async () => {}).constructor\nexport function isAsyncFunc(func) {\n  return func[Symbol.toStringTag] === \"AsyncFunction\"\n}\n\nexport function arraySample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function arrayAt(arr, index) {\n  return index >= 0 ? arr[index] : arr[arr.length + index]\n}\n\nexport function toCamelCase(str) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  world,\n} from \"@minecraft/server\"\n\n// import { Parser } from \"mcbe-command-parser\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set()\n\nexport class Commands {\n  static run(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(prefix, command, /* grammar, */ callback) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner = async (commandString, target) => {\n      // callback(new Parser(commandString, grammar), target)\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","export function round(n) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p) {\n  return Math.random() <= p\n}\n\nexport function equals(a, b, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n) {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a, b, n) {\n  return (k) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n, p) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from, to, fn) {\n  let output = 0\n  for (let k = from; k <= to; k++) output += fn(k)\n  return output\n}\n\nexport function range(from, to, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN {\n  /**\n   * Create a vector.\n   * @param {...number} axes - The axes of the vector.\n   */\n  constructor(...axes) {\n    this.axes = axes\n  }\n\n  /**\n   * Create a vector.\n   * @param {Array<number>|string} vector - The vector wrote in array or string.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param {string} vectorStr - The string to parse.\n   * @returns {VectorN} The vector.\n   */\n  static parse(vectorStr) {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns {string} The string representation of the vector.\n   */\n  stringify() {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns {Array<number>} The array representation of the vector.\n   */\n  toArray() {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param {string} hint - The type hint.\n   * @returns {string|VectorN} The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns {Iterator<number>} The iterator for the axes.\n   */\n  [Symbol.iterator]() {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns {number} The number of dimensions.\n   */\n  get dimensions() {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @returns {number} The component value.\n   */\n  get(index) {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @param {number} value - The value to set.\n   */\n  set(index, value) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {VectorN} The new vector.\n   */\n  map(callbackfn) {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { binomial, equals, round, sum } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param {Array<number>} vector - The vector write in array.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param {VectorN} a - The vector to clone.\n   * @returns {VectorN} The cloned vector.\n   */\n  static clone(a) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a, b) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static add(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static subtract(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static multiply(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static divide(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param {VectorN} a - The vector to scale.\n   * @param {number} n - The scalar value.\n   * @returns {VectorN} The resulting vector.\n   */\n  static scale(a, n) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param {VectorN} a - The vector to negate.\n   * @returns {VectorN} The resulting vector.\n   */\n  static negate(a) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param {VectorN} a - The vector to invert.\n   * @returns {VectorN} The resulting vector.\n   */\n  static inverse(a) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @param {number} axis1 - The first axis to exchange.\n   * @param {number} axis2 - The second axis to exchange\n   * @returns {VectorN} The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a, axis1, axis2) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static max(...vectors) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static min(...vectors) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static floor(a) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static ceil(a) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static round(a) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static abs(a) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the magnitude of.\n   * @returns {number} The magnitude of the vector.\n   */\n  static magnitude(a) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the squared magnitude of.\n   * @returns {number} The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The distance between the vectors.\n   */\n  static distance(a, b) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The squared distance between the vectors.\n   */\n  static squaredDistance(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The dot product of the vectors.\n   */\n  static dot(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param {VectorN} a - The vector to normalize.\n   * @returns {VectorN} The normalized vector.\n   */\n  static normalize(a) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The angle between the vectors in radians.\n   */\n  static angle(a, b) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param {number} dimensions - The number of dimensions.\n   * @param {number} [scale=1] - The scale of the random components.\n   * @returns {VectorN} The random vector.\n   */\n  static random(dimensions, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static lerp(a, b, t) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static slerp(a, b, t) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param {VectorN[]} points - The control points.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static bezier(points, t) {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @returns {Vector3} The cross product of the vectors.\n   */\n  static cross(a, b) {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param {number} x - The x axis.\n   * @param {number} y - The y axis.\n   * @param {number} z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {Vector3} The new vector.\n   */\n  map(callbackfn) {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import { Vector3, Vector3Utils } from \"../vector/index\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v, distance) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v) {\n    return this.add(v)\n  }\n}\n","import { system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms) =>\n  // @ts-ignore\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun(fn) {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText, target) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn() {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id, name) {\n  const objective = world.scoreboard.getObjective(id)\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  constructor(directionCode) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  components = new Map()\n\n  constructor(entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class Container extends WrapperTemplate {\n  constructor(container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot, itemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import { Container } from \"./Container.class\"\n\nexport class EntityContainer extends Container {\n  constructor(entity, container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import { GameMode } from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  constructor(player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(slot, callback = async (_) => {}) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(callback = async () => {}) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}) {\n    if (useXpOrb && amount >= 0) {\n      while (amount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { deserialize, each, eachAsync, serialize } from \"../util/index\"\n\nexport const ALL_DATABASES = new Map()\n\nexport class Database {\n  static open(player, dbName) {\n    return new Database(player, dbName)\n  }\n  constructor(player, dbName) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName)\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key) {\n    return this.store.has(key)\n  }\n  async delete(key) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key) {\n    if (this.has(key)) return this.store.get(key).value\n  }\n  async set(key, value) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries() {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys() {\n    for (const key of this.store.keys()) yield key\n  }\n  *values() {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { Database } from \"@/lib/database/index\"\n\nexport const globalDB = new Database(\n  { id: \"global\" },\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map()\n\nexport class EventDB {\n  constructor(player) {\n    this.db = new Database(player, \"scoreboard-statistic-player\")\n    this.player = player\n  }\n\n  events = new Map()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId, events) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId, events) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import {\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\nexport class Dialog {\n  static async confirm({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => {},\n    onConfirm = async () => {},\n  }) {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  constructor({\n    dialog,\n    onClose = async () => {},\n    onSubmit = async (_) => {},\n    onSelectButton1 = async () => {},\n    onSelectButton2 = async () => {},\n    onSelect = async (_) => {},\n  }) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n  async show(target) {\n    let response\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n\n    return response\n  }\n}\n\nexport default Dialog\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName, listener) {\n    if (this._events[eventName]) {\n      const newListeners = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName, ...args) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName, ...args) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName, listener) {\n    return this.on(eventName, listener)\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import { range } from \"./util/math\"\n\nexport class NumberRange {\n  constructor(min, max, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport class OptionItemRange {\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(n) {\n    return this.range.includes(n)\n  }\n}\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport class OptionItemSelection {\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(name) {\n    return this.values.has(name) || !this.values.size\n  }\n}\n","import { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { each, eachAsync } from \"../util/index\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionItemRange } from \"./OptionItemRange.class\"\nimport { OptionItemSelection } from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  constructor(player, name) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items = {}\n\n  addItem(opts) {\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = undefined\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name) {\n    return this.items[name]\n  }\n  hasItem(name) {\n    return !!this.items[name]\n  }\n  setItemVal(\n    name,\n    value,\n    callback = (_, __, ___) => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\n\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  constructor(name) {\n    this.name = name\n  }\n\n  players = new Map()\n  _items = new Set()\n\n  addItem(opts) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = undefined\n    return valueMap\n  }\n\n  getPlayer(player) {\n    return this.players.get(player)\n  }\n}\n","import { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { each } from \"../util/index\"\n\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map()\n\n  registerNamesapace(name) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name) {\n    return this.namespaces.get(name)\n  }\n  async showDialog(player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\n\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"scoreboard-statistic\")\n  .addItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","export default ({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  killed,\n  \"minecraft:killed_by\": killed_by,\n  killed_by,\n  \"minecraft:killed_for\": killed_for,\n  killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  mined,\n  \"minecraft:placed\": placed,\n  placed, // not in vanilla\n\n  // item\n  // TODO\n}\n","export default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      option: {\n        entities: [player],\n      },\n      listener() {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})\n","export default ({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      option: {\n        entities: [player],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener() {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})\n","import killed from \"./statistic/types/mob/killed\"\n\nexport default ({ player, callback }) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\n\nexport default ({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (cause === EntityDamageCause.entityAttack && source.id === player.id)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\n// @ts-ignore\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","import {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  world,\n} from \"@minecraft/server\"\n\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport { asyncRun, getOrAddObjective } from \"@/util/game\"\nimport { eachAsync } from \"@/util/index\"\n\nimport { ALL_PLAYER_DATABASES, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nimport CRITERIA from \"./criteria/index\"\n\nexport class Handler {\n  constructor(player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n    this.playerDB = ALL_PLAYER_DATABASES.get(player)\n  }\n\n  async add({ objectiveId, criteria, displayName = objectiveId }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n  async remove({ objectiveId }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n  async start({ objectiveId, criteria = globalDB.get(objectiveId) }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          // @ts-ignore\n          !WrappedPlayer.wrap(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  objective.getScore(this.player) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              // TODO: scoreboard wrapper #addScore()\n              objective.setScore(\n                this.player,\n                objective.getScore(this.player) + result.value\n              )\n            }\n          }\n        }\n      },\n    })\n\n    await eachAsync(\n      tigger.events,\n      async ({ option: subscribeOption, listener }, eventName) => {\n        if (subscribeOption)\n          await asyncRun(() =>\n            world.afterEvents[eventName].subscribe(listener, subscribeOption)\n          )\n        else\n          await asyncRun(() => world.afterEvents[eventName].subscribe(listener)) // 为什么多传参数还报错啊啊啊啊啊啊啊！！！\n      }\n    )\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n  async stop({ objectiveId }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n    await eachAsync(events, async ({ listener }, eventName) => {\n      await asyncRun(() => world.afterEvents[eventName].unsubscribe(listener))\n    })\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria) {\n  return criteria\n    .split(\":\")\n    .map((e) => e.replace(\".\", \":\"))\n    .map((e, i) => {\n      if (i === 0) return e\n      return e.match(/^(.+)\\:/) ? e : `minecraft:${e}`\n    })\n}\n","import { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv, sender) {\n  const playerOption = option.getPlayer(sender)\n  const handler = new Handler(sender)\n\n  const objectiveId = argv[2]\n  switch (argv[1]) {\n    case \"add\": {\n      const [, , , criteria, displayName] = argv\n      if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n      if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n      if (!playerOption.getItemVal(\"enable_creative\"))\n        sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n      const result = await handler.add({ objectiveId, criteria, displayName })\n      if (result.code)\n        sender.sendMessage(\n          `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n        )\n      else {\n        switch (result.message) {\n          case \"DUPLICATE_OBJECTIVE\": {\n            throw errorHandler(`添加失败：记分板 ${objectiveId} 已存在`, sender)\n          }\n          case \"UNKNOWN_CRITERIA\": {\n            throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n          }\n        }\n      }\n\n      if (playerOption.getItemVal(\"auto_start\")) {\n        const startResult = await handler.start({ objectiveId, criteria })\n        if (startResult)\n          sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n      }\n\n      break\n    }\n    case \"remove\":\n    case \"rm\":\n    case \"-r\": {\n      async function _remove() {\n        const result = await handler.remove({ objectiveId })\n        if (result) sender.sendMessage(`删除成功 ${objectiveId}`)\n        else\n          throw errorHandler(\n            `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n            sender\n          )\n      }\n\n      if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n        await Dialog.confirm({\n          body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n          target: sender,\n          onConfirm: _remove,\n        })\n      else await _remove()\n\n      break\n    }\n    case \"stop\": {\n      const result = await handler.stop({ objectiveId })\n\n      if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"start\": {\n      const result = await handler.start({ objectiveId })\n\n      if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n      else\n        throw errorHandler(\n          `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n          sender\n        )\n\n      break\n    }\n    case \"option\":\n    case \"opt\":\n    case \"-o\": {\n      await asyncRun(() => playerOption.showDialog())\n      break\n    }\n    default: {\n      throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n    }\n  }\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\nimport { each, eachAsync } from \"@/util/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(async () => {\n    await eachAsync(option.players, async ([player]) => {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      await eachAsync(participated, async (objectiveId) => {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      })\n    })\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","toStringTag","overworld","world","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","run","commandString","Dimension","Entity","runCommand","TypeError","asyncRun","customCommands","filter","regex","test","e","runner","runCommandAsync","register","prefix","command","callback","startsWith","Error","RegExp","argv","split","trim","add","beforeEvents","chatSend","subscribe","event","message","cancel","sender","catch","round","n","Math","floor","equals","a","b","epsilon","abs","max","range","to","step","output","push","VectorN","create","vector","vectorStr","Number","toPrimitive","toArray","hint","axes","dimensions","get","index","set","constructor","VectorNUtils","clone","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","random","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","y","z","x","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","Promise","resolve","reject","system","errorHandler","errText","sendMessage","toString","waitForFirstPlayerInitialSpawn","players","getAllPlayers","afterEvents","playerSpawn","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","Direction","isEast","isSouth","isUp","isWest","isNorth","isDown","direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","WrappedEntity","nameTag","_entity","location","dimension","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","components","typeId","scoreboardIdentity","getComponents","component","Container","size","_container","emptySlotsCount","getItem","slot","setItem","itemStack","tryAddItem","addItem","container","EntityContainer","remain","spawnItem","WrappedPlayer","_player","experience","addExperience","level","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","some","setGameMode","includes","getMainHandItem","setMainHandItem","useItemFromInventory","_","useMainHandItem","amount","useXpOrb","spawnEntity","addLevels","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","prototype","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","has","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","globalDB","ALL_PLAYER_DATABASES","EventDB","init","db","addParticipated","objectiveId","participated","getParticipated","setEvents","events","getEvents","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","NumberRange","array","OptionItemRange","select","selected","_includes","original","description","defaultValue","reload","_defaultValue","OptionItemSelection","hasVal","PlayerOption","opts","items","_syncToDB","getItemValMap","hasItem","_syncFromDB","setItemVal","syncFromDB","_getItem","__","___","result","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","OptionManager","registerNamesapace","namespaces","getNamesapace","ActionFormData","button","optionManager","option","changed","warn","entityDie","entityTypes","cause","damageSource","source","damagingEntity","EntityDamageCause","entityAttack","type","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","block","types","killed","killed_by","killed_for","mined","placed","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","creative","playerOption","getScore","subscribeOption","stop","handler","startResult","_remove","then"],"mappings":"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","x_google_ignoreList":[16,17,18,19]}