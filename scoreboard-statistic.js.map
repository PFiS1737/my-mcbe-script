{"version":3,"file":"scoreboard-statistic.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/util/index.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/wrapper/container/WrappedContainer.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_by.ts","../src/script/scoreboard-statistic/criteria/statistic/types/mob/killed_for.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/mined.ts","../src/script/scoreboard-statistic/criteria/statistic/types/block/placed.ts","../src/script/scoreboard-statistic/criteria/statistic/types/index.ts","../src/script/scoreboard-statistic/criteria/deathCount.ts","../src/script/scoreboard-statistic/criteria/health.ts","../src/script/scoreboard-statistic/criteria/playerKillCount.ts","../src/script/scoreboard-statistic/criteria/totalKillCount.ts","../src/script/scoreboard-statistic/criteria/index.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/script/scoreboard-statistic/db.ts","../src/lib/dialog/Dialog.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/NumberRange.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/scoreboard-statistic/option.ts","../src/script/scoreboard-statistic/Handler.class.ts","../src/script/scoreboard-statistic/command.ts","../src/script/scoreboard-statistic/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err: Error) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","import {\n  type Dimension,\n  type Entity,\n  MinecraftDimensionTypes,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\n\nexport type CommandTarget = Player | Entity | Dimension\ntype CommandConfig = {\n  regex: RegExp\n  runner: (commandString: string, target: CommandTarget) => Promise<void>\n}\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set<CommandConfig>()\n\nexport class Commands {\n  static run(commandString: string, target: CommandTarget = overworld) {\n    return target.runCommand(commandString)\n  }\n  static async asyncRun(\n    commandString: string,\n    target: CommandTarget = overworld\n  ) {\n    const customCommands = [...CUSTOM_COMMAND_SET]\n      .filter(({ regex }) => regex.test(commandString))\n      .map((e) => e.runner)\n    if (customCommands.length) {\n      for (const runner of customCommands) {\n        await runner(commandString, target)\n      }\n    } else return await target.runCommandAsync(commandString)\n  }\n  static register(\n    prefix: string,\n    command: string,\n    callback: (argv: string[], target: CommandTarget) => Promise<void>\n  ) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner: CommandConfig[\"runner\"] = async (commandString, target) => {\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","export function safeEval(code: string, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport type Serializable =\n  | Set<Serializable>\n  | Map<Serializable, Serializable>\n  | { [key: string]: Serializable }\n  | Array<Serializable>\n  | string\n  | number\n  | boolean\n\nexport function serialize(obj: Serializable): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str: string): Serializable {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport function isAsyncFunc(func: Function): boolean {\n  return Object.prototype.toString.call(func) === \"[object AsyncFunction]\"\n}\n\nexport function arraySample<T>(arr: Array<T>): T {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function toCamelCase(str: string) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","export function round(n: number) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p: number) {\n  return Math.random() <= p\n}\n\nexport function equals(a: number, b: number, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n: number): number {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n: number, k: number) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a: number, b: number, n: number) {\n  return (k: number) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n: number, p: number) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from: number, to: number, fn: (i: number) => number) {\n  let output = 0\n  for (let i = from; i <= to; i++) output += fn(i)\n  return output\n}\n\nexport function range(from: number, to: number, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","import type { Vector3 as IVector3 } from \"@minecraft/server\"\n\nimport { serialize } from \"../util\"\n\n/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN implements IVector3 {\n  axes: number[]\n\n  /**\n   * Create a vector.\n   * @param axes - The axes of the vector.\n   */\n  constructor(...axes: number[]) {\n    this.axes = axes\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n  get w() {\n    return this.get(3)\n  }\n  set w(value) {\n    this.set(3, value)\n  }\n\n  /**\n   * Create a vector.\n   * @param vector - The vector wrote in array or string.\n   * @returns The vector.\n   */\n  static create(vector: number[] | string): VectorN {\n    if (Array.isArray(vector)) return new VectorN(...vector)\n    if (typeof vector === \"string\") return VectorN.parse(vector)\n\n    throw new Error(`Can't create vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string): VectorN {\n    return VectorN.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns The string representation of the vector.\n   */\n  stringify(): string {\n    return this.axes.join(\" \")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns The array representation of the vector.\n   */\n  toArray(): Array<number> {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param hint - The type hint.\n   * @returns The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint: string): string | VectorN {\n    if (hint === \"string\") return this.stringify()\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns The iterator for the axes.\n   */\n  [Symbol.iterator](): Iterator<number> {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns The number of dimensions.\n   */\n  get dimensions(): number {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param index - The index of the component.\n   * @returns The component value.\n   */\n  get(index: number): number {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param index - The index of the component.\n   * @param value - The value to set.\n   */\n  set(index: number, value: number) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): VectorN {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { equals, round } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Array<number>) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param a - The vector to clone.\n   * @returns The cloned vector.\n   */\n  static clone(a: VectorN) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a: VectorN, b: VectorN) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static add(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static subtract(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static multiply(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static divide(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param a - The vector to scale.\n   * @param n - The scalar value.\n   * @returns The resulting vector.\n   */\n  static scale(a: VectorN, n: number) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param a - The vector to negate.\n   * @returns The resulting vector.\n   */\n  static negate(a: VectorN) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param a - The vector to invert.\n   * @returns The resulting vector.\n   */\n  static inverse(a: VectorN) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param a - The vector to modify.\n   * @param axis1 - The first axis to exchange.\n   * @param axis2 - The second axis to exchange\n   * @returns The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a: VectorN, axis1: number, axis2: number) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static max(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static min(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static floor(a: VectorN) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static ceil(a: VectorN) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static round(a: VectorN) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static abs(a: VectorN) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param a - The vector to calculate the magnitude of.\n   * @returns The magnitude of the vector.\n   */\n  static magnitude(a: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param a - The vector to calculate the squared magnitude of.\n   * @returns The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a: VectorN) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The distance between the vectors.\n   */\n  static distance(a: VectorN, b: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The squared distance between the vectors.\n   */\n  static squaredDistance(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The dot product of the vectors.\n   */\n  static dot(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param a - The vector to normalize.\n   * @returns The normalized vector.\n   */\n  static normalize(a: VectorN) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The angle between the vectors in radians.\n   */\n  static angle(a: VectorN, b: VectorN) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param dimensions - The number of dimensions.\n   * @param scale - The scale of the random components.\n   * @returns The random vector.\n   */\n  static random(dimensions: number, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static lerp(a: VectorN, b: VectorN, t: number) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static slerp(a: VectorN, b: VectorN, t: number) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param points - The control points.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static bezier(points: VectorN[], t: number): VectorN {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(\n    vector: number[] | string | { x: number; y: number; z: number }\n  ): Vector3 {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The cross product of the vectors.\n   */\n  static cross(a: Vector3, b: Vector3): Vector3 {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { serialize } from \"../util\"\nimport { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\nexport type Vector3Like =\n  | string\n  | number[]\n  | { x: number; y: number; z: number }\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param x - The x axis.\n   * @param y - The y axis.\n   * @param z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Vector3Like) {\n    if (Array.isArray(vector)) return new Vector3(...vector)\n    if (typeof vector === \"string\") return Vector3.parse(vector)\n    if (typeof vector === \"object\")\n      return new Vector3(vector.x, vector.y, vector.z)\n\n    throw new Error(`Can't create 3d vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string) {\n    return VectorN.parse(vectorStr) as Vector3\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): Vector3 {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v: Vector3 | VectorN) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v: Vector3) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v: Vector3) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v: Vector3) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v: Vector3) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v: Vector3) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v: Vector3) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v: Vector3) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n: number) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import type { Vector3Like } from \"../vector/Vector3.class\"\nimport { Vector3, Vector3Utils } from \"../vector/index\"\nimport type { BlockLocation } from \"./BlockLocation.class\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as Location\n  }\n  static parse(vectorStr: string) {\n    return Vector3.parse(vectorStr) as Location\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v: Location) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: Location | BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: Location | BlockLocation) {\n    return this.add(v)\n  }\n}\n","import { type Player, system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms: number): Promise<void> =>\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun<T>(fn: () => T): Promise<T> {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText: string, target: Player) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn(): Promise<Player> {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id: string, name?: string) {\n  const objective = world.scoreboard.getObjective(id)\n\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier: string) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier: string) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  code: number\n\n  constructor(directionCode: number) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n      default:\n        throw new Error(\"Unexpected error.\")\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction: Direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction: Direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static match(_: unknown): boolean {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert(_: unknown): boolean {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import type { Entity } from \"@minecraft/server\"\nimport type { MinecraftEntityTypes } from \"@minecraft/vanilla-data\"\n\nimport { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  _entity: Entity\n  id: Entity[\"id\"]\n  typeId: MinecraftEntityTypes\n  scoreboardIdentity: Entity[\"scoreboardIdentity\"]\n  components = new Map()\n\n  constructor(entity: Entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId as MinecraftEntityTypes\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    for (const component of components)\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n\n    throw new Error(\"Unexpected error.\")\n  }\n}\n","import type { Container, ItemStack } from \"@minecraft/server\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedContainer extends WrapperTemplate {\n  _container: Container\n\n  constructor(container: Container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot: number) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot: number, itemStack: ItemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack: ItemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import type { Container, Entity, ItemStack } from \"@minecraft/server\"\n\nimport { WrappedContainer } from \"./WrappedContainer.class\"\n\nexport class EntityContainer extends WrappedContainer {\n  _entity: Entity\n\n  constructor(entity: Entity, container: Container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack: ItemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import type { GameMode, ItemStack, Player } from \"@minecraft/server\"\n\nimport { EntityContainer } from \"../container/index\"\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  name: Player[\"name\"]\n\n  constructor(player: Player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  get _player() {\n    return this._entity as Player\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(\n      this._player,\n      this.components.get(\"inventory\").container\n    )\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    return this._player.getGameMode()\n  }\n  testGameMode(mode: GameMode) {\n    return this.getGameMode() === mode\n  }\n  setGameMode(mode: GameMode) {\n    this._player.setGameMode(mode)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item: ItemStack) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(\n    slot: number,\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}): number {\n    let xpAmount = amount\n\n    if (useXpOrb && amount >= 0) {\n      while (xpAmount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entityTypes: [target],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { type Entity, EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.typeId === target\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        const cause = `minecraft:${event.damageSource.cause}`\n        if (cause === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import type { Criteria } from \"../../../types\"\n\nexport default (({ player, target, callback }) => ({\n  events: {\n    playerBreakBlock: {\n      listener(event) {\n        const blockPermutation = event.brokenBlockPermutation\n        const source = event.player\n        if (source.id === player.id && blockPermutation.type.id === target)\n          callback({\n            type: \"decrease\",\n            value: 1,\n          })\n      },\n    },\n    playerPlaceBlock: {\n      listener(event) {\n        const block = event.block\n        const source = event.player\n        if (source.id === player.id && block.typeId === target)\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","// import custom from \"./custom/index\"\n\nimport killed from \"./mob/killed\"\nimport killed_by from \"./mob/killed_by\"\nimport killed_for from \"./mob/killed_for\"\n\nimport mined from \"./block/mined\"\nimport placed from \"./block/placed\"\n\nexport const types = {\n  // custom\n  // TODO:\n  // \"minecraft:custom\": custom, custom,\n\n  // mob\n  \"minecraft:killed\": killed,\n  \"minecraft:killed_by\": killed_by,\n  \"minecraft:killed_for\": killed_for, // not in vanilla\n\n  // block\n  \"minecraft:mined\": mined,\n  \"minecraft:placed\": placed, // not in vanilla\n\n  // item\n  // TODO:\n}\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(_) {\n        callback({\n          type: \"increase\",\n          value: 1,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import type { Entity } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityHealthChanged: {\n      options: {\n        entities: [player as Entity],\n      },\n      listener(event) {\n        callback({\n          type: \"reset\",\n          value: event.newValue,\n        })\n      },\n    },\n    playerSpawn: {\n      listener(_) {\n        callback({\n          type: \"reset\",\n          value: 20,\n        })\n      },\n    },\n  },\n})) as Criteria\n","import killed from \"./statistic/types/mob/killed\"\nimport type { Criteria } from \"./types\"\n\nexport default ({ player, callback }: Parameters<Criteria>[0]) =>\n  killed({\n    player,\n    target: \"minecraft:player\",\n    callback,\n  })\n","import { EntityDamageCause } from \"@minecraft/server\"\nimport type { Criteria } from \"./types\"\n\nexport default (({ player, callback }) => ({\n  events: {\n    entityDie: {\n      listener(event) {\n        const cause = event.damageSource.cause\n        const source = event.damageSource.damagingEntity\n        if (\n          cause === EntityDamageCause.entityAttack &&\n          source?.id === player.id\n        )\n          callback({\n            type: \"increase\",\n            value: 1,\n          })\n      },\n    },\n  },\n})) as Criteria\n","import { types } from \"./statistic/types/index\"\n\nimport deathCount from \"./deathCount\"\nimport health from \"./health\"\nimport playerKillCount from \"./playerKillCount\"\nimport totalKillCount from \"./totalKillCount\"\n\nexport default new Map([\n  ...Object.entries(types),\n\n  [\"deathCount\", deathCount],\n  [\"playerKillCount\", playerKillCount],\n  [\"totalKillCount\", totalKillCount],\n  [\"health\", health],\n])\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import type {\n  Player,\n  ScoreboardIdentity,\n  ScoreboardObjective,\n} from \"@minecraft/server\"\n\nimport md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { type Serializable, deserialize, serialize } from \"../util/index\"\nimport type { WrappedPlayer } from \"../wrapper/entity\"\n\nexport const ALL_DATABASES = new Map<string, Database<any>>()\n\nexport class Database<V extends Serializable> {\n  id: string\n  objective: ScoreboardObjective\n\n  static open<T extends Serializable>(\n    player: Player | WrappedPlayer,\n    dbName: string\n  ) {\n    return new Database<T>(player, dbName)\n  }\n  constructor(player: Player | WrappedPlayer, dbName: string) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map<string, { value: V; participant: ScoreboardIdentity }>()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    for (const participant of this.objective.getParticipants()) {\n      const data = deserialize(participant.displayName) as Record<string, V>\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    }\n  }\n  has(key: string) {\n    return this.store.has(key)\n  }\n  async delete(key: string) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)!\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    for (const [, { participant }] of this.store)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n\n    this.store.clear()\n  }\n  get(key: string) {\n    return this.store.get(key)?.value\n  }\n  async set(key: string, value: V) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    if (data.length > 32767)\n      throw new RangeError(\"Database: Value is too long.\")\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output: Record<string, V> = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries(): Generator<[string, V]> {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys(): Generator<string> {\n    for (const key of this.store.keys()) yield key\n  }\n  *values(): Generator<V> {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import type { Player } from \"@minecraft/server\"\n\nimport { Database } from \"@/lib/database/index\"\n\nimport type { Criteria } from \"./criteria/types\"\n\nexport const globalDB = new Database<string>(\n  { id: \"global\" } as Player,\n  \"scoreboard-statistic-global\"\n)\n\nexport const ALL_PLAYER_DATABASES = new Map<Player, EventDB>()\n\nexport class EventDB {\n  player: Player\n  db: Database<Set<string>>\n\n  constructor(player: Player) {\n    this.player = player\n    this.db = Database.open(player, \"scoreboard-statistic-player\")\n  }\n\n  events = new Map<string, ReturnType<Criteria>[\"events\"]>()\n\n  // 此次因为有 events 这个运行时存储项，\n  // 而不能多次 construct，\n  // 故使用此方法将实例储存到 ALL_PLAYER_DATABASES 中\n  static init(player: Player) {\n    const db = new EventDB(player)\n    ALL_PLAYER_DATABASES.set(player, db)\n    return db\n  }\n\n  async addParticipated(objectiveId: string) {\n    const participated = this.getParticipated()\n    participated.add(objectiveId)\n    await this.db.set(\"__participated__\", participated)\n  }\n  getParticipated() {\n    return new Set(this.db.get(\"__participated__\") ?? [])\n  }\n\n  setEvents(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    this.events.set(objectiveId, events)\n  }\n  getEvents(objectiveId: string) {\n    return this.events.get(objectiveId)\n  }\n\n  async add(objectiveId: string, events: ReturnType<Criteria>[\"events\"]) {\n    await this.addParticipated(objectiveId)\n    this.setEvents(objectiveId, events)\n  }\n  has(objectiveId: string) {\n    return (\n      this.events.has(objectiveId) && this.getParticipated().has(objectiveId)\n    )\n  }\n  async delete(objectiveId: string) {\n    const participated = this.getParticipated()\n    if (participated.has(objectiveId)) {\n      participated.delete(objectiveId)\n      await this.db.set(\"__participated__\", participated)\n      this.events.delete(objectiveId)\n      return true\n    }\n  }\n  async clear() {\n    await this.db.clear()\n    this.events.clear()\n  }\n}\n","import type { Player, RawMessage } from \"@minecraft/server\"\nimport {\n  type ActionFormData,\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  type ModalFormData,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\ninterface DialogHandlers<T> {\n  dialog: ModalFormData | MessageFormData | ActionFormData\n  onClose?: () => Promise<T>\n  onSubmit?: (\n    submitted: NonNullable<ModalFormResponse[\"formValues\"]>\n  ) => Promise<T>\n  onSelectButton1?: () => Promise<T>\n  onSelectButton2?: () => Promise<T>\n  onSelect?: (\n    selected: NonNullable<ActionFormResponse[\"selection\"]>\n  ) => Promise<T>\n}\n\nexport class Dialog<T> implements DialogHandlers<T> {\n  static async confirm<U>({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => ({}) as U,\n    onConfirm = async () => ({}) as U,\n  }: {\n    title?: string\n    body: RawMessage | string\n    target: Player\n    onCancel?: () => Promise<U>\n    onConfirm?: () => Promise<U>\n  }): Promise<U | undefined> {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog<U>({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  dialog\n  onClose\n  onSubmit\n  onSelectButton1\n  onSelectButton2\n  onSelect\n\n  constructor({\n    dialog,\n    onClose = async () => ({}) as T,\n    onSubmit = async () => ({}) as T,\n    onSelectButton1 = async () => ({}) as T,\n    onSelectButton2 = async () => ({}) as T,\n    onSelect = async () => ({}) as T,\n  }: DialogHandlers<T>) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n\n  async show(target: Player): Promise<T | undefined> {\n    let response: ModalFormResponse | MessageFormResponse | ActionFormResponse\n\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n\n    if (response instanceof ModalFormResponse) {\n      if (!response.formValues) throw new Error(\"Unexpected error.\")\n\n      return await this.onSubmit(response.formValues)\n    }\n\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n\n      throw new Error(\"Unexpected error.\")\n    }\n\n    if (response instanceof ActionFormResponse) {\n      if (!response.selection) throw new Error(\"Unexpected error.\")\n\n      return await this.onSelect(response.selection)\n    }\n  }\n}\n\nexport default Dialog\n","import { isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  _events: Record<string, Function[]> = {}\n\n  on(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args: any[]) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args: any[]) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName: string, listener: Function) {\n    if (this._events[eventName]) {\n      const newListeners: Function[] = []\n      for (const _listener of this._events[eventName]) {\n        if (_listener !== listener) newListeners.push(_listener)\n      }\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName: string, ...args: any[]) {\n    if (this._events[eventName]) {\n      for (const listener of this._events[eventName]) listener(...args)\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName: string, ...args: any[]) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      for (const listener of this._events[_eventName]) await listener(...args)\n    }\n  }\n  addListener(eventName: string, listener: Function) {\n    return this.on(eventName, listener)\n  }\n  off(eventName: string, listener: Function) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import type { NumberRange as INumberRange } from \"@minecraft/common\"\n\nimport { range } from \"./util/math\"\n\nexport class NumberRange implements INumberRange {\n  min: number\n  max: number\n  step: number\n\n  constructor(min: number, max: number, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n: number) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport interface IOptionItemRange {\n  name: string\n  description: string\n  range?: [number, number, number?]\n  defaultValue?: number\n  reload?: boolean\n  events?: {\n    inited?: (selected: number, player: Player) => void\n    changed?: (selected: number, original: number, player: Player) => void\n    selected?: (selected: number, original: number, player: Player) => void\n  }\n}\n\nexport class OptionItemRange {\n  name: string\n  description: string\n  range: NumberRange\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: number | undefined\n  selected: number | undefined\n\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: {\n    _player: Player\n  } & IOptionItemRange) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events) {\n      for (const [eventName, listener] of Object.entries(events))\n        this.events.on(eventName, listener)\n    }\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: number) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(value: number) {\n    return this.range.includes(value)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport interface IOptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Array<[T, string | undefined]>\n  defaultValue?: T\n  reload?: boolean\n  events?: {\n    inited?: (selected: T, player: Player) => void\n    changed?: (selected: T, original: T, player: Player) => void\n    selected?: (selected: T, original: T, player: Player) => void\n  }\n}\n\nexport class OptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Map<T, string | undefined>\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: T | undefined\n  selected: T | undefined\n\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: { _player: Player } & IOptionItemSelection<T>) {\n    this.name = name\n    this.description = description\n    this.values = new Map(values)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events) {\n      for (const [eventName, listener] of Object.entries(events))\n        this.events.on(eventName, listener)\n    }\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: T) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(value: T) {\n    return this.values.has(value) || !this.values.size\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\nimport { type IOptionItemRange, OptionItemRange } from \"./OptionItemRange.class\"\nimport {\n  type IOptionItemSelection,\n  OptionItemSelection,\n} from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  name: string\n  db: Database<string | number | boolean>\n  player: Player\n\n  constructor(player: Player, name: string) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items: Record<string, OptionItemSelection<any> | OptionItemRange> = {}\n  reload = false\n\n  addSelectionItem(opts: { _player: Player } & IOptionItemSelection<any>) {\n    this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  addRangeItem(opts: { _player: Player } & IOptionItemRange) {\n    this.items[opts.name] = new OptionItemRange(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    for (const [name, value] of data) await this.db.set(name, value)\n\n    for (const [name] of this.db) {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    }\n  }\n  async _syncFromDB() {\n    for (const [name, value] of this.db)\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    await this._syncToDB()\n  }\n  async init() {\n    this.addSelectionItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n    this.addRangeItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n\n    await this._syncFromDB()\n\n    return this.getItemValMap()\n  }\n\n  _getItem(name: string) {\n    return this.items[name]\n  }\n  hasItem(name: string) {\n    return !!this.items[name]\n  }\n  setItemVal<T>(\n    name: string,\n    value: T,\n    callback: (\n      selected: T,\n      original: T,\n      map: Map<string, any>\n    ) => void = () => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      // @ts-ignore\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name: string) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    // TODO: use map\n    const result = new Map<string, any>()\n    for (const [name] of Object.entries(this.items))\n      result.set(name, this.getItemVal(name))\n    return result\n  }\n  async done({ parentDialog }: { parentDialog?: Dialog<any> } = {}) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog({ parentDialog })\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog({ parentDialog }: { parentDialog?: Dialog<any> } = {}) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap: Array<{\n      name: string\n      valuesMap:\n        | Map<boolean, boolean>\n        | Map<number, string | number | boolean>\n        | Map<number, number>\n    }> = []\n\n    for (const [, item] of Object.entries(this.items)) {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          for (const [e] of values) valuesMap.set(e, e)\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          for (let i = 0; i < valueArray.length; i++) {\n            const [e] = valueArray[i]\n            valuesMap.set(i, e)\n          }\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1] ?? `${e[0]}`),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        for (const i of range) valuesMap.set(i, i)\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    }\n\n    const dialog = new Dialog<void>({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        for (let nameIndex = 0; nameIndex < result.length; nameIndex++) {\n          const valueIndex = result[nameIndex] as number\n\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        }\n        await this.done({ parentDialog })\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport type { IOptionItemRange } from \"./OptionItemRange.class\"\nimport type { IOptionItemSelection } from \"./OptionItemSelection.class\"\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  id: string\n  name: string\n\n  constructor(id: string, name?: string) {\n    this.id = id\n    this.name = name ?? id\n  }\n\n  players = new Map<Player, PlayerOption>()\n\n  _items = {\n    range: new Set<IOptionItemRange>(),\n    selection: new Set<IOptionItemSelection<any>>(),\n  }\n\n  addSelectionItem(opts: IOptionItemSelection<any>) {\n    this._items.selection.add(opts)\n    return this\n  }\n  addRangeItem(opts: IOptionItemRange) {\n    this._items.range.add(opts)\n    return this\n  }\n  addToggleItem<T extends IOptionItemSelection<boolean>>(\n    opts: {\n      [P in keyof T as Exclude<P, \"values\">]: T[P]\n    }\n  ) {\n    this._items.selection.add({\n      ...opts,\n      values: [\n        [false, \"关闭\"],\n        [true, \"开启\"],\n      ],\n    })\n    return this\n  }\n\n  applyPlayer(player: Player) {\n    if (this.players.has(player)) return this.players.get(player)\n\n    const playerOpt = new PlayerOption(player, this.id)\n    for (const item of this._items.selection) {\n      playerOpt.addSelectionItem({\n        ...item,\n        _player: player,\n      })\n    }\n    for (const item of this._items.range) {\n      playerOpt.addRangeItem({\n        ...item,\n        _player: player,\n      })\n    }\n\n    this.players.set(player, playerOpt)\n\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map<\n      Player,\n      Awaited<ReturnType<PlayerOption[\"init\"]>>\n    >()\n    for (const [player, playerOpt] of this.players) {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    }\n    this.applyPlayer = () => {\n      throw new Error(\"Can't apply player after initialization.\")\n    }\n    return valueMap\n  }\n  getPlayer(player: Player) {\n    const playerOption = this.players.get(player)\n\n    if (!playerOption) throw new Error(\"Can't get player  options.\")\n\n    return playerOption\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { Dialog } from \"../dialog/index\"\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map<string, OptionNamespace>()\n\n  registerNamesapace({ id, name }: { id: string; name?: string }) {\n    const namespaces = new OptionNamespace(id, name)\n    this.namespaces.set(id, namespaces)\n    return namespaces\n  }\n  getNamesapace(id: string) {\n    const namespace = this.namespaces.get(id)\n\n    if (!namespace) throw new Error(\"Can't get namespace.\")\n\n    return namespace\n  }\n  async showDialog(player: Player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n\n    const nameMap: string[] = []\n    for (const [, namespace] of this.namespaces) {\n      nameMap.push(namespace.id)\n      form.button(namespace.name)\n    }\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const id = nameMap[selection]\n        await this.getNamesapace(id)\n          .getPlayer(player)\n          .showDialog({ parentDialog: dialog })\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import type { Player } from \"@minecraft/server\"\n\nimport { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO: argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender as Player))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender as Player)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace({ id: \"scoreboard-statistic\" })\n  .addToggleItem({\n    name: \"enable_creative\",\n    description: \"允许统计创造模式下的行为\",\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_creative -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addToggleItem({\n    name: \"enable_cancel_out\",\n    description: \"对部分统计项启用抵消\",\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_cancel_out -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addToggleItem({\n    name: \"enable_confirm_dialog\",\n    description: \"启用删除记分板时的警告\",\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:enable_confirm_dialog -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addToggleItem({\n    name: \"auto_start\",\n    description: \"添加记分板后是否自动开始统计\",\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"scoreboard-statistic:auto_start -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import {\n  DisplaySlotId,\n  GameMode,\n  ObjectiveSortOrder,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport type { PlayerOption } from \"@/lib/option-manager/PlayerOption.class\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  addMinecraftNamespaceIfNeed,\n  asyncRun,\n  getOrAddObjective,\n} from \"@/util/game\"\n\nimport CRITERIA from \"./criteria/index\"\nimport { ALL_PLAYER_DATABASES, type EventDB, globalDB } from \"./db\"\nimport { option } from \"./option\"\n\nexport class Handler {\n  player: Player\n  playerOption: PlayerOption\n  playerDB: EventDB\n\n  constructor(player: Player) {\n    this.player = player\n    this.playerOption = option.getPlayer(player)\n\n    const playerDB = ALL_PLAYER_DATABASES.get(player)\n\n    if (!playerDB) throw new Error(\"Can't get player database.\")\n\n    this.playerDB = playerDB\n  }\n\n  async add({\n    objectiveId,\n    criteria,\n    displayName = objectiveId,\n  }: {\n    objectiveId: string\n    criteria: string\n    displayName?: string\n  }) {\n    if (world.scoreboard.getObjective(objectiveId))\n      return { code: 0, message: \"DUPLICATE_OBJECTIVE\" }\n\n    const [criteriaType] = parseCriteria(criteria)\n    if (!CRITERIA.get(criteriaType))\n      return { code: 0, message: \"UNKNOWN_CRITERIA\" }\n\n    await asyncRun(() => {\n      const objective = world.scoreboard.addObjective(objectiveId, displayName)\n      world.scoreboard.setObjectiveAtDisplaySlot(DisplaySlotId.Sidebar, {\n        objective,\n        sortOrder: ObjectiveSortOrder.Ascending,\n      })\n\n      if (!objective.hasParticipant(this.player)) {\n        // TODO: 或许放到 start 里更合理\n        // 如果该玩家不存在任何一个记分板中，直接 setScore(this.player) 会报错\n        // 所以这里用命令设置一下初始分数\n        // objective.setScore(this.player, 0)\n        this.player.runCommand(`scoreboard players set @s ${objectiveId} 0`)\n      }\n    })\n\n    await globalDB.set(objectiveId, criteria)\n\n    return { code: 1 }\n  }\n\n  async remove({ objectiveId }: { objectiveId: string }) {\n    if (!globalDB.get(objectiveId)) return false\n\n    await asyncRun(() => world.scoreboard.removeObjective(objectiveId))\n    await globalDB.delete(objectiveId)\n\n    return true\n  }\n\n  async start({\n    objectiveId,\n    criteria = globalDB.get(objectiveId) as string,\n  }: {\n    objectiveId: string\n    criteria?: string\n  }) {\n    if (this.playerDB.has(objectiveId)) return false\n\n    const objective = getOrAddObjective(objectiveId)\n    const [criteriaType, criteriaName] = parseCriteria(criteria)\n\n    const setupTigger = CRITERIA.get(criteriaType)\n\n    if (!setupTigger) throw new Error(\"Unknown criteria.\")\n\n    const tigger = setupTigger({\n      player: this.player,\n      target: criteriaName,\n      callback: (result) => {\n        if (\n          !new WrappedPlayer(this.player).testGameMode(GameMode.creative) ||\n          this.playerOption.getItemVal(\"enable_creative\")\n        ) {\n          switch (result.type) {\n            case \"decrease\": {\n              if (this.playerOption.getItemVal(\"enable_cancel_out\"))\n                objective.setScore(\n                  this.player,\n                  (objective.getScore(this.player) ?? 0) - result.value\n                )\n              break\n            }\n            case \"reset\": {\n              objective.setScore(this.player, result.value)\n              break\n            }\n            default: {\n              objective.addScore(this.player, result.value)\n            }\n          }\n        }\n      },\n    })\n\n    for (const [eventName, { options, listener }] of Object.entries(\n      tigger.events\n    )) {\n      await asyncRun(() =>\n        // @ts-ignore\n        world.afterEvents[eventName].subscribe(listener, options)\n      )\n    }\n\n    await this.playerDB.add(objectiveId, tigger.events)\n\n    return true\n  }\n\n  async stop({ objectiveId }: { objectiveId: string }) {\n    if (!this.playerDB.has(objectiveId)) return false\n\n    const events = this.playerDB.getEvents(objectiveId)\n\n    if (!events) throw new Error(\"Unexpected error.\")\n\n    for (const [eventName, { listener }] of Object.entries(events)) {\n      await asyncRun(() =>\n        // @ts-ignore\n        world.afterEvents[eventName].unsubscribe(listener)\n      )\n    }\n    await this.playerDB.delete(objectiveId)\n\n    return true\n  }\n}\n\nfunction parseCriteria(criteria: string) {\n  return criteria\n    .split(\":\")\n    .map((e) => addMinecraftNamespaceIfNeed(e.replace(\".\", \":\")))\n}\n","import { Player } from \"@minecraft/server\"\n\nimport type { CommandTarget } from \"@/lib/commands/Commands.class\"\nimport { Dialog } from \"@/lib/dialog/index\"\nimport { asyncRun, errorHandler } from \"@/util/game\"\n\nimport { Handler } from \"./Handler.class\"\nimport { option } from \"./option\"\n\nexport async function command(argv: string[], sender: CommandTarget) {\n  if (sender instanceof Player) {\n    const playerOption = option.getPlayer(sender)\n    const handler = new Handler(sender)\n\n    const objectiveId = argv[2]\n    switch (argv[1]) {\n      case \"add\": {\n        const [, , , criteria, displayName] = argv\n        if (!objectiveId) throw errorHandler(\"objectiveId 是必须的\", sender)\n        if (!criteria) throw errorHandler(\"criteria 是必须的\", sender)\n\n        if (!playerOption.getItemVal(\"enable_creative\"))\n          sender.sendMessage(\"注意：当前设置不会统计创造模式下的行为\")\n\n        const result = await handler.add({ objectiveId, criteria, displayName })\n        if (result.code)\n          sender.sendMessage(\n            `成功添加记分板 \"${displayName}\" (${objectiveId}) 使用 \"${criteria}\"`\n          )\n        else {\n          switch (result.message) {\n            case \"DUPLICATE_OBJECTIVE\": {\n              throw errorHandler(\n                `添加失败：记分板 ${objectiveId} 已存在`,\n                sender\n              )\n            }\n            case \"UNKNOWN_CRITERIA\": {\n              throw errorHandler(`添加失败：未知的准则 ${criteria}`, sender)\n            }\n          }\n        }\n\n        if (playerOption.getItemVal(\"auto_start\")) {\n          const startResult = await handler.start({ objectiveId, criteria })\n          if (startResult)\n            sender.sendMessage(`已自动开启您在 ${displayName} 上的统计`)\n        }\n\n        break\n      }\n      case \"remove\":\n      case \"rm\":\n      case \"-r\": {\n        async function _remove() {\n          const result = await handler.remove({ objectiveId })\n          if (result) (sender as Player).sendMessage(`删除成功 ${objectiveId}`)\n          else\n            throw errorHandler(\n              `移除失败：记分板 ${objectiveId} 不存在或不是统计用记分板`,\n              sender as Player\n            )\n        }\n\n        if (playerOption.getItemVal(\"enable_confirm_dialog\"))\n          await Dialog.confirm({\n            body: `是否清除记分板 ${objectiveId} 上的统计数据，你将永远失去它们`,\n            target: sender,\n            onConfirm: _remove,\n          })\n        else await _remove()\n\n        break\n      }\n      case \"stop\": {\n        const result = await handler.stop({ objectiveId })\n\n        if (result) sender.sendMessage(`已暂停您在 ${objectiveId} 上的统计`)\n        else\n          throw errorHandler(\n            `暂停失败：您可能没有开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n            sender\n          )\n\n        break\n      }\n      case \"start\": {\n        const result = await handler.start({ objectiveId })\n\n        if (result) sender.sendMessage(`已开启您在 ${objectiveId} 上的统计`)\n        else\n          throw errorHandler(\n            `开启失败：您可能已经开启您在记分板 ${objectiveId} 上的统计，或该记分板不存在`,\n            sender\n          )\n\n        break\n      }\n      case \"option\":\n      case \"opt\":\n      case \"-o\": {\n        await asyncRun(() => playerOption.showDialog())\n        break\n      }\n      default: {\n        throw errorHandler(`未知的子命令 ${argv[1]}`, sender)\n      }\n    }\n  }\n\n  throw new Error(\"Target must be a player.\")\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { Commands } from \"@/lib/commands/index\"\n\nimport { Handler } from \"./Handler.class\"\nimport { command } from \"./command\"\nimport { EventDB } from \"./db\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() => {\n    for (const player of world.getAllPlayers()) {\n      option.applyPlayer(player)\n    }\n  })\n  .then(() => option.init())\n  .then(async () => {\n    for (const [player] of option.players) {\n      // 将所有玩家的数据库实例化并储存在 ALL_PLAYER_DATABASES 中\n      const db = EventDB.init(player)\n\n      const handler = new Handler(player)\n      const participated = db.getParticipated()\n\n      // reload 后运行时存储 events 为空，\n      // 并且 listener 也都失效，\n      // 故重新订阅事件\n      await db.clear()\n      for (const objectiveId of participated) {\n        const result = await handler.start({ objectiveId })\n        if (result)\n          player.sendMessage(`已重启您在记分板 ${objectiveId} 上的统计`)\n      }\n    }\n\n    Commands.register(\"!\", \"statistic\", command)\n  })\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","overworld","world","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Set","Commands","run","commandString","target","runCommand","asyncRun","customCommands","filter","regex","test","map","e","runner","length","runCommandAsync","register","prefix","command","callback","startsWith","Error","RegExp","argv","split","trim","add","beforeEvents","chatSend","subscribe","event","message","cancel","sender","catch","safeEval","code","context","fn","Function","Object","keys","values","serialize","obj","Array","from","Map","entries","isArray","join","key","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","prototype","toString","call","round","n","Math","floor","equals","a","b","epsilon","abs","max","range","to","step","output","i","push","VectorN","x","get","set","y","z","w","create","vector","vectorStr","Number","axes","toArray","Symbol","toPrimitive","hint","iterator","dimensions","index","callbackfn","constructor","VectorNUtils","clone","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","forEach","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","random","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","Promise","resolve","reject","system","errorHandler","errText","sendMessage","waitForFirstPlayerInitialSpawn","players","getAllPlayers","afterEvents","playerSpawn","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","addMinecraftNamespaceIfNeed","Direction","isEast","isSouth","isUp","isWest","isNorth","isDown","direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","match","_","assert","WrappedEntity","nameTag","_entity","location","dimension","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","components","typeId","scoreboardIdentity","getComponents","component","WrappedContainer","size","_container","emptySlotsCount","getItem","slot","setItem","itemStack","tryAddItem","addItem","container","EntityContainer","remain","spawnItem","WrappedPlayer","_player","experience","addExperience","level","inventory","selectedSlotIndex","getGameMode","testGameMode","mode","setGameMode","getMainHandItem","setMainHandItem","item","useItemFromInventory","useMainHandItem","amount","useXpOrb","xpAmount","spawnEntity","addLevels","events","entityDie","options","entityTypes","listener","cause","damageSource","source","damagingEntity","EntityDamageCause","entityAttack","type","entities","playerBreakBlock","blockPermutation","brokenBlockPermutation","playerPlaceBlock","block","types","killed","killed_by","killed_for","mined","placed","entityHealthChanged","newValue","deathCount","playerKillCount","totalKillCount","health","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","encoding","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","participant","getParticipants","data","displayName","has","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","globalDB","ALL_PLAYER_DATABASES","EventDB","init","db","addParticipated","objectiveId","participated","getParticipated","setEvents","getEvents","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","formValues","onSubmit","MessageFormResponse","selection","ActionFormResponse","onSelect","EventEmitter","on","eventName","_eventName","_events","once","_listener","args","removeListener","newListeners","emit","asyncEmit","addListener","off","NumberRange","array","includes","OptionItemRange","select","selected","_includes","original","description","defaultValue","reload","OptionItemSelection","hasVal","PlayerOption","addSelectionItem","opts","items","addRangeItem","_syncToDB","getItemValMap","hasItem","_syncFromDB","setItemVal","syncFromDB","_getItem","result","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","nameIndex","valueIndex","OptionNamespace","_items","addToggleItem","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","playerOption","OptionManager","registerNamesapace","namespaces","getNamesapace","namespace","ActionFormData","button","optionManager","option","changed","warn","Handler","criteria","criteriaType","parseCriteria","CRITERIA","setObjectiveAtDisplaySlot","DisplaySlotId","Sidebar","sortOrder","ObjectiveSortOrder","Ascending","hasParticipant","remove","removeObjective","start","playerDB","criteriaName","setupTigger","tigger","GameMode","creative","getScore","addScore","stop","Player","handler","startResult","_remove","then"],"mappings":"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","x_google_ignoreList":[27,28,29,30]}