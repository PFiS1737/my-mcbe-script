{"version":3,"file":"vein-mining.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/lib/wrapper/item/ItemStackWithDurability.class.ts","../src/data/block/types.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/BlockList.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/WrappedContainer.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/script/vein-mining/config.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/vein-mining/option.ts","../src/script/vein-mining/event.ts","../src/script/vein-mining/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err: Error) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code: string, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport type Serializable =\n  | Set<Serializable>\n  | Map<Serializable, Serializable>\n  | { [key: string]: Serializable }\n  | Array<Serializable>\n  | string\n  | number\n  | boolean\n\nexport function serialize(obj: Serializable): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str: string): Serializable {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport function isAsyncFunc(func: Function): boolean {\n  return Object.prototype.toString.call(func) === \"[object AsyncFunction]\"\n}\n\nexport function arraySample<T>(arr: Array<T>): T {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function toCamelCase(str: string) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","export function round(n: number) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p: number) {\n  return Math.random() <= p\n}\n\nexport function equals(a: number, b: number, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n: number): number {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n: number, k: number) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a: number, b: number, n: number) {\n  return (k: number) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n: number, p: number) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from: number, to: number, fn: (i: number) => number) {\n  let output = 0\n  for (let i = from; i <= to; i++) output += fn(i)\n  return output\n}\n\nexport function range(from: number, to: number, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","import type { Vector3 as IVector3 } from \"@minecraft/server\"\nimport { serialize } from \"../util\"\n\n/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN implements IVector3 {\n  axes: number[]\n\n  /**\n   * Create a vector.\n   * @param axes - The axes of the vector.\n   */\n  constructor(...axes: number[]) {\n    this.axes = axes\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n  get w() {\n    return this.get(3)\n  }\n  set w(value) {\n    this.set(3, value)\n  }\n\n  /**\n   * Create a vector.\n   * @param vector - The vector wrote in array or string.\n   * @returns The vector.\n   */\n  static create(vector: number[] | string): VectorN {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n\n    throw new Error(`Can't create vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string): VectorN {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns The string representation of the vector.\n   */\n  stringify(): string {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns The array representation of the vector.\n   */\n  toArray(): Array<number> {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param hint - The type hint.\n   * @returns The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint: string): string | VectorN {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns The iterator for the axes.\n   */\n  [Symbol.iterator](): Iterator<number> {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns The number of dimensions.\n   */\n  get dimensions(): number {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param index - The index of the component.\n   * @returns The component value.\n   */\n  get(index: number): number {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param index - The index of the component.\n   * @param value - The value to set.\n   */\n  set(index: number, value: number) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): VectorN {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { equals, round } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Array<number>) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param a - The vector to clone.\n   * @returns The cloned vector.\n   */\n  static clone(a: VectorN) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a: VectorN, b: VectorN) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static add(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static subtract(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static multiply(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static divide(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param a - The vector to scale.\n   * @param n - The scalar value.\n   * @returns The resulting vector.\n   */\n  static scale(a: VectorN, n: number) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param a - The vector to negate.\n   * @returns The resulting vector.\n   */\n  static negate(a: VectorN) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param a - The vector to invert.\n   * @returns The resulting vector.\n   */\n  static inverse(a: VectorN) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param a - The vector to modify.\n   * @param axis1 - The first axis to exchange.\n   * @param axis2 - The second axis to exchange\n   * @returns The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a: VectorN, axis1: number, axis2: number) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static max(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static min(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static floor(a: VectorN) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static ceil(a: VectorN) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static round(a: VectorN) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static abs(a: VectorN) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param a - The vector to calculate the magnitude of.\n   * @returns The magnitude of the vector.\n   */\n  static magnitude(a: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param a - The vector to calculate the squared magnitude of.\n   * @returns The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a: VectorN) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The distance between the vectors.\n   */\n  static distance(a: VectorN, b: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The squared distance between the vectors.\n   */\n  static squaredDistance(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The dot product of the vectors.\n   */\n  static dot(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param a - The vector to normalize.\n   * @returns The normalized vector.\n   */\n  static normalize(a: VectorN) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The angle between the vectors in radians.\n   */\n  static angle(a: VectorN, b: VectorN) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param dimensions - The number of dimensions.\n   * @param scale - The scale of the random components.\n   * @returns The random vector.\n   */\n  static random(dimensions: number, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static lerp(a: VectorN, b: VectorN, t: number) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static slerp(a: VectorN, b: VectorN, t: number) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param points - The control points.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static bezier(points: VectorN[], t: number): VectorN {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(\n    vector: number[] | string | { x: number; y: number; z: number }\n  ): Vector3 {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The cross product of the vectors.\n   */\n  static cross(a: Vector3, b: Vector3): Vector3 {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { serialize } from \"../util\"\nimport { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\nexport type Vector3Like =\n  | string\n  | number[]\n  | { x: number; y: number; z: number }\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param x - The x axis.\n   * @param y - The y axis.\n   * @param z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Vector3Like): Vector3 {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n\n    throw new Error(`Can't create 3d vector for ${serialize(vector)}`)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): Vector3 {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v: Vector3 | VectorN) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v: Vector3) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v: Vector3) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v: Vector3) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v: Vector3) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v: Vector3) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v: Vector3) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v: Vector3) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n: number) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import type { Vector3Like } from \"../vector/Vector3.class\"\nimport { Vector3, Vector3Utils } from \"../vector/index\"\nimport type { BlockLocation } from \"./BlockLocation.class\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as Location\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v: Location) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: Location | BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: Location | BlockLocation) {\n    return this.add(v)\n  }\n}\n","import { Vector3Utils } from \"../vector\"\nimport { Vector3, type Vector3Like } from \"../vector/Vector3.class\"\n\nexport class BlockLocation extends Vector3 {\n  constructor(x: number, y: number, z: number) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as BlockLocation\n  }\n\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n  equals(v: BlockLocation) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: BlockLocation) {\n    return this.add(v)\n  }\n\n  divide(v: BlockLocation) {\n    super.divide(v)\n    return this.floor()\n  }\n}\n","import { type Player, system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms: number): Promise<void> =>\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun<T>(fn: () => T): Promise<T> {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText: string, target: Player) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn(): Promise<Player> {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id: string, name?: string) {\n  const objective = world.scoreboard.getObjective(id)\n\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier: string) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier: string) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","import { BlockLocation } from \"./BlockLocation.class\"\nimport type { Direction } from \"./Directions.class\"\nimport { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction: Direction) {\n    return BlockLocation.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(from: Location, to: Location, step = 1) {\n    const output = []\n    for (let x = from.x; x <= to.x; x += step) {\n      for (let y = from.y; y <= to.y; y += step) {\n        for (let z = from.z; z <= to.z; z += step) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","export class Direction {\n  code: number\n\n  constructor(directionCode: number) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n      default:\n        throw new Error(\"Unexpected error.\")\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction: Direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction: Direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup<T> {\n  types: Set<T>\n\n  constructor(types: T[]) {\n    this.types = new Set(types)\n  }\n\n  add(...types: T[]) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type: T) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import {\n  type ItemComponent,\n  type ItemComponentTypeMap,\n  ItemComponentTypes,\n  type ItemEnchantableComponent,\n  type ItemStack,\n} from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  _item: ItemStack\n  type: ItemStack[\"type\"]\n  typeId: MinecraftItemTypes\n\n  constructor(itemStack: ItemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId as MinecraftItemTypes\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(\n        removeMinecraftNamespace(\n          component.typeId\n        ) as keyof ItemComponentTypeMap,\n        component\n      )\n    })\n  }\n\n  components = new Map<\n    keyof ItemComponentTypeMap,\n    ItemComponentTypeMap[keyof ItemComponentTypeMap]\n  >()\n\n  hasComponent(componentId: string) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\n      ItemComponentTypes.Enchantable\n    ) as ItemEnchantableComponent\n  }\n}\n","import {\n  ItemComponentTypes,\n  type ItemDurabilityComponent,\n  type ItemStack,\n} from \"@minecraft/server\"\nimport { withProbability } from \"../../util/math\"\nimport { WrappedItemStack } from \"./WrappedItemStack.class\"\n\nexport class ItemStackWithDurability extends WrappedItemStack {\n  constructor(itemStack: ItemStack) {\n    if (!ItemStackWithDurability.match(itemStack))\n      throw new TypeError(\n        `The \"${itemStack.typeId}\" doesn't have the \"${ItemComponentTypes.Durability}\" component.`\n      )\n\n    super(itemStack)\n  }\n\n  static match(itemStack) {\n    return itemStack.hasComponent(\"minecraft:durability\")\n  }\n\n  get damage() {\n    return (\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).damage\n  }\n  set damage(value) {\n    ;(\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).damage = value < 0 ? 0 : value\n  }\n  get maxDurability() {\n    return (\n      this.components.get(\n        ItemComponentTypes.Durability\n      ) as ItemDurabilityComponent\n    ).maxDurability\n  }\n  get durability() {\n    return this.maxDurability - this.damage\n  }\n  set durability(value) {\n    this.damage += this.durability - value\n  }\n\n  applyDamage(damage: number) {\n    const unbreakingLevel = this.enchants.getEnchantment(\"unbreaking\")?.level\n    const probability =\n      (\n        this.components.get(\n          ItemComponentTypes.Durability\n        ) as ItemDurabilityComponent\n      ).getDamageChance(unbreakingLevel) / 100\n\n    for (let i = 0; i < damage; i++) {\n      if (withProbability(probability)) this.durability -= 1\n    }\n\n    return this\n  }\n}\n","import type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport type { ILootTableItemConfig } from \"@/lib/wrapper/LootTable.class\"\n\nexport type ItemDropConfig = {\n  item_id: MinecraftItemTypes\n  default_range?: [number, number] // default [1, 1]\n  max_amount?: number // default Number.POSITIVE_INFINITY\n  xp_range?: [number, number] // default [0, 0]\n  damage?: number // default 1\n}\n\nexport enum FortuneRules {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  Ore = 0,\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  Melon = 1,\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  Grass = 2,\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  Flower = 3,\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  Crop = 4,\n  // 使用自定义的战利品表\n  Custom = 5,\n}\n\nexport type BlockDropsConfigOption = {\n  // necessary if the fortune rule is custom\n  custom?: Record<\n    \"0\" | \"1\" | \"2\" | \"3\",\n    Array<ILootTableItemConfig<ItemDropConfig[]>>\n  >\n}\n\nexport type BlockDropsConfig = Array<{\n  // when dig with item\n  // use \"<empty>\" for empty-handed\n  // use \"<default>\" if none of the other items meet the requirements\n  dig_by:\n    | MinecraftItemTypes\n    | Array<MinecraftItemTypes | \"<empty>\">\n    | {\n        item_group: string\n      }\n    | \"<empty>\"\n    | \"<default>\"\n\n  // the raw resource that drop\n  // default to use the block item (if has)\n  raw?: ItemDropConfig\n\n  // for ore like\n  // refined resource\n  refined?: ItemDropConfig\n\n  // for crop like\n  // seend resource, default to use raw resource\n  seed?: ItemDropConfig\n  // immature resource, default to use seed resource\n  immature?: ItemDropConfig\n\n  // the rule template for fortune enchantment\n  fortune_rule?: FortuneRules\n\n  option?: BlockDropsConfigOption\n}>\n\nexport type BlockConfig = {\n  drops: BlockDropsConfig\n}\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport type { BlockConfig } from \"./types\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n  acacia_log: acaciaLog,\n  amethyst_block: amethystBlock,\n  amethyst_cluster: amethystCluster,\n  ancient_debris: ancientDebris,\n  birch_log: birchLog,\n  cherry_log: cherryLog,\n  coal_ore: coalOre,\n  copper_ore: copperOre,\n  crimson_stem: crimsonStem,\n  dark_oak_log: darkOakLog,\n  deepslate: deepslate,\n  deepslate_coal_ore: deepslateCoalOre,\n  deepslate_copper_ore: deepslateCopperOre,\n  deepslate_diamond_ore: deepslateDiamondOre,\n  deepslate_emerald_ore: deepslateEmeraldOre,\n  deepslate_gold_ore: deepslateGoldOre,\n  deepslate_iron_ore: deepslateIronOre,\n  deepslate_lapis_ore: deepslateLapisOre,\n  deepslate_redstone_ore: deepslateRedstoneOre,\n  diamond_ore: diamondOre,\n  emerald_ore: emeraldOre,\n  gold_ore: goldOre,\n  iron_ore: ironOre,\n  jungle_log: jungleLog,\n  lapis_ore: lapisOre,\n  mangrove_log: mangroveLog,\n  nether_gold_ore: netherGoldOre,\n  oak_log: oakLog,\n  obsidian: obsidian,\n  quartz_ore: quartzOre,\n  redstone_ore: redstoneOre,\n  spruce_log: spruceLog,\n  stone: stone,\n  warped_stem: warpedStem,\n} as Record<string, BlockConfig>\n","import type { NumberRange as INumberRange } from \"@minecraft/common\"\nimport { range } from \"./util/math\"\n\nexport class NumberRange implements INumberRange {\n  min: number\n  max: number\n  step: number\n\n  constructor(min: number, max: number, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n: number) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport interface ILootTableItemConfig<T> {\n  weight: number\n  value: T\n}\n\nexport class LootTable<T = number> {\n  constructor(items: Array<number | ILootTableItemConfig<T>>) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set<ILootTableItemConfig<T>>()\n  totalWeight = 0\n\n  addItem(item: ILootTableItemConfig<T>) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n\n    throw new Error(\"Unexpected error.\")\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import {\n  type BlockDropsConfig,\n  type BlockDropsConfigOption,\n  FortuneRules,\n  type ItemDropConfig,\n} from \"@/data/block/types\"\nimport { BlockPermutation } from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\nimport BlockDefinition from \"../../../data/block/index\"\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  itemId: MinecraftItemTypes\n  range: NumberRange\n  amountLootTable: LootTable\n  maxAmount: number\n  xpRange: NumberRange\n  damage: number\n\n  constructor({\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  }: ItemDropConfig) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult(): Array<{\n    itemId: MinecraftItemTypes\n    amount: number\n    xp?: number\n    damage?: number\n  }> {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  items: DropItem[]\n\n  constructor(group: ItemDropConfig[]) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output: ReturnType<DropItem[\"getResult\"]> = []\n    each(this.items, (item: DropItem) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport class BlockDrops {\n  blockTypeId: string\n  drops: BlockDropsConfig\n\n  blockItem: DropItem\n  rawResource: DropItem\n  refinedResource: DropItem | undefined\n  seedResource: DropItem\n  immatureResource: DropItem\n\n  fortuneRule: BlockDropsConfig[number][\"fortune_rule\"]\n\n  custumLootTables: BlockDropsConfigOption[\"custom\"]\n\n  constructor(\n    blockTypeId: string,\n    useItem: MinecraftItemTypes | \"<empty>\" = \"<empty>\"\n  ) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    const dropConfig = this.getDropConfig(useItem)\n    if (!dropConfig) {\n      throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId as MinecraftItemTypes,\n    })\n    this.rawResource = dropConfig.raw\n      ? new DropItem(dropConfig.raw)\n      : this.blockItem\n\n    // for ore like\n    this.refinedResource =\n      dropConfig.refined && new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seedResource = dropConfig.seed\n      ? new DropItem(dropConfig.seed)\n      : this.rawResource\n    this.immatureResource = dropConfig.immature\n      ? new DropItem(dropConfig.immature)\n      : this.seedResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FortuneRules.Custom) {\n      if (!dropConfig.option?.custom)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n\n      this.custumLootTables = dropConfig.option.custom\n    }\n  }\n\n  getDropConfig(useItem: MinecraftItemTypes | \"<empty>\") {\n    return (\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n    )\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule !== undefined) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FortuneRules.Ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FortuneRules.Flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seedResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FortuneRules.Custom: {\n          const lootTable = new LootTable<ItemDropConfig[]>(\n            //@ts-ignore\n            this.custumLootTables[level]\n          )\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n    }\n\n    return this.rawResource.getResult()\n  }\n}\n","import {\n  type Block,\n  BlockPermutation,\n  BlockVolume,\n  ItemStack,\n} from \"@minecraft/server\"\nimport type {\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n} from \"@minecraft/vanilla-data\"\nimport {\n  BlockLocation,\n  type Direction,\n  type Location,\n  LocationUtils,\n} from \"../../location/index\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\nimport { WrappedItemStack } from \"../item/index\"\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  _block: Block\n  type: Block[\"type\"]\n  typeId: MinecraftBlockTypes\n  location: BlockLocation\n  dimension: Block[\"dimension\"]\n  permutation: Block[\"permutation\"]\n\n  constructor(block: Block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId as MinecraftBlockTypes\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v: Location | BlockLocation) {\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction: Direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name: string) {\n    return this.permutation.getState(name)\n  }\n  hasState(name: string) {\n    return !!this.getState(name)\n  }\n  setState(name: string, value: string | number | boolean) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId: MinecraftItemTypes | \"<empty>\" = \"<empty>\") {\n    return !!new BlockDrops(this.typeId).getDropConfig(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack: ItemStack | WrappedItemStack) {\n    const drops = new BlockDrops(\n      this.typeId,\n      (useItemStack.typeId as MinecraftItemTypes) ?? \"<empty>\"\n    )\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.getEnchantment(\"fortune\")?.level ?? 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new ItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import type { Block } from \"@minecraft/server\"\nimport { each } from \"../../util/index\"\nimport { type Vector3, Vector3Utils } from \"../../vector/index\"\nimport type { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class BlockList<T extends Block | WrappedBlock> {\n  constructor(blocks?: T[]) {\n    if (blocks) this.add(...blocks)\n  }\n\n  blocks: T[] = []\n\n  get size() {\n    return this.blocks.length\n  }\n\n  add(...blocks: T[]) {\n    each(blocks, (block) => {\n      if (!this.has(block)) this.blocks.push(block)\n    })\n  }\n  has(block: T) {\n    return this.blocks.some(({ location }) =>\n      Vector3Utils.exactEquals(location as Vector3, block.location as Vector3)\n    )\n  }\n\n  shift() {\n    return this.blocks.shift()\n  }\n\n  [Symbol.iterator]() {\n    return this.blocks.values()\n  }\n}\n","import type { Entity, ScoreboardIdentity } from \"@minecraft/server\"\nimport { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport type { MinecraftEntityTypes } from \"@minecraft/vanilla-data\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  _entity: Entity\n  id: Entity[\"id\"]\n  typeId: MinecraftEntityTypes\n  scoreboardIdentity: Entity[\"scoreboardIdentity\"]\n  components = new Map()\n\n  constructor(entity: Entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId as MinecraftEntityTypes\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n\n    throw new Error(\"Unexpected error.\")\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\ntype CommandConfig = {\n  regex: RegExp\n  runner: (commandString: string, target: Player) => Promise<void>\n}\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set<CommandConfig>()\n\nexport class Commands {\n  static run(commandString: string, target: Entity | Dimension = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(\n    commandString: string,\n    target: Entity | Dimension = overworld\n  ) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(\n    prefix: string,\n    command: string,\n    callback: (argv: string[], target: Player) => Promise<void>\n  ) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner: CommandConfig[\"runner\"] = async (commandString, target) => {\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import type { Container, ItemStack } from \"@minecraft/server\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedContainer extends WrapperTemplate {\n  _container: Container\n\n  constructor(container: Container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot: number) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot: number, itemStack: ItemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack: ItemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import type { Container, Entity, ItemStack } from \"@minecraft/server\"\nimport type { WrappedEntity } from \"../entity\"\nimport { WrappedContainer } from \"./WrappedContainer.class\"\n\nexport class EntityContainer extends WrappedContainer {\n  _entity: Entity\n\n  constructor(entity: Entity | WrappedEntity, container: Container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack: ItemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import {\n  type Entity,\n  GameMode,\n  type ItemStack,\n  type Player,\n} from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  name: Player[\"name\"]\n\n  constructor(player: Player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity: Entity | WrappedEntity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity as Player\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches: GameMode[] = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode: GameMode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode: GameMode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item: ItemStack) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(\n    slot: number,\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}): number {\n    let xpAmount = amount\n\n    if (useXpOrb && amount >= 0) {\n      while (xpAmount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { TypeGroup } from \"@/lib/wrapper/TypeGroup.class\"\nimport { BlockTypeGroups } from \"@/lib/wrapper/block/index\"\n\nexport const ENABLE_BLOCKS = new TypeGroup([\n  ...BlockTypeGroups.LOGS,\n  ...BlockTypeGroups.STEMS,\n  ...BlockTypeGroups.ORES,\n  \"minecraft:obsidian\",\n  \"minecraft:ancient_debris\",\n  \"minecraft:amethyst_block\",\n])\n","import {\n  type ActionFormData,\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  type ModalFormData,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport type { Player, RawMessage } from \"@minecraft/server\"\nimport { asyncRun } from \"../util/game\"\n\ninterface DialogHandlers<T> {\n  dialog: ModalFormData | MessageFormData | ActionFormData\n  onClose?: () => Promise<T>\n  onSubmit?: (\n    submitted?: NonNullable<ModalFormResponse[\"formValues\"]>\n  ) => Promise<T>\n  onSelectButton1?: () => Promise<T>\n  onSelectButton2?: () => Promise<T>\n  onSelect?: (\n    selected?: NonNullable<ActionFormResponse[\"selection\"]>\n  ) => Promise<T>\n}\n\nexport class Dialog<T> implements DialogHandlers<T> {\n  static async confirm<U>({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => ({}) as U,\n    onConfirm = async () => ({}) as U,\n  }: {\n    title?: string\n    body: RawMessage | string\n    target: Player\n    onCancel?: () => Promise<U>\n    onConfirm?: () => Promise<U>\n  }): Promise<U | undefined> {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog<U>({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  dialog\n  onClose\n  onSubmit\n  onSelectButton1\n  onSelectButton2\n  onSelect\n\n  constructor({\n    dialog,\n    onClose = async () => ({}) as T,\n    onSubmit = async () => ({}) as T,\n    onSelectButton1 = async () => ({}) as T,\n    onSelectButton2 = async () => ({}) as T,\n    onSelect = async () => ({}) as T,\n  }: DialogHandlers<T>) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n\n  async show(target: Player): Promise<T | undefined> {\n    let response: ModalFormResponse | MessageFormResponse | ActionFormResponse\n\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from \"md5\"\n\nimport type {\n  Player,\n  ScoreboardIdentity,\n  ScoreboardObjective,\n} from \"@minecraft/server\"\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport {\n  type Serializable,\n  deserialize,\n  each,\n  eachAsync,\n  serialize,\n} from \"../util/index\"\nimport type { WrappedPlayer } from \"../wrapper/entity\"\n\nexport const ALL_DATABASES = new Map<string, Database<any>>()\n\nexport class Database<T extends Serializable> {\n  id: string\n  objective: ScoreboardObjective\n\n  static open<U extends Serializable>(\n    player: Player | WrappedPlayer,\n    dbName: string\n  ) {\n    return new Database<U>(player, dbName)\n  }\n  constructor(player: Player | WrappedPlayer, dbName: string) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map<string, { value: T; participant: ScoreboardIdentity }>()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName) as Record<string, T>\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key: string) {\n    return this.store.has(key)\n  }\n  async delete(key: string) {\n    if (this.has(key)) {\n      //@ts-ignore\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key: string) {\n    return this.store.get(key)?.value\n  }\n  async set(key: string, value: T) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output: Record<string, T> = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries(): Generator<[string, T]> {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys(): Generator<string> {\n    for (const key of this.store.keys()) yield key\n  }\n  *values(): Generator<T> {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  _events: Record<string, Function[]> = {}\n\n  on(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args: any[]) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args: any[]) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName: string, listener: Function) {\n    if (this._events[eventName]) {\n      const newListeners: Function[] = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName: string, ...args: any[]) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName: string, ...args: any[]) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName: string, listener: Function) {\n    return this.on(eventName, listener)\n  }\n  off(eventName: string, listener: Function) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import type { Player } from \"@minecraft/server\"\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemRange {\n  name: string\n  description: string\n  range?: [number, number, number?]\n  defaultValue?: number\n  reload?: boolean\n  events?: {\n    inited?: (selected: number, player: Player) => void\n    changed?: (selected: number, original: number, player: Player) => void\n    selected?: (selected: number, original: number, player: Player) => void\n  }\n}\n\nexport class OptionItemRange {\n  name: string\n  description: string\n  range: NumberRange\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: number | undefined\n  selected: number | undefined\n\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: {\n    _player: Player\n  } & IOptionItemRange) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: number) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(value: number) {\n    return this.range.includes(value)\n  }\n}\n","import { each } from \"../util/index\"\n\nimport type { Player } from \"@minecraft/server\"\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport interface IOptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Array<[T, string?]>\n  defaultValue?: T\n  reload?: boolean\n  events?: {\n    inited?: (selected: T, player: Player) => void\n    changed?: (selected: T, original: T, player: Player) => void\n    selected?: (selected: T, original: T, player: Player) => void\n  }\n}\n\nexport class OptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Map<T, string>\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: T | undefined\n  selected: T | undefined\n\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: { _player: Player } & IOptionItemSelection<T>) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      //@ts-ignore\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: T) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(value: T) {\n    return this.values.has(value) || !this.values.size\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ModalFormData } from \"@minecraft/server-ui\"\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\nimport { each, eachAsync } from \"../util/index\"\nimport { type IOptionItemRange, OptionItemRange } from \"./OptionItemRange.class\"\nimport {\n  type IOptionItemSelection,\n  OptionItemSelection,\n} from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  name: string\n  db: Database<string | number | boolean>\n  player: Player\n\n  constructor(player: Player, name: string) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items: Record<string, OptionItemSelection<any> | OptionItemRange> = {}\n  reload = false\n\n  addItem(\n    opts: { _player: Player } & (IOptionItemRange | IOptionItemSelection<any>)\n  ) {\n    //@ts-ignore\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    //@ts-ignore\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name: string) {\n    return this.items[name]\n  }\n  hasItem(name: string) {\n    return !!this.items[name]\n  }\n  setItemVal<T>(\n    name: string,\n    value: T,\n    callback: (\n      selected: T,\n      original: T,\n      map: Record<string, any>\n    ) => void = () => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      //@ts-ignore\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name: string) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    // TODO: use map\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog?: Dialog<any>) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog?: Dialog<any>) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap: Array<{\n      name: string\n      valuesMap:\n        | Map<boolean, boolean>\n        | Map<number, string | number | boolean>\n        | Map<number, number>\n    }> = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog<void>({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\nimport type { IOptionItemRange } from \"./OptionItemRange.class\"\nimport type { IOptionItemSelection } from \"./OptionItemSelection.class\"\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n\n  players = new Map<Player, PlayerOption>()\n  _items = new Set()\n\n  addItem(opts: IOptionItemSelection<any> | IOptionItemRange) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player: Player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = () => {\n      throw new Error(\"Can't apply player after initialization.\")\n    }\n    return valueMap\n  }\n  getPlayer(player: Player) {\n    const playerOption = this.players.get(player)\n\n    if (!playerOption) throw new Error(\"Can't get player  options.\")\n\n    return playerOption\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ActionFormData } from \"@minecraft/server-ui\"\nimport { Dialog } from \"../dialog/index\"\nimport { each } from \"../util/index\"\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map<string, OptionNamespace>()\n\n  registerNamesapace(name: string) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name: string) {\n    const namespace = this.namespaces.get(name)\n\n    if (!namespace) throw new Error(\"Can't get namespace.\")\n\n    return namespace\n  }\n  async showDialog(player: Player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap: string[] = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO: name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        //@ts-ignore\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"vein-mining\")\n  .addItem({\n    name: \"condition\",\n    description: \"触发条件\",\n    values: [\n      [\"off\", \"关闭\"],\n      [\"always\", \"总是\"],\n      [\"sneaking\", \"仅潜行时\"],\n    ],\n    defaultValue: \"sneaking\",\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"vein-mining:tigger -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_amount\",\n    description: \"最多检测的方块数量（并非最终挖掘的方块数）\",\n    range: [8, 128],\n    defaultValue: 64,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_stone\",\n    description: \"允许连锁挖掘岩石类方块（石头、深板岩）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_stone -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_collection\",\n    description: \"自动收集掉落物及经验（绕过经验修补）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:auto_collect_drops -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"prevent_tool_destruction\",\n    description: \"防止工具耐久耗尽\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:prevent_tool_destruction -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_edge\",\n    description: \"是否检测仅棱相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_diagonal\",\n    description: \"是否检测仅角相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_diagonal -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { ItemStack, world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { BlockLocation } from \"@/lib/location/index\"\nimport {\n  BlockList,\n  BlockTypeGroups,\n  WrappedBlock,\n} from \"@/lib/wrapper/block/index\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  ItemStackWithDurability,\n  WrappedItemStack,\n} from \"@/lib/wrapper/item/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport type { PlayerOption } from \"@/src/lib/option-manager/PlayerOption.class\"\nimport type { BlockDrops } from \"@/src/lib/wrapper/block/BlockDrops.class\"\nimport type {\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n} from \"@minecraft/vanilla-data\"\nimport { ENABLE_BLOCKS } from \"./config\"\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.afterEvents.playerBreakBlock.subscribe((event) => {\n    const basicBlock = new WrappedBlock(event.block)\n    const blockTypeId = event.brokenBlockPermutation.type\n      .id as MinecraftBlockTypes\n    const player = new WrappedPlayer(event.player)\n    const playerOption = option.getPlayer(event.player)\n\n    let enableBlocks = ENABLE_BLOCKS\n    if (playerOption.getItemVal(\"enable_stone\"))\n      enableBlocks = ENABLE_BLOCKS.clone().add(...BlockTypeGroups.STONES)\n\n    player\n      .useMainHandItem(async (mainHandItem) => {\n        if (\n          !mainHandItem ||\n          !enableBlocks.has(blockTypeId) ||\n          !WrappedBlock.prototype.canBeDugBy.call(\n            { typeId: blockTypeId },\n            mainHandItem.typeId as MinecraftItemTypes\n          ) ||\n          playerOption.getItemVal(\"condition\") === \"off\" ||\n          (playerOption.getItemVal(\"condition\") === \"sneaking\" &&\n            !player.isSneaking)\n        )\n          return mainHandItem\n\n        const blockList = getRelatedBlocks(\n          playerOption,\n          basicBlock,\n          blockTypeId\n        )\n\n        const wrappedItem =\n          ItemStackWithDurability.tryWrap(mainHandItem) ??\n          new WrappedItemStack(mainHandItem)\n\n        let totalDamage = 0\n\n        const totalItems: ReturnType<BlockDrops[\"getDrops\"]> = []\n        let totalXp = 0\n\n        while (\n          blockList.size > 0 &&\n          (!playerOption.getItemVal(\"prevent_tool_destruction\") ||\n            (playerOption.getItemVal(\"prevent_tool_destruction\") &&\n              totalDamage <\n                // @ts-ignore\n                (wrappedItem.durability ?? Number.POSITIVE_INFINITY)))\n        ) {\n          const block = blockList.shift()\n\n          if (!block) throw new Error(\"Unexpected error.\")\n\n          const result = await asyncRun(() => block.breakBy(mainHandItem))\n\n          totalDamage += result.getTotalDamage()\n\n          if (playerOption.getItemVal(\"auto_collection\")) {\n            each(result.drops, (drop) => {\n              if (drop.xp) totalXp += drop.xp\n\n              totalItems.push(drop)\n            })\n          } else {\n            result.spawnDrops()\n          }\n        }\n\n        if (playerOption.getItemVal(\"auto_collection\")) {\n          each(totalItems, ({ itemId, amount }) =>\n            player.inventory.addItem(new ItemStack(itemId, amount))\n          )\n          player.addExperience(totalXp)\n        }\n\n        if (wrappedItem instanceof ItemStackWithDurability)\n          wrappedItem.applyDamage(totalDamage)\n\n        return wrappedItem._item\n      })\n      .catch(BetterConsole.error)\n  })\n\nfunction getNeighbourBlocks(\n  playerOption: PlayerOption,\n  basicBlock: WrappedBlock,\n  blockTypeId: MinecraftBlockTypes\n) {\n  const offsets = [\n    new BlockLocation(1, 0, 0),\n    new BlockLocation(-1, 0, 0),\n    new BlockLocation(0, 0, 1),\n    new BlockLocation(0, 0, -1),\n    new BlockLocation(0, 1, 0),\n    new BlockLocation(0, -1, 0),\n  ]\n\n  if (playerOption.getItemVal(\"enable_edge\")) {\n    offsets.push(\n      new BlockLocation(1, 1, 0),\n      new BlockLocation(1, -1, 0),\n      new BlockLocation(-1, 1, 0),\n      new BlockLocation(-1, -1, 0),\n      new BlockLocation(0, 1, 1),\n      new BlockLocation(0, -1, 1),\n      new BlockLocation(0, 1, -1),\n      new BlockLocation(0, -1, -1),\n      new BlockLocation(1, 0, 1),\n      new BlockLocation(1, 0, -1),\n      new BlockLocation(-1, 0, 1),\n      new BlockLocation(-1, 0, -1)\n    )\n  }\n\n  if (playerOption.getItemVal(\"enable_diagonal\")) {\n    offsets.push(\n      new BlockLocation(-1, -1, -1),\n      new BlockLocation(-1, 1, -1),\n      new BlockLocation(-1, -1, 1),\n      new BlockLocation(-1, 1, 1),\n      new BlockLocation(1, -1, -1),\n      new BlockLocation(1, 1, -1),\n      new BlockLocation(1, -1, 1),\n      new BlockLocation(1, 1, 1)\n    )\n  }\n\n  const list = new BlockList<WrappedBlock>()\n\n  each(offsets, (offset) => {\n    const block = basicBlock.getOffsetBlock(offset)\n    if (block.typeId === blockTypeId) list.add(block)\n  })\n\n  return list\n}\n\nfunction getRelatedBlocks(\n  playerOption: PlayerOption,\n  basicBlock: WrappedBlock,\n  blockTypeId: MinecraftBlockTypes\n) {\n  const maxAmount = playerOption.getItemVal(\"max_amount\")\n\n  const list = new BlockList<WrappedBlock>()\n  list.add(...getNeighbourBlocks(playerOption, basicBlock, blockTypeId))\n\n  let previousSize = 0\n  let currentSize = list.size\n\n  while (currentSize < maxAmount && currentSize - previousSize > 0) {\n    for (const block of list) {\n      list.add(...getNeighbourBlocks(playerOption, block, blockTypeId))\n      previousSize = currentSize\n      currentSize = list.size\n\n      if (currentSize >= maxAmount) break\n    }\n  }\n\n  return list\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","prototype","toString","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","x","get","set","y","z","w","create","vector","Error","vectorStr","split","Number","toPrimitive","toArray","hint","axes","dimensions","index","constructor","VectorNUtils","clone","_assertDimensions","add","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","TypeGroup","types","type","has","WOODEN_DOORS","COPPER_DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","LOGS","STEMS","ORES","STONES","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","ItemComponentTypes","Enchantable","itemStack","typeId","getComponents","component","ItemStackWithDurability","damage","Durability","maxDurability","durability","applyDamage","unbreakingLevel","getEnchantment","level","probability","getDamageChance","TypeError","FortuneRules","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","Ore","Melon","acacia_log","acaciaLog","amethyst_block","amethystBlock","amethyst_cluster","amethystCluster","ancient_debris","ancientDebris","birch_log","birchLog","cherry_log","cherryLog","coal_ore","coalOre","copper_ore","copperOre","crimson_stem","crimsonStem","dark_oak_log","darkOakLog","deepslate","deepslate_coal_ore","deepslateCoalOre","deepslate_copper_ore","deepslateCopperOre","deepslate_diamond_ore","deepslateDiamondOre","deepslate_emerald_ore","deepslateEmeraldOre","deepslate_gold_ore","deepslateGoldOre","deepslate_iron_ore","deepslateIronOre","deepslate_lapis_ore","deepslateLapisOre","deepslate_redstone_ore","deepslateRedstoneOre","diamond_ore","diamondOre","emerald_ore","emeraldOre","gold_ore","goldOre","iron_ore","ironOre","jungle_log","jungleLog","lapis_ore","lapisOre","mangrove_log","mangroveLog","nether_gold_ore","netherGoldOre","oak_log","oakLog","obsidian","quartz_ore","quartzOre","redstone_ore","redstoneOre","spruce_log","spruceLog","stone","warped_stem","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","defaultRange","max_amount","DropItemGroup","group","e","BlockDrops","getDropConfig","useItem","find","digBy","getDrops","withFortune","withSilkTouch","immature","immatureResource","blockItem","fortuneRule","undefined","rawResource","lootTable","Grass","Flower","Crop","distribution","seedResource","Custom","custumLootTables","customItemDrop","blockTypeId","BlockDefinition","dropConfig","BlockPermutation","getItemStack","refinedResource","seed","option","custom","WrappedBlock","getOffsetBlock","location","dimension","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","hasEnchantment","spawnDrops","drop","spawnItem","ItemStack","spawnEntity","getTotalDamage","block","BlockList","size","blocks","some","shift","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Dimension","Entity","runCommand","customCommands","filter","regex","test","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","WrappedContainer","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","useMainHandItem","useXpOrb","xpAmount","addLevels","ENABLE_BLOCKS","BlockTypeGroups","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","digestbytes","asBytes","asString","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","_","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","playerOption","OptionManager","registerNamesapace","namespaces","getNamesapace","namespace","ActionFormData","button","optionManager","changed","warn","setupListener","playerBreakBlock","basicBlock","brokenBlockPermutation","enableBlocks","mainHandItem","blockList","getRelatedBlocks","wrappedItem","totalDamage","totalItems","totalXp","getNeighbourBlocks","offsets","list","previousSize","currentSize","then"],"mappings":"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","x_google_ignoreList":[66,67,68,69]}