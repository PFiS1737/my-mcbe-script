{"version":3,"file":"vein-mining.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/lib/wrapper/item/ItemStackWithDurability.class.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/BlockList.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/Container.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/script/vein-mining/config.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/vein-mining/option.ts","../src/script/vein-mining/event.ts","../src/script/vein-mining/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport function serialize(obj): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport const AsyncFunction = (async () => {}).constructor\nexport function isAsyncFunc(func) {\n  return func[Symbol.toStringTag] === \"AsyncFunction\"\n}\n\nexport function arraySample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function arrayAt(arr, index) {\n  return index >= 0 ? arr[index] : arr[arr.length + index]\n}\n\nexport function toCamelCase(str) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","export function round(n) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p) {\n  return Math.random() <= p\n}\n\nexport function equals(a, b, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n) {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a, b, n) {\n  return (k) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n, p) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from, to, fn) {\n  let output = 0\n  for (let k = from; k <= to; k++) output += fn(k)\n  return output\n}\n\nexport function range(from, to, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN {\n  /**\n   * Create a vector.\n   * @param {...number} axes - The axes of the vector.\n   */\n  constructor(...axes) {\n    this.axes = axes\n  }\n\n  /**\n   * Create a vector.\n   * @param {Array<number>|string} vector - The vector wrote in array or string.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param {string} vectorStr - The string to parse.\n   * @returns {VectorN} The vector.\n   */\n  static parse(vectorStr) {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns {string} The string representation of the vector.\n   */\n  stringify() {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns {Array<number>} The array representation of the vector.\n   */\n  toArray() {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param {string} hint - The type hint.\n   * @returns {string|VectorN} The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns {Iterator<number>} The iterator for the axes.\n   */\n  [Symbol.iterator]() {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns {number} The number of dimensions.\n   */\n  get dimensions() {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @returns {number} The component value.\n   */\n  get(index) {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @param {number} value - The value to set.\n   */\n  set(index, value) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {VectorN} The new vector.\n   */\n  map(callbackfn) {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { binomial, equals, round, sum } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param {Array<number>} vector - The vector write in array.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param {VectorN} a - The vector to clone.\n   * @returns {VectorN} The cloned vector.\n   */\n  static clone(a) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a, b) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static add(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static subtract(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static multiply(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static divide(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param {VectorN} a - The vector to scale.\n   * @param {number} n - The scalar value.\n   * @returns {VectorN} The resulting vector.\n   */\n  static scale(a, n) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param {VectorN} a - The vector to negate.\n   * @returns {VectorN} The resulting vector.\n   */\n  static negate(a) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param {VectorN} a - The vector to invert.\n   * @returns {VectorN} The resulting vector.\n   */\n  static inverse(a) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @param {number} axis1 - The first axis to exchange.\n   * @param {number} axis2 - The second axis to exchange\n   * @returns {VectorN} The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a, axis1, axis2) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static max(...vectors) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static min(...vectors) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static floor(a) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static ceil(a) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static round(a) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static abs(a) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the magnitude of.\n   * @returns {number} The magnitude of the vector.\n   */\n  static magnitude(a) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the squared magnitude of.\n   * @returns {number} The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The distance between the vectors.\n   */\n  static distance(a, b) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The squared distance between the vectors.\n   */\n  static squaredDistance(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The dot product of the vectors.\n   */\n  static dot(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param {VectorN} a - The vector to normalize.\n   * @returns {VectorN} The normalized vector.\n   */\n  static normalize(a) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The angle between the vectors in radians.\n   */\n  static angle(a, b) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param {number} dimensions - The number of dimensions.\n   * @param {number} [scale=1] - The scale of the random components.\n   * @returns {VectorN} The random vector.\n   */\n  static random(dimensions, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static lerp(a, b, t) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static slerp(a, b, t) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param {VectorN[]} points - The control points.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static bezier(points, t) {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @returns {Vector3} The cross product of the vectors.\n   */\n  static cross(a, b) {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param {number} x - The x axis.\n   * @param {number} y - The y axis.\n   * @param {number} z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {Vector3} The new vector.\n   */\n  map(callbackfn) {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import { Vector3, Vector3Utils } from \"../vector/index\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v, distance) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v) {\n    return this.add(v)\n  }\n}\n","import { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction) {\n    return Location.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(a, b, s = 1) {\n    const output = []\n    for (let x = a.x; x <= b.x; x += s) {\n      for (let y = a.y; y <= b.y; y += s) {\n        for (let z = a.z; z <= b.z; z += s) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","import { LocationUtils } from \"./LocationUtils.class\"\n\nimport { Location } from \"./Location.class\"\n\nexport class BlockLocation extends Location {\n  constructor(x, y, z) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  // @ts-ignore\n  get centerCorrected() {\n    throw new Error('Couldn\\'t get \"centerCorrected\" on BlockLocation.')\n  }\n\n  // @ts-ignore\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n\n  divide(v) {\n    super.divide(v)\n    return this.floor()\n  }\n  // @ts-ignore\n  inverse() {\n    throw new Error('Couldn\\'t call \"inverse\" on BlockLocation.')\n  }\n\n  between(v) {\n    return LocationUtils.between(this, v)\n  }\n}\n","import { system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms) =>\n  // @ts-ignore\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun(fn) {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText, target) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn() {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id, name) {\n  const objective = world.scoreboard.getObjective(id)\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  constructor(directionCode) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup {\n  constructor(types) {\n    this.types = new Set(types)\n  }\n\n  add(...types) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  constructor(itemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  components = new Map()\n\n  hasComponent(componentId) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\"enchantable\")\n  }\n}\n","import { withProbability } from \"../../util/math\"\nimport { WrappedItemStack } from \"./WrappedItemStack.class\"\n\nexport class ItemStackWithDurability extends WrappedItemStack {\n  constructor(itemStack) {\n    if (!ItemStackWithDurability.match(itemStack))\n      throw new TypeError(\n        `The \"${itemStack.typeId}\" doesn't have the \"minecraft:durability\" component.`\n      )\n\n    super(itemStack)\n  }\n\n  static match(itemStack) {\n    return itemStack.hasComponent(\"minecraft:durability\")\n  }\n\n  get damage() {\n    return this.components.get(\"durability\").damage\n  }\n  set damage(value) {\n    this.components.get(\"durability\").damage = value < 0 ? 0 : value\n  }\n  get maxDurability() {\n    return this.components.get(\"durability\").maxDurability\n  }\n  get durability() {\n    return this.maxDurability - this.damage\n  }\n  set durability(value) {\n    this.damage += this.durability - value\n  }\n\n  applyDamage(damage) {\n    const unbreakingLevel = this.enchants.hasEnchantment(\"unbreaking\")\n    const probability =\n      this.components.get(\"durability\").getDamageChance(unbreakingLevel) / 100\n\n    for (let i = 0; i < damage; i++) {\n      if (withProbability(probability)) this.durability -= 1\n    }\n\n    return this\n  }\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n}\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n    \"acacia_log\": acaciaLog,\n    \"amethyst_block\": amethystBlock,\n    \"amethyst_cluster\": amethystCluster,\n    \"ancient_debris\": ancientDebris,\n    \"birch_log\": birchLog,\n    \"cherry_log\": cherryLog,\n    \"coal_ore\": coalOre,\n    \"copper_ore\": copperOre,\n    \"crimson_stem\": crimsonStem,\n    \"dark_oak_log\": darkOakLog,\n    \"deepslate\": deepslate,\n    \"deepslate_coal_ore\": deepslateCoalOre,\n    \"deepslate_copper_ore\": deepslateCopperOre,\n    \"deepslate_diamond_ore\": deepslateDiamondOre,\n    \"deepslate_emerald_ore\": deepslateEmeraldOre,\n    \"deepslate_gold_ore\": deepslateGoldOre,\n    \"deepslate_iron_ore\": deepslateIronOre,\n    \"deepslate_lapis_ore\": deepslateLapisOre,\n    \"deepslate_redstone_ore\": deepslateRedstoneOre,\n    \"diamond_ore\": diamondOre,\n    \"emerald_ore\": emeraldOre,\n    \"gold_ore\": goldOre,\n    \"iron_ore\": ironOre,\n    \"jungle_log\": jungleLog,\n    \"lapis_ore\": lapisOre,\n    \"mangrove_log\": mangroveLog,\n    \"nether_gold_ore\": netherGoldOre,\n    \"oak_log\": oakLog,\n    \"obsidian\": obsidian,\n    \"quartz_ore\": quartzOre,\n    \"redstone_ore\": redstoneOre,\n    \"spruce_log\": spruceLog,\n    \"stone\": stone,\n    \"warped_stem\": warpedStem\n}\n","import { range } from \"./util/math\"\n\nexport class NumberRange {\n  constructor(min, max, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport class LootTable {\n  constructor(items) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set()\n  totalWeight = 0\n\n  addItem(item) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import { BlockPermutation } from \"@minecraft/server\"\n\n// @ts-ignore\nimport BlockDefinition from \"@/data/block/index\"\n\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\n\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  constructor({\n    // @ts-ignore\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  } = {}) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult() {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  constructor(group) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output = []\n    each(this.items, (item) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport const FORTUNE_RULES = {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  ore: \"ore\",\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  melon: \"melon\",\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  grass: \"grass\",\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  flower: \"flower\",\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  crop: \"crop\",\n  // 使用自定义的战利品表\n  custom: \"custom\",\n}\n\nexport class BlockDrops {\n  constructor(blockTypeId, useItem) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    if (useItem) this.setItemUse(useItem)\n  }\n\n  setItemUse(useItem = \"<empty>\") {\n    const dropConfig =\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n\n    if (!dropConfig) {\n      // throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n      return false\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId,\n    })\n    this.rawResource = new DropItem(dropConfig.raw) ?? this.blockItem\n\n    // for ore like\n    this.refinedResource = new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seendResource = new DropItem(dropConfig.seed) ?? this.rawResource\n    this.immatureResource =\n      new DropItem(dropConfig.immature) ?? this.seendResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FORTUNE_RULES.custom) {\n      this.custumLootTable = dropConfig.option?.custom\n      if (!this.custumLootTable)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n    }\n\n    return true\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FORTUNE_RULES.ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FORTUNE_RULES.flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seendResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FORTUNE_RULES.custom: {\n          const lootTable = new LootTable(this.custumLootTable[level])\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n      // biome-ignore lint/style/noUselessElse: <explanation>\n    } else {\n      return this.rawResource.getResult()\n    }\n  }\n}\n","import {\n  BlockPermutation,\n  BlockVolume,\n  ItemStack as MinecraftItemStack,\n} from \"@minecraft/server\"\n\nimport { BlockLocation, LocationUtils } from \"../../location/index\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nimport { WrappedItemStack } from \"../item/index\"\n\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  constructor(block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v) {\n    // @ts-ignore\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name) {\n    return this.permutation.getState(name)\n  }\n  hasState(name) {\n    return !!this.getState(name)\n  }\n  setState(name, value) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId = \"<empty>\") {\n    return new BlockDrops(this.typeId).setItemUse(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack) {\n    const drops = new BlockDrops(this.typeId, useItemStack?.typeId ?? \"<empty>\")\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.hasEnchantment(\"fortune\")\n            ? item.enchants.getEnchantment(\"fortune\").level\n            : 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new MinecraftItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import { each } from \"../../util/index\"\nimport { Vector3Utils } from \"../../vector/index\"\n\nexport class BlockList {\n  constructor(blocks) {\n    if (blocks) this.add(...blocks)\n  }\n\n  blocks = []\n\n  get size() {\n    return this.blocks.length\n  }\n\n  add(...blocks) {\n    each(blocks, (block) => {\n      if (!this.has(block)) this.blocks.push(block)\n    })\n  }\n  has(block) {\n    return this.blocks.some(({ location }) =>\n      Vector3Utils.exactEquals(location, block.location)\n    )\n  }\n\n  shift() {\n    return this.blocks.shift()\n  }\n\n  [Symbol.iterator]() {\n    return this.blocks.values()\n  }\n}\n","import { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  components = new Map()\n\n  constructor(entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  world,\n} from \"@minecraft/server\"\n\n// import { Parser } from \"mcbe-command-parser\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set()\n\nexport class Commands {\n  static run(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(prefix, command, /* grammar, */ callback) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner = async (commandString, target) => {\n      // callback(new Parser(commandString, grammar), target)\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class Container extends WrapperTemplate {\n  constructor(container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot, itemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import { Container } from \"./Container.class\"\n\nexport class EntityContainer extends Container {\n  constructor(entity, container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import { GameMode } from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  constructor(player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(slot, callback = async (_) => {}) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(callback = async () => {}) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}) {\n    if (useXpOrb && amount >= 0) {\n      while (amount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { TypeGroup } from \"@/lib/wrapper/TypeGroup.class\"\nimport { BlockTypeGroups } from \"@/lib/wrapper/block/index\"\n\nexport const ENABLE_BLOCKS = new TypeGroup([\n  ...BlockTypeGroups.LOGS,\n  ...BlockTypeGroups.STEMS,\n  ...BlockTypeGroups.ORES,\n  \"minecraft:obsidian\",\n  \"minecraft:ancient_debris\",\n  \"minecraft:amethyst_block\",\n])\n","import {\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\nexport class Dialog {\n  static async confirm({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => {},\n    onConfirm = async () => {},\n  }) {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  constructor({\n    dialog,\n    onClose = async () => {},\n    onSubmit = async (_) => {},\n    onSelectButton1 = async () => {},\n    onSelectButton2 = async () => {},\n    onSelect = async (_) => {},\n  }) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n  async show(target) {\n    let response\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n\n    return response\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { deserialize, each, eachAsync, serialize } from \"../util/index\"\n\nexport const ALL_DATABASES = new Map()\n\nexport class Database {\n  static open(player, dbName) {\n    return new Database(player, dbName)\n  }\n  constructor(player, dbName) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName)\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key) {\n    return this.store.has(key)\n  }\n  async delete(key) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key) {\n    if (this.has(key)) return this.store.get(key).value\n  }\n  async set(key, value) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries() {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys() {\n    for (const key of this.store.keys()) yield key\n  }\n  *values() {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName, listener) {\n    if (this._events[eventName]) {\n      const newListeners = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName, ...args) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName, ...args) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName, listener) {\n    return this.on(eventName, listener)\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport class OptionItemRange {\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(n) {\n    return this.range.includes(n)\n  }\n}\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport class OptionItemSelection {\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(name) {\n    return this.values.has(name) || !this.values.size\n  }\n}\n","import { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { each, eachAsync } from \"../util/index\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionItemRange } from \"./OptionItemRange.class\"\nimport { OptionItemSelection } from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  constructor(player, name) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items = {}\n\n  addItem(opts) {\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = undefined\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name) {\n    return this.items[name]\n  }\n  hasItem(name) {\n    return !!this.items[name]\n  }\n  setItemVal(\n    name,\n    value,\n    callback = (_, __, ___) => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\n\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  constructor(name) {\n    this.name = name\n  }\n\n  players = new Map()\n  _items = new Set()\n\n  addItem(opts) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = undefined\n    return valueMap\n  }\n\n  getPlayer(player) {\n    return this.players.get(player)\n  }\n}\n","import { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { each } from \"../util/index\"\n\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map()\n\n  registerNamesapace(name) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name) {\n    return this.namespaces.get(name)\n  }\n  async showDialog(player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\n\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"vein-mining\")\n  .addItem({\n    name: \"condition\",\n    description: \"触发条件\",\n    values: [\n      [\"off\", \"关闭\"],\n      [\"always\", \"总是\"],\n      [\"sneaking\", \"仅潜行时\"],\n    ],\n    defaultValue: \"sneaking\",\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"vein-mining:tigger -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_amount\",\n    description: \"最多检测的方块数量（并非最终挖掘的方块数）\",\n    range: [8, 128],\n    defaultValue: 64,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_stone\",\n    description: \"允许连锁挖掘岩石类方块（石头、深板岩）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_stone -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"auto_collection\",\n    description: \"自动收集掉落物及经验（绕过经验修补）\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:auto_collect_drops -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"prevent_tool_destruction\",\n    description: \"防止工具耐久耗尽\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:prevent_tool_destruction -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_edge\",\n    description: \"是否检测仅棱相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_edge -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"enable_diagonal\",\n    description: \"是否检测仅角相连的方块\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"vein-mining:enable_diagonal -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { ItemStack, world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { BlockLocation } from \"@/lib/location/index\"\nimport {\n  BlockList,\n  BlockTypeGroups,\n  WrappedBlock,\n} from \"@/lib/wrapper/block/index\"\nimport { WrappedPlayer } from \"@/lib/wrapper/entity/index\"\nimport {\n  ItemStackWithDurability,\n  WrappedItemStack,\n} from \"@/lib/wrapper/item/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { ENABLE_BLOCKS } from \"./config\"\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.afterEvents.playerBreakBlock.subscribe((event) => {\n    const basicBlock = new WrappedBlock(event.block)\n    const blockTypeId = event.brokenBlockPermutation.type.id\n    const player = new WrappedPlayer(event.player)\n    const playerOption = option.getPlayer(event.player)\n\n    let enableBlocks = ENABLE_BLOCKS\n    if (playerOption.getItemVal(\"enable_stone\"))\n      enableBlocks = ENABLE_BLOCKS.clone().add(...BlockTypeGroups.STONES)\n\n    player\n      .useMainHandItem(async (mainHandItem) => {\n        if (\n          !mainHandItem ||\n          !enableBlocks.has(blockTypeId) ||\n          !WrappedBlock.prototype.canBeDugBy.call(\n            { typeId: blockTypeId },\n            mainHandItem.typeId\n          ) ||\n          playerOption.getItemVal(\"condition\") === \"off\" ||\n          (playerOption.getItemVal(\"condition\") === \"sneaking\" &&\n            !player.isSneaking)\n        )\n          return mainHandItem\n\n        const blockList = getRelatedBlocks(\n          playerOption,\n          basicBlock,\n          blockTypeId\n        )\n\n        const wrappedItem =\n          ItemStackWithDurability.tryWrap(mainHandItem) ??\n          new WrappedItemStack(mainHandItem)\n\n        let totalDamage = 0\n\n        const totalItems = []\n        let totalXp = 0\n\n        while (\n          blockList.size > 0 &&\n          (!playerOption.getItemVal(\"prevent_tool_destruction\") ||\n            (playerOption.getItemVal(\"prevent_tool_destruction\") &&\n              totalDamage <\n                // @ts-ignore\n                (wrappedItem.durability ?? Number.POSITIVE_INFINITY)))\n        ) {\n          const block = blockList.shift()\n\n          const result = await asyncRun(() => block.breakBy(mainHandItem))\n\n          totalDamage += result.getTotalDamage()\n\n          if (playerOption.getItemVal(\"auto_collection\")) {\n            each(result.drops, (drop) => {\n              if (drop.xp) totalXp += drop.xp\n              totalItems.push(drop)\n            })\n          } else {\n            result.spawnDrops()\n          }\n        }\n\n        if (playerOption.getItemVal(\"auto_collection\")) {\n          each(totalItems, ({ itemId, amount }) =>\n            player.inventory.addItem(new ItemStack(itemId, amount))\n          )\n          player.addExperience(totalXp)\n        }\n\n        if (wrappedItem instanceof ItemStackWithDurability)\n          wrappedItem.applyDamage(totalDamage)\n\n        // @ts-ignore\n        return wrappedItem._item\n      })\n      .catch(BetterConsole.error)\n  })\n\nfunction getNeighbourBlocks(playerOption, basicBlock, blockTypeId) {\n  const offsets = [\n    new BlockLocation(1, 0, 0),\n    new BlockLocation(-1, 0, 0),\n    new BlockLocation(0, 0, 1),\n    new BlockLocation(0, 0, -1),\n    new BlockLocation(0, 1, 0),\n    new BlockLocation(0, -1, 0),\n  ]\n\n  if (playerOption.getItemVal(\"enable_edge\")) {\n    offsets.push(\n      new BlockLocation(1, 1, 0),\n      new BlockLocation(1, -1, 0),\n      new BlockLocation(-1, 1, 0),\n      new BlockLocation(-1, -1, 0),\n      new BlockLocation(0, 1, 1),\n      new BlockLocation(0, -1, 1),\n      new BlockLocation(0, 1, -1),\n      new BlockLocation(0, -1, -1),\n      new BlockLocation(1, 0, 1),\n      new BlockLocation(1, 0, -1),\n      new BlockLocation(-1, 0, 1),\n      new BlockLocation(-1, 0, -1)\n    )\n  }\n\n  if (playerOption.getItemVal(\"enable_diagonal\")) {\n    offsets.push(\n      new BlockLocation(-1, -1, -1),\n      new BlockLocation(-1, 1, -1),\n      new BlockLocation(-1, -1, 1),\n      new BlockLocation(-1, 1, 1),\n      new BlockLocation(1, -1, -1),\n      new BlockLocation(1, 1, -1),\n      new BlockLocation(1, -1, 1),\n      new BlockLocation(1, 1, 1)\n    )\n  }\n\n  const list = new BlockList()\n\n  each(offsets, (offset) => {\n    const block = basicBlock.getOffsetBlock(offset)\n    if (block.typeId === blockTypeId) list.add(block)\n  })\n\n  return list\n}\n\nfunction getRelatedBlocks(playerOption, basicBlock, blockTypeId) {\n  const maxAmount = playerOption.getItemVal(\"max_amount\")\n\n  const list = new BlockList()\n  list.add(...getNeighbourBlocks(playerOption, basicBlock, blockTypeId))\n\n  let previousSize = 0\n  let currentSize = list.size\n\n  while (currentSize < maxAmount && currentSize - previousSize > 0) {\n    for (const block of list) {\n      list.add(...getNeighbourBlocks(playerOption, block, blockTypeId))\n      previousSize = currentSize\n      currentSize = list.size\n\n      if (currentSize >= maxAmount) break\n    }\n  }\n\n  return list\n}\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","toStringTag","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","create","vector","vectorStr","split","Number","toPrimitive","toArray","hint","axes","dimensions","get","index","set","constructor","VectorNUtils","clone","_assertDimensions","Error","add","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","y","z","x","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","s","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","toString","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","TypeGroup","types","type","has","WOODEN_DOORS","COPPER_DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","LOGS","STEMS","ORES","STONES","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","itemStack","typeId","getComponents","component","ItemStackWithDurability","damage","maxDurability","durability","applyDamage","unbreakingLevel","hasEnchantment","probability","getDamageChance","TypeError","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","acaciaLog","amethystBlock","amethystCluster","ancientDebris","birchLog","cherryLog","coalOre","copperOre","crimsonStem","darkOakLog","deepslate","deepslateCoalOre","deepslateCopperOre","deepslateDiamondOre","deepslateEmeraldOre","deepslateGoldOre","deepslateIronOre","deepslateLapisOre","deepslateRedstoneOre","diamondOre","emeraldOre","goldOre","ironOre","jungleLog","lapisOre","mangroveLog","netherGoldOre","oakLog","obsidian","quartzOre","redstoneOre","spruceLog","stone","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","defaultRange","max_amount","DropItemGroup","group","e","FORTUNE_RULES","ore","melon","grass","flower","crop","custom","BlockDrops","setItemUse","useItem","dropConfig","find","digBy","blockItem","BlockPermutation","blockTypeId","getItemStack","rawResource","refinedResource","seendResource","seed","immatureResource","immature","fortuneRule","custumLootTable","option","getDrops","withFortune","withSilkTouch","level","lootTable","distribution","customItemDrop","BlockDefinition","WrappedBlock","getOffsetBlock","location","dimension","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","getEnchantment","spawnDrops","drop","spawnItem","MinecraftItemStack","spawnEntity","getTotalDamage","block","BlockList","size","blocks","some","shift","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Dimension","Entity","runCommand","customCommands","filter","regex","test","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","Container","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","_","useMainHandItem","useXpOrb","addLevels","ENABLE_BLOCKS","BlockTypeGroups","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","prototype","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","ALL_DATABASES","Database","open","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","_defaultValue","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","__","___","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","OptionManager","registerNamesapace","namespaces","getNamesapace","ActionFormData","button","optionManager","changed","warn","setupListener","playerBreakBlock","basicBlock","brokenBlockPermutation","playerOption","enableBlocks","mainHandItem","blockList","getRelatedBlocks","wrappedItem","totalDamage","totalItems","totalXp","ItemStack","getNeighbourBlocks","offsets","list","previousSize","currentSize","then"],"mappings":"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","x_google_ignoreList":[65,66,67,68]}