{"version":3,"file":"better-door.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/WrappedBlocks.class.ts","../src/lib/wrapper/block/DoorBlock.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/Container.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/lib/wrapper/block/TrapdoorBlock.class.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js","../node_modules/.pnpm/serialize-javascript@6.0.2/node_modules/serialize-javascript/index.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/better-door/option.ts","../src/script/better-door/event.ts","../src/script/better-door/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport function deserialize(str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport const AsyncFunction = (async () => {}).constructor\nexport function isAsyncFunc(func) {\n  return func[Symbol.toStringTag] === \"AsyncFunction\"\n}\n\nexport function arraySample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function arrayAt(arr, index) {\n  return index >= 0 ? arr[index] : arr[arr.length + index]\n}\n\nexport function toCamelCase(str) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup {\n  constructor(types) {\n    this.types = new Set(types)\n  }\n\n  add(...types) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export function round(n) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p) {\n  return Math.random() <= p\n}\n\nexport function equals(a, b, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n) {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n, k) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a, b, n) {\n  return (k) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n, p) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from, to, fn) {\n  let output = 0\n  for (let k = from; k <= to; k++) output += fn(k)\n  return output\n}\n\nexport function range(from, to, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN {\n  /**\n   * Create a vector.\n   * @param {...number} axes - The axes of the vector.\n   */\n  constructor(...axes) {\n    this.axes = axes\n  }\n\n  /**\n   * Create a vector.\n   * @param {Array<number>|string} vector - The vector wrote in array or string.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param {string} vectorStr - The string to parse.\n   * @returns {VectorN} The vector.\n   */\n  static parse(vectorStr) {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns {string} The string representation of the vector.\n   */\n  stringify() {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns {Array<number>} The array representation of the vector.\n   */\n  toArray() {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param {string} hint - The type hint.\n   * @returns {string|VectorN} The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns {Iterator<number>} The iterator for the axes.\n   */\n  [Symbol.iterator]() {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns {number} The number of dimensions.\n   */\n  get dimensions() {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @returns {number} The component value.\n   */\n  get(index) {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param {number} index - The index of the component.\n   * @param {number} value - The value to set.\n   */\n  set(index, value) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {VectorN} The new vector.\n   */\n  map(callbackfn) {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { binomial, equals, round, sum } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param {Array<number>} vector - The vector write in array.\n   * @returns {VectorN} The vector.\n   */\n  static create(vector) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param {VectorN} a - The vector to clone.\n   * @returns {VectorN} The cloned vector.\n   */\n  static clone(a) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a, b) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static add(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static subtract(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static multiply(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {VectorN} The resulting vector.\n   */\n  static divide(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param {VectorN} a - The vector to scale.\n   * @param {number} n - The scalar value.\n   * @returns {VectorN} The resulting vector.\n   */\n  static scale(a, n) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param {VectorN} a - The vector to negate.\n   * @returns {VectorN} The resulting vector.\n   */\n  static negate(a) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param {VectorN} a - The vector to invert.\n   * @returns {VectorN} The resulting vector.\n   */\n  static inverse(a) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @param {number} axis1 - The first axis to exchange.\n   * @param {number} axis2 - The second axis to exchange\n   * @returns {VectorN} The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a, axis1, axis2) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {boolean} True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static max(...vectors) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The resulting vector.\n   */\n  static min(...vectors) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static floor(a) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static ceil(a) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static round(a) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param {VectorN} a - The vector to modify.\n   * @returns {VectorN} The resulting vector.\n   */\n  static abs(a) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param {...VectorN} vectors - The vectors to compare.\n   * @returns {VectorN} The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the magnitude of.\n   * @returns {number} The magnitude of the vector.\n   */\n  static magnitude(a) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param {VectorN} a - The vector to calculate the squared magnitude of.\n   * @returns {number} The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The distance between the vectors.\n   */\n  static distance(a, b) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The squared distance between the vectors.\n   */\n  static squaredDistance(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The dot product of the vectors.\n   */\n  static dot(a, b) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param {VectorN} a - The vector to normalize.\n   * @returns {VectorN} The normalized vector.\n   */\n  static normalize(a) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @returns {number} The angle between the vectors in radians.\n   */\n  static angle(a, b) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param {number} dimensions - The number of dimensions.\n   * @param {number} [scale=1] - The scale of the random components.\n   * @returns {VectorN} The random vector.\n   */\n  static random(dimensions, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static lerp(a, b, t) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param {VectorN} a - The first vector.\n   * @param {VectorN} b - The second vector.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static slerp(a, b, t) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param {VectorN[]} points - The control points.\n   * @param {number} t - The interpolation parameter.\n   * @returns {VectorN} The interpolated vector.\n   */\n  static bezier(points, t) {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @returns {Vector3} The cross product of the vectors.\n   */\n  static cross(a, b) {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param {number} x - The x axis.\n   * @param {number} y - The y axis.\n   * @param {number} z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n\n  /**\n   * @param {Array<number>|string|{x:number,y:number,z:number}} vector - The vector write in array.\n   * @returns {Vector3} The vector.\n   */\n  static create(vector) {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param {function(number, number): number} callbackfn - The function to apply.\n   * @returns {Vector3} The new vector.\n   */\n  map(callbackfn) {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import { Vector3, Vector3Utils } from \"../vector/index\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v, distance) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v) {\n    return this.add(v)\n  }\n}\n","import { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction) {\n    return Location.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(a, b, s = 1) {\n    const output = []\n    for (let x = a.x; x <= b.x; x += s) {\n      for (let y = a.y; y <= b.y; y += s) {\n        for (let z = a.z; z <= b.z; z += s) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","import { LocationUtils } from \"./LocationUtils.class\"\n\nimport { Location } from \"./Location.class\"\n\nexport class BlockLocation extends Location {\n  constructor(x, y, z) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  // @ts-ignore\n  get centerCorrected() {\n    throw new Error('Couldn\\'t get \"centerCorrected\" on BlockLocation.')\n  }\n\n  // @ts-ignore\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n\n  divide(v) {\n    super.divide(v)\n    return this.floor()\n  }\n  // @ts-ignore\n  inverse() {\n    throw new Error('Couldn\\'t call \"inverse\" on BlockLocation.')\n  }\n\n  between(v) {\n    return LocationUtils.between(this, v)\n  }\n}\n","import { system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms) =>\n  // @ts-ignore\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun(fn) {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText, target) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn() {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id, name) {\n  const objective = world.scoreboard.getObjective(id)\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","export class Direction {\n  constructor(directionCode) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  constructor(itemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  components = new Map()\n\n  hasComponent(componentId) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\"enchantable\")\n  }\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: \"ore\",\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: \"melon\",\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n}\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n}\n","export default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n}\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n    \"acacia_log\": acaciaLog,\n    \"amethyst_block\": amethystBlock,\n    \"amethyst_cluster\": amethystCluster,\n    \"ancient_debris\": ancientDebris,\n    \"birch_log\": birchLog,\n    \"cherry_log\": cherryLog,\n    \"coal_ore\": coalOre,\n    \"copper_ore\": copperOre,\n    \"crimson_stem\": crimsonStem,\n    \"dark_oak_log\": darkOakLog,\n    \"deepslate\": deepslate,\n    \"deepslate_coal_ore\": deepslateCoalOre,\n    \"deepslate_copper_ore\": deepslateCopperOre,\n    \"deepslate_diamond_ore\": deepslateDiamondOre,\n    \"deepslate_emerald_ore\": deepslateEmeraldOre,\n    \"deepslate_gold_ore\": deepslateGoldOre,\n    \"deepslate_iron_ore\": deepslateIronOre,\n    \"deepslate_lapis_ore\": deepslateLapisOre,\n    \"deepslate_redstone_ore\": deepslateRedstoneOre,\n    \"diamond_ore\": diamondOre,\n    \"emerald_ore\": emeraldOre,\n    \"gold_ore\": goldOre,\n    \"iron_ore\": ironOre,\n    \"jungle_log\": jungleLog,\n    \"lapis_ore\": lapisOre,\n    \"mangrove_log\": mangroveLog,\n    \"nether_gold_ore\": netherGoldOre,\n    \"oak_log\": oakLog,\n    \"obsidian\": obsidian,\n    \"quartz_ore\": quartzOre,\n    \"redstone_ore\": redstoneOre,\n    \"spruce_log\": spruceLog,\n    \"stone\": stone,\n    \"warped_stem\": warpedStem\n}\n","import { range } from \"./util/math\"\n\nexport class NumberRange {\n  constructor(min, max, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport class LootTable {\n  constructor(items) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set()\n  totalWeight = 0\n\n  addItem(item) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import { BlockPermutation } from \"@minecraft/server\"\n\n// @ts-ignore\nimport BlockDefinition from \"@/data/block/index\"\n\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\n\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  constructor({\n    // @ts-ignore\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  } = {}) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult() {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  constructor(group) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output = []\n    each(this.items, (item) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport const FORTUNE_RULES = {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  ore: \"ore\",\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  melon: \"melon\",\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  grass: \"grass\",\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  flower: \"flower\",\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  crop: \"crop\",\n  // 使用自定义的战利品表\n  custom: \"custom\",\n}\n\nexport class BlockDrops {\n  constructor(blockTypeId, useItem) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    if (useItem) this.setItemUse(useItem)\n  }\n\n  setItemUse(useItem = \"<empty>\") {\n    const dropConfig =\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n\n    if (!dropConfig) {\n      // throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n      return false\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId,\n    })\n    this.rawResource = new DropItem(dropConfig.raw) ?? this.blockItem\n\n    // for ore like\n    this.refinedResource = new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seendResource = new DropItem(dropConfig.seed) ?? this.rawResource\n    this.immatureResource =\n      new DropItem(dropConfig.immature) ?? this.seendResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FORTUNE_RULES.custom) {\n      this.custumLootTable = dropConfig.option?.custom\n      if (!this.custumLootTable)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n    }\n\n    return true\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FORTUNE_RULES.ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FORTUNE_RULES.flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FORTUNE_RULES.crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seendResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FORTUNE_RULES.custom: {\n          const lootTable = new LootTable(this.custumLootTable[level])\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n      // biome-ignore lint/style/noUselessElse: <explanation>\n    } else {\n      return this.rawResource.getResult()\n    }\n  }\n}\n","import {\n  BlockPermutation,\n  BlockVolume,\n  ItemStack as MinecraftItemStack,\n} from \"@minecraft/server\"\n\nimport { BlockLocation, LocationUtils } from \"../../location/index\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nimport { WrappedItemStack } from \"../item/index\"\n\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  constructor(block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v) {\n    // @ts-ignore\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name) {\n    return this.permutation.getState(name)\n  }\n  hasState(name) {\n    return !!this.getState(name)\n  }\n  setState(name, value) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId = \"<empty>\") {\n    return new BlockDrops(this.typeId).setItemUse(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack) {\n    const drops = new BlockDrops(this.typeId, useItemStack?.typeId ?? \"<empty>\")\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.hasEnchantment(\"fortune\")\n            ? item.enchants.getEnchantment(\"fortune\").level\n            : 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new MinecraftItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class WrappedBlocks extends WrapperTemplate {\n  constructor(blocks) {\n    super()\n\n    this._blocks = (Array.isArray(blocks) ? blocks : [blocks]).map((block) => {\n      return block instanceof WrappedBlock // TODO: TypeError\n        ? block\n        : new WrappedBlock(block)\n    })\n  }\n\n  get _block() {\n    return this._blocks[0]\n  }\n\n  get type() {\n    return this._block.type\n  }\n  get typeId() {\n    return this._block.typeId\n  }\n  get location() {\n    return this._block.location\n  }\n  get dimension() {\n    return this._block.dimension\n  }\n  get permutation() {\n    return this._block.permutation\n  }\n}\n","import { BlockLocation, Directions } from \"../../location/index\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\nimport { WrappedBlocks } from \"./WrappedBlocks.class\"\n\nimport {\n  COPPER_DOORS,\n  DOORS,\n  WOODEN_DOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class DoorBlock extends WrappedBlocks {\n  constructor(block) {\n    DoorBlock.assert(block)\n\n    const wrappedBlock =\n      block instanceof WrappedBlock ? block : new WrappedBlock(block)\n\n    const isUpper = wrappedBlock.getState(\"upper_block_bit\")\n    const blocks = [\n      // _lower\n      isUpper ? wrappedBlock.getNeighbourBlock(Directions.Down) : wrappedBlock,\n      // _upper\n      isUpper ? wrappedBlock : wrappedBlock.getNeighbourBlock(Directions.Up),\n    ]\n\n    super(blocks)\n  }\n\n  static match(block) {\n    return DOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (DoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a door.`)\n  }\n\n  get _lower() {\n    return this._blocks[0]\n  }\n  get _upper() {\n    return this._blocks[1]\n  }\n\n  get opened() {\n    return this._lower.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // the direction you are facing when you place the door\n    const directionCode = this._lower.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 1:\n        return Directions.South\n      case 2:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get hingeSide() {\n    return this._upper.getState(\"door_hinge_bit\")\n    // true -> right\n    // false -> left\n  }\n\n  isWooden() {\n    return WOODEN_DOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_DOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this._lower.setState(\"open_bit\", true)\n  }\n  close() {\n    this._lower.setState(\"open_bit\", false)\n  }\n\n  getRelated({ shouldBeTheSameType = true } = {}) {\n    // 获取可以与该门双开的另一个门和这个门组成的列表\n    const output = [this]\n\n    // 1. 获取另一个门的位置\n    //    根据门的方向和门轴位置确定\n    // e.g. 如果一个门的朝向是东边，门轴在左边（即北边）\n    //      那么另一个门应该位于南边，即 z+1 的位置\n    const facingDirection = this.facingDirection\n    const hingeSide = this.hingeSide\n    const offset = BlockLocation.create({\n      x: Number(\n        facingDirection.isSouth()\n          ? hingeSide || -1\n          : facingDirection.isNorth()\n            ? !hingeSide || -1\n            : 0\n      ),\n      y: 0,\n      z: Number(\n        facingDirection.isEast()\n          ? !hingeSide || -1\n          : facingDirection.isWest()\n            ? hingeSide || -1\n            : 0\n      ),\n    })\n\n    // 2. 进行判断\n    const relatedBlock = this._lower.getOffsetBlock(offset)\n    if (DoorBlock.match(relatedBlock)) {\n      const relatedDoor = new DoorBlock(relatedBlock)\n      // 另一扇门应该方向相同，而门轴相反\n      if (\n        relatedDoor.canBeOpenedByHand() &&\n        (shouldBeTheSameType ? relatedDoor.typeId === this.typeId : true) &&\n        relatedDoor.facingDirection.code === facingDirection.code &&\n        relatedDoor.hingeSide === !hingeSide\n      )\n        // @ts-ignore\n        output.push(relatedDoor)\n    }\n\n    return output\n  }\n}\n","import { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  components = new Map()\n\n  constructor(entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  world,\n} from \"@minecraft/server\"\n\n// import { Parser } from \"mcbe-command-parser\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set()\n\nexport class Commands {\n  static run(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(commandString, target = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(prefix, command, /* grammar, */ callback) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner = async (commandString, target) => {\n      // callback(new Parser(commandString, grammar), target)\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class Container extends WrapperTemplate {\n  constructor(container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot, itemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import { Container } from \"./Container.class\"\n\nexport class EntityContainer extends Container {\n  constructor(entity, container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import { GameMode } from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\n\nimport { EntityContainer } from \"../container/index\"\n\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  constructor(player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(slot, callback = async (_) => {}) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(callback = async () => {}) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}) {\n    if (useXpOrb && amount >= 0) {\n      while (amount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import { Directions } from \"../../location/index\"\n\nimport { WrappedPlayer } from \"../entity/index\"\n\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nimport {\n  COPPER_TRAPDOORS,\n  TRAPDOORS,\n  WOODEN_TRAPDOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class TrapdoorBlock extends WrappedBlock {\n  constructor(block) {\n    TrapdoorBlock.assert(block)\n\n    super(block)\n  }\n\n  static match(block) {\n    return TRAPDOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (TrapdoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a trapdoor.`)\n  }\n\n  get opened() {\n    return this.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // trapdoor is on the >direction< side of a block\n    const directionCode = this.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 2:\n        return Directions.South\n      case 1:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get upsideOrDown() {\n    return this.getState(\"upside_down_bit\")\n  }\n\n  isWooden() {\n    return WOODEN_TRAPDOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_TRAPDOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this.setState(\"open_bit\", true)\n  }\n  close() {\n    this.setState(\"open_bit\", false)\n  }\n\n  getRelated(\n    player,\n    { extensive = true, maxLength = 1, shouldBeTheSameType = true } = {}\n  ) {\n    // 获取可以与该活板门双开的另外一些活板门和这个活板门组成的列表\n    const output = [this]\n\n    if (maxLength > 0) {\n      // 1. 获取另一个活板门的位置\n      // e.g. 如果一个活板门位于一个方块的东边\n      //      那么另一个活板门应该位于东边，即 x+1 的位置\n      const relatedBlock = this.getNeighbourBlock(this.facingDirection)\n\n      // 2. 判断是否为相关活板门\n      if (TrapdoorBlock.match(relatedBlock)) {\n        // TODO: refactor _bloc6k\n        const relatedTrapdoor = new TrapdoorBlock(relatedBlock._block)\n        // 方向相反，上下位置相同\n        if (\n          relatedTrapdoor.canBeOpenedByHand() &&\n          (shouldBeTheSameType\n            ? relatedTrapdoor.typeId === this.typeId\n            : true) &&\n          relatedTrapdoor.facingDirection.isOppositeTo(this.facingDirection) &&\n          relatedTrapdoor.upsideOrDown === this.upsideOrDown\n        )\n          // @ts-ignore\n          output.push(relatedTrapdoor)\n      }\n    }\n\n    if (extensive) {\n      let that = this\n      let needOpposite = false\n\n      // 仅 maxLength > 1 时才会运行\n      while (--maxLength) {\n        // 3. 获取扩展活板门\n        //    即能与该活板门延伸联动的另一个活板门\n        // @ts-ignore\n        const playerFacing = WrappedPlayer.wrap(player).getFacingDirectionXZ()\n        const extensiveBlock = needOpposite\n          ? that.getNeighbourBlock(playerFacing.getOpposite())\n          : that.getNeighbourBlock(playerFacing)\n\n        if (TrapdoorBlock.match(extensiveBlock)) {\n          const extensiveTrapdoor = new TrapdoorBlock(extensiveBlock._block)\n\n          // 方向相同，上下位置相同\n          if (\n            extensiveTrapdoor.canBeOpenedByHand() &&\n            (shouldBeTheSameType\n              ? extensiveTrapdoor.typeId === this.typeId\n              : true) &&\n            extensiveTrapdoor.facingDirection.equals(this.facingDirection) &&\n            extensiveTrapdoor.upsideOrDown === this.upsideOrDown\n          ) {\n            const result = extensiveTrapdoor.getRelated(player, {\n              extensive: false,\n              maxLength,\n            })\n            if (result.length > 1) {\n              // @ts-ignore\n              output.push(...result)\n\n              // @ts-ignore\n              that = extensiveTrapdoor\n              continue\n            }\n          }\n        }\n\n        // 当玩家面对的方向可以联动的活板门数量不足时\n        // 反向查找\n        if (!needOpposite) {\n          needOpposite = true\n          that = this\n          // 因为此变向操纵消耗了一次迭代，故补充一次\n          maxLength++\n        } else {\n          break\n        }\n      }\n    }\n\n    return output\n  }\n}\n","import {\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\nexport class Dialog {\n  static async confirm({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => {},\n    onConfirm = async () => {},\n  }) {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  constructor({\n    dialog,\n    onClose = async () => {},\n    onSubmit = async (_) => {},\n    onSelectButton1 = async () => {},\n    onSelectButton2 = async () => {},\n    onSelect = async (_) => {},\n  }) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n  async show(target) {\n    let response\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n    if (response instanceof ModalFormResponse)\n      return await this.onSubmit(response.formValues)\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n    } else if (response instanceof ActionFormResponse)\n      return await this.onSelect(response.selection)\n\n    return response\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","module.exports = require('crypto').randomBytes\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nvar randomBytes = require('randombytes');\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID_LENGTH          = 16;\nvar UID                 = generateUID();\nvar PLACE_HOLDER_REGEXP = new RegExp('(\\\\\\\\)?\"@__(F|R|D|M|S|A|U|I|B|L)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nfunction generateUID() {\n    var bytes = randomBytes(UID_LENGTH);\n    var result = '';\n    for(var i=0; i<UID_LENGTH; ++i) {\n        result += bytes[i].toString(16);\n    }\n    return result;\n}\n\nfunction deleteFunctions(obj){\n    var functionKeys = [];\n    for (var key in obj) {\n        if (typeof obj[key] === \"function\") {\n            functionKeys.push(key);\n        }\n    }\n    for (var i = 0; i < functionKeys.length; i++) {\n        delete obj[functionKeys[i]];\n    }\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n    var maps      = [];\n    var sets      = [];\n    var arrays    = [];\n    var undefs    = [];\n    var infinities= [];\n    var bigInts = [];\n    var urls = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n\n        // For nested function\n        if(options.ignoreFunction){\n            deleteFunctions(value);\n        }\n\n        if (!value && value !== undefined && value !== BigInt(0)) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Map) {\n                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Set) {\n                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Array) {\n                var isSparse = origValue.filter(function(){return true}).length !== origValue.length;\n                if (isSparse) {\n                    return '@__A-' + UID + '-' + (arrays.push(origValue) - 1) + '__@';\n                }\n            }\n\n            if(origValue instanceof URL) {\n                return '@__L-' + UID + '-' + (urls.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'undefined') {\n            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'number' && !isNaN(origValue) && !isFinite(origValue)) {\n            return '@__I-' + UID + '-' + (infinities.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'bigint') {\n            return '@__B-' + UID + '-' + (bigInts.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    function serializeFunc(fn) {\n      var serializedFn = fn.toString();\n      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n          throw new TypeError('Serializing native function: ' + fn.name);\n      }\n\n      // pure functions, example: {key: function() {}}\n      if(IS_PURE_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      // arrow functions, example: arg1 => arg1+5\n      if(IS_ARROW_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      var argsStartsAt = serializedFn.indexOf('(');\n      var def = serializedFn.substr(0, argsStartsAt)\n        .trim()\n        .split(' ')\n        .filter(function(val) { return val.length > 0 });\n\n      var nonReservedSymbols = def.filter(function(val) {\n        return RESERVED_SYMBOLS.indexOf(val) === -1\n      });\n\n      // enhanced literal objects, example: {key() {}}\n      if(nonReservedSymbols.length > 0) {\n          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'\n            + (def.join('').indexOf('*') > -1 ? '*' : '')\n            + serializedFn.substr(argsStartsAt);\n      }\n\n      // arrow functions\n      return serializedFn;\n    }\n\n    // Check if the parameter is function\n    if (options.ignoreFunction && typeof obj === \"function\") {\n        obj = undefined;\n    }\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (obj === undefined) {\n        return String(obj);\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && arrays.length === 0 && undefs.length === 0 && infinities.length === 0 && bigInts.length === 0 && urls.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, backSlash, type, valueIndex) {\n        // The placeholder may not be preceded by a backslash. This is to prevent\n        // replacing things like `\"a\\\"@__R-<UID>-0__@\"` and thus outputting\n        // invalid JS.\n        if (backSlash) {\n            return match;\n        }\n\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return \"new RegExp(\" + serialize(regexps[valueIndex].source) + \", \\\"\" + regexps[valueIndex].flags + \"\\\")\";\n        }\n\n        if (type === 'M') {\n            return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n        }\n\n        if (type === 'S') {\n            return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n        }\n\n        if (type === 'A') {\n            return \"Array.prototype.slice.call(\" + serialize(Object.assign({ length: arrays[valueIndex].length }, arrays[valueIndex]), options) + \")\";\n        }\n\n        if (type === 'U') {\n            return 'undefined'\n        }\n\n        if (type === 'I') {\n            return infinities[valueIndex];\n        }\n\n        if (type === 'B') {\n            return \"BigInt(\\\"\" + bigInts[valueIndex] + \"\\\")\";\n        }\n\n        if (type === 'L') {\n            return \"new URL(\" + serialize(urls[valueIndex].toString(), options) + \")\";\n        }\n\n        var fn = functions[valueIndex];\n\n        return serializeFunc(fn);\n    });\n}\n","import md5 from \"md5\"\n// @ts-ignore\nimport { serialize } from \"serialize-javascript\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport { deserialize, each, eachAsync } from \"../util/index\"\n\nexport const ALL_DATABASES = new Map()\n\nexport class Database {\n  static open(player, dbName) {\n    return new Database(player, dbName)\n  }\n  constructor(player, dbName) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName)\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key) {\n    return this.store.has(key)\n  }\n  async delete(key) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key) {\n    if (this.has(key)) return this.store.get(key).value\n  }\n  async set(key, value) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries() {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys() {\n    for (const key of this.store.keys()) yield key\n  }\n  *values() {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {}\n  }\n  on(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName, listener) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName, listener) {\n    if (this._events[eventName]) {\n      const newListeners = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName, ...args) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName, ...args) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName, listener) {\n    return this.on(eventName, listener)\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\n\nexport class OptionItemRange {\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(n) {\n    return this.range.includes(n)\n  }\n}\n","// @ts-ignore\nimport { serialize } from \"serialize-javascript\"\n\nimport { each } from \"../util/index\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\n\nexport class OptionItemSelection {\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      values.map((value) => {\n        if (typeof value[0] === \"object\" || value[0] === undefined)\n          value[0] = serialize(value[0])\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._defaultValue = defaultValue\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(name) {\n    return this.values.has(name) || !this.values.size\n  }\n}\n","import { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { each, eachAsync } from \"../util/index\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionItemRange } from \"./OptionItemRange.class\"\nimport { OptionItemSelection } from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  constructor(player, name) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items = {}\n\n  addItem(opts) {\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = undefined\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name) {\n    return this.items[name]\n  }\n  hasItem(name) {\n    return !!this.items[name]\n  }\n  setItemVal(\n    name,\n    value,\n    callback = (_, __, ___) => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\n\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  constructor(name) {\n    this.name = name\n  }\n\n  players = new Map()\n  _items = new Set()\n\n  addItem(opts) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = undefined\n    return valueMap\n  }\n\n  getPlayer(player) {\n    return this.players.get(player)\n  }\n}\n","import { ActionFormData } from \"@minecraft/server-ui\"\n\nimport { each } from \"../util/index\"\n\nimport { Dialog } from \"../dialog/index\"\n\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map()\n\n  registerNamesapace(name) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name) {\n    return this.namespaces.get(name)\n  }\n  async showDialog(player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\n\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"better-door\")\n  .addItem({\n    name: \"door\",\n    description: \"允许双开门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:door -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"trapdoor\",\n    description: \"允许多开活板门\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:trapdoor -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_trapdoor_length\",\n    description: \"允许多开活板门的最大距离\",\n    range: [1, 32],\n    defaultValue: 3,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:max_trapdoor_length -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"should_be_the_same_type\",\n    description: \"是否需要是同种门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:should_be_the_same_type -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { DoorBlock, TrapdoorBlock } from \"@/lib/wrapper/block/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.beforeEvents.itemUseOn.subscribe((event) => {\n    const { block, source: player } = event\n    const playerOption = option.getPlayer(player)\n\n    const shouldBeTheSameType = playerOption.getItemVal(\n      \"should_be_the_same_type\"\n    )\n\n    if (DoorBlock.match(block) && playerOption.getItemVal(\"door\")) {\n      event.cancel = true\n      // @ts-ignore\n      const doors = DoorBlock.wrap(block).getRelated({ shouldBeTheSameType })\n      asyncRun(() => {\n        if (doors[0].opened) each(doors, (_) => _.close())\n        else each(doors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    } else if (\n      TrapdoorBlock.match(block) &&\n      playerOption.getItemVal(\"trapdoor\")\n    ) {\n      event.cancel = true\n      const maxLength = playerOption.getItemVal(\"max_trapdoor_length\")\n      // @ts-ignore\n      const trapdoors = TrapdoorBlock.wrap(block).getRelated(player, {\n        maxLength,\n        shouldBeTheSameType,\n      })\n      asyncRun(() => {\n        if (trapdoors[0].opened) each(trapdoors, (_) => _.close())\n        else each(trapdoors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    }\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","deserialize","str","JSON","parse","isAsyncFunc","func","toStringTag","TypeGroup","add","types","type","has","clone","toArray","from","constructor","Set","WOODEN_DOORS","COPPER_DOORS","DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","TRAPDOORS","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","create","vector","vectorStr","split","map","Number","stringify","toPrimitive","hint","axes","join","dimensions","get","index","set","value","VectorNUtils","_assertDimensions","Error","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","y","z","x","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","s","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","toString","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","itemStack","Map","typeId","getComponents","component","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","acaciaLog","amethystBlock","amethystCluster","ancientDebris","birchLog","cherryLog","coalOre","copperOre","crimsonStem","darkOakLog","deepslate","deepslateCoalOre","deepslateCopperOre","deepslateDiamondOre","deepslateEmeraldOre","deepslateGoldOre","deepslateIronOre","deepslateLapisOre","deepslateRedstoneOre","diamondOre","emeraldOre","goldOre","ironOre","jungleLog","lapisOre","mangroveLog","netherGoldOre","oakLog","obsidian","quartzOre","redstoneOre","spruceLog","stone","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","damage","defaultRange","max_amount","DropItemGroup","group","e","FORTUNE_RULES","ore","melon","grass","flower","crop","custom","BlockDrops","setItemUse","useItem","dropConfig","find","digBy","blockItem","BlockPermutation","blockTypeId","getItemStack","rawResource","refinedResource","seendResource","seed","immatureResource","immature","fortuneRule","custumLootTable","option","getDrops","withFortune","withSilkTouch","level","lootTable","distribution","customItemDrop","BlockDefinition","WrappedBlock","getOffsetBlock","location","dimension","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","hasEnchantment","getEnchantment","spawnDrops","drop","spawnItem","MinecraftItemStack","spawnEntity","getTotalDamage","block","WrappedBlocks","_blocks","blocks","DoorBlock","TypeError","_lower","_upper","opened","facingDirection","hingeSide","isWooden","isCopper","isIron","canBeOpenedByHand","open","close","getRelated","shouldBeTheSameType","relatedBlock","relatedDoor","wrappedBlock","isUpper","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Dimension","Entity","runCommand","customCommands","filter","regex","test","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","Container","size","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","some","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","_","useMainHandItem","useXpOrb","addLevels","TrapdoorBlock","upsideOrDown","extensive","maxLength","relatedTrapdoor","that","needOpposite","playerFacing","extensiveBlock","extensiveTrapdoor","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","onSubmit","formValues","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","obj","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","prototype","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","_blocksize","_digestsize","undefined","digestbytes","asBytes","asString","UID_LENGTH","UID","generateUID","PLACE_HOLDER_REGEXP","IS_NATIVE_CODE_REGEXP","IS_PURE_FUNCTION","IS_ARROW_FUNCTION","UNSAFE_CHARS_REGEXP","RESERVED_SYMBOLS","ESCAPED_CHARS","escapeUnsafeChars","unsafeChar","deleteFunctions","functionKeys","serialize","space","functions","regexps","dates","maps","sets","arrays","undefs","infinities","bigInts","urls","replacer","ignoreFunction","BigInt","origValue","Date","isSparse","URL","isNaN","isFinite","serializeFunc","serializedFn","argsStartsAt","def","nonReservedSymbols","isJSON","unsafe","backSlash","valueIndex","toISOString","source","flags","entries","assign","ALL_DATABASES","Database","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","_defaultValue","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","__","___","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","OptionManager","registerNamesapace","namespaces","getNamesapace","ActionFormData","button","optionManager","changed","warn","setupListener","itemUseOn","playerOption","doors","trapdoors","then"],"mappings":"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","x_google_ignoreList":[65,66,67,68,69,70]}