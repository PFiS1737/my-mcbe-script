{"version":3,"file":"better-door.js","sources":["../src/lib/BetterConsole.class.ts","../src/lib/util/index.ts","../src/lib/wrapper/TypeGroup.class.ts","../src/lib/wrapper/block/BlockTypeGroups.enumeration.ts","../src/lib/util/math.ts","../src/lib/vector/VectorN.class.ts","../src/lib/vector/VectorNUtils.class.ts","../src/lib/vector/Vector3Utils.class.ts","../src/lib/vector/Vector3.class.ts","../src/lib/location/Location.class.ts","../src/lib/location/BlockLocation.class.ts","../src/lib/util/game.ts","../src/lib/location/LocationUtils.class.ts","../src/lib/location/Directions.class.ts","../src/lib/wrapper/WrapperTemplate.class.ts","../src/lib/wrapper/item/ItemTypeGroups.enumeration.ts","../src/lib/wrapper/item/WrappedItemStack.class.ts","../src/data/block/types.ts","../src/data/block/acacia_log.json.ts","../src/data/block/amethyst_block.json.ts","../src/data/block/amethyst_cluster.json.ts","../src/data/block/ancient_debris.json.ts","../src/data/block/birch_log.json.ts","../src/data/block/cherry_log.json.ts","../src/data/block/coal_ore.json.ts","../src/data/block/copper_ore.json.ts","../src/data/block/crimson_stem.json.ts","../src/data/block/dark_oak_log.json.ts","../src/data/block/deepslate.json.ts","../src/data/block/deepslate_coal_ore.json.ts","../src/data/block/deepslate_copper_ore.json.ts","../src/data/block/deepslate_diamond_ore.json.ts","../src/data/block/deepslate_emerald_ore.json.ts","../src/data/block/deepslate_gold_ore.json.ts","../src/data/block/deepslate_iron_ore.json.ts","../src/data/block/deepslate_lapis_ore.json.ts","../src/data/block/deepslate_redstone_ore.json.ts","../src/data/block/diamond_ore.json.ts","../src/data/block/emerald_ore.json.ts","../src/data/block/gold_ore.json.ts","../src/data/block/iron_ore.json.ts","../src/data/block/jungle_log.json.ts","../src/data/block/lapis_ore.json.ts","../src/data/block/mangrove_log.json.ts","../src/data/block/nether_gold_ore.json.ts","../src/data/block/oak_log.json.ts","../src/data/block/obsidian.json.ts","../src/data/block/quartz_ore.json.ts","../src/data/block/redstone_ore.json.ts","../src/data/block/spruce_log.json.ts","../src/data/block/stone.json.ts","../src/data/block/warped_stem.json.ts","../src/data/block/index.ts","../src/lib/NumberRange.class.ts","../src/lib/wrapper/LootTable.class.ts","../src/lib/wrapper/block/BlockDrops.class.ts","../src/lib/wrapper/block/WrappedBlock.class.ts","../src/lib/wrapper/block/WrappedBlocks.class.ts","../src/lib/wrapper/block/DoorBlock.class.ts","../src/lib/wrapper/entity/WrappedEntity.class.ts","../src/lib/commands/Commands.class.ts","../src/lib/wrapper/container/WrappedContainer.class.ts","../src/lib/wrapper/container/EntityContainer.class.ts","../src/lib/wrapper/entity/WrappedPlayer.class.ts","../src/lib/wrapper/block/TrapdoorBlock.class.ts","../src/lib/dialog/Dialog.class.ts","../node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js","../node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js","../node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js","../node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js","../src/lib/database/Database.class.ts","../src/lib/EventEmitter.class.ts","../src/lib/option-manager/OptionItemRange.class.ts","../src/lib/option-manager/OptionItemSelection.class.ts","../src/lib/option-manager/PlayerOption.class.ts","../src/lib/option-manager/OptionNamespace.class.ts","../src/lib/option-manager/OptionManager.class.ts","../src/lib/option-manager/manager.ts","../src/lib/option-manager/command.ts","../src/script/better-door/option.ts","../src/script/better-door/event.ts","../src/script/better-door/index.ts"],"sourcesContent":["export class BetterConsole {\n  static error(err: Error) {\n    console.error(`${err}\\n${err.stack}`)\n  }\n}\n","export function each(target, callbackfn, thisArg) {\n  if (Array.isArray(target)) target.forEach(callbackfn, thisArg)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) callbackfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    each(Object.keys(target), (key, i) =>\n      callbackfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport async function eachAsync(target, asyncfn, thisArg) {\n  if (Array.isArray(target))\n    for (let i = 0; i < target.length; i++)\n      await asyncfn.call(thisArg, target[i], i, target)\n  else if (target?.[Symbol.iterator])\n    for (const item of target) await asyncfn.call(thisArg, item, target)\n  else if (typeof target === \"object\")\n    await eachAsync(\n      Object.keys(target),\n      async (key, i) => await asyncfn.call(thisArg, target[key], key, i, target)\n    )\n}\n\nexport function safeEval(code: string, context = {}) {\n  const fn = new Function(...Object.keys(context), `return ${code}`)\n  return fn(...Object.values(context))\n}\n\nexport type Serializable =\n  | Set<Serializable>\n  | Map<Serializable, Serializable>\n  | { [key: string]: Serializable }\n  | Array<Serializable>\n  | string\n  | number\n  | boolean\n\nexport function serialize(obj: Serializable): string {\n  if (obj instanceof Set) return `new Set(${serialize(Array.from(obj))})`\n\n  if (obj instanceof Map)\n    return `new Map(${serialize(Array.from(obj.entries()))})`\n\n  if (Array.isArray(obj)) return `[${obj.map(serialize).join(\",\")}]`\n\n  if (typeof obj === \"object\" && obj !== null) {\n    return `{${Object.entries(obj)\n      .map(([key, value]) => `${serialize(key)}: ${serialize(value)}`)\n      .join(\",\")}}`\n  }\n  return JSON.stringify(obj)\n}\n\nexport function deserialize(str: string): Serializable {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    // console.warn(`Could not use \\`JSON.parse()\\` to deserialise the string, trying \\`safeEval()\\`.`, { string: str })\n    return safeEval(`(${str})`)\n  }\n}\n\nexport function isAsyncFunc(func: Function): boolean {\n  return Object.prototype.toString.call(func) === \"[object AsyncFunction]\"\n}\n\nexport function arraySample<T>(arr: Array<T>): T {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport function toCamelCase(str: string) {\n  return str.replace(/(\\w)[\\. _-](\\w)/g, (_, $1, $2) => $1 + $2.toUpperCase())\n}\n","import { each } from \"../util/index\"\n\nexport class TypeGroup<T> {\n  types: Set<T>\n\n  constructor(types: T[]) {\n    this.types = new Set(types)\n  }\n\n  add(...types: T[]) {\n    each(types, (type) => this.types.add(type))\n    return this\n  }\n  has(type: T) {\n    return this.types.has(type)\n  }\n\n  clone() {\n    return new TypeGroup([...this])\n  }\n\n  toArray() {\n    return Array.from(this)\n  }\n  [Symbol.iterator]() {\n    return this.types.keys()\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const WOODEN_DOORS = new TypeGroup([\n  \"minecraft:acacia_door\",\n  \"minecraft:bamboo_door\",\n  \"minecraft:birch_door\",\n  \"minecraft:cherry_door\",\n  \"minecraft:crimson_door\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:jungle_door\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:spruce_door\",\n  \"minecraft:warped_door\",\n  \"minecraft:wooden_door\",\n])\n\nexport const COPPER_DOORS = new TypeGroup([\n  \"minecraft:copper_door\",\n  \"minecraft:exposed_copper_door\",\n  \"minecraft:weathered_copper_door\",\n  \"minecraft:oxidized_copper_door\",\n  \"minecraft:waxed_copper_door\",\n  \"minecraft:waxed_exposed_copper_door\",\n  \"minecraft:waxed_weathered_copper_door\",\n  \"minecraft:waxed_oxidized_copper_door\",\n])\n\nexport const DOORS = new TypeGroup([\n  ...WOODEN_DOORS,\n  ...COPPER_DOORS,\n  \"minecraft:iron_door\",\n])\n\nexport const WOODEN_TRAPDOORS = new TypeGroup([\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:bamboo_trapdoor\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:cherry_trapdoor\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:trapdoor\",\n  \"minecraft:warped_trapdoor\",\n])\n\nexport const COPPER_TRAPDOORS = new TypeGroup([\n  \"minecraft:copper_trapdoor\",\n  \"minecraft:exposed_copper_trapdoor\",\n  \"minecraft:weathered_copper_trapdoor\",\n  \"minecraft:oxidized_copper_trapdoor\",\n  \"minecraft:waxed_copper_trapdoor\",\n  \"minecraft:waxed_exposed_copper_trapdoor\",\n  \"minecraft:waxed_weathered_copper_trapdoor\",\n  \"minecraft:waxed_oxidized_copper_trapdoor\",\n])\n\nexport const TRAPDOORS = new TypeGroup([\n  ...WOODEN_TRAPDOORS,\n  ...COPPER_TRAPDOORS,\n  \"minecraft:iron_trapdoor\",\n])\n\nexport const LOGS = new TypeGroup([\n  \"minecraft:acacia_log\",\n  \"minecraft:birch_log\",\n  \"minecraft:cherry_log\",\n  \"minecraft:dark_oak_log\",\n  \"minecraft:jungle_log\",\n  \"minecraft:mangrove_log\",\n  \"minecraft:oak_log\",\n  \"minecraft:spruce_log \",\n])\n\nexport const STEMS = new TypeGroup([\n  \"minecraft:crimson_stem\",\n  \"minecraft:warped_stem\",\n])\n\nexport const ORES = new TypeGroup([\n  \"minecraft:coal_ore\",\n  \"minecraft:copper_ore\",\n  \"minecraft:deepslate_coal_ore\",\n  \"minecraft:deepslate_copper_ore\",\n  \"minecraft:deepslate_diamond_ore\",\n  \"minecraft:deepslate_emerald_ore\",\n  \"minecraft:deepslate_gold_ore\",\n  \"minecraft:deepslate_iron_ore\",\n  \"minecraft:deepslate_lapis_ore\",\n  \"minecraft:deepslate_redstone_ore\",\n  \"minecraft:diamond_ore\",\n  \"minecraft:emerald_ore\",\n  \"minecraft:gold_ore\",\n  \"minecraft:iron_ore\",\n  \"minecraft:lapis_ore\",\n  \"minecraft:nether_gold_ore\",\n  \"minecraft:quartz_ore\",\n  \"minecraft:redstone_ore\",\n])\n\nexport const STONES = new TypeGroup([\"minecraft:stone\", \"minecraft:deepslate\"])\n","export function round(n: number) {\n  if (n >= 0) return Math.round(n)\n  return n % 0.5 === 0 ? Math.floor(n) : Math.round(n)\n}\n\nexport function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function withProbability(p: number) {\n  return Math.random() <= p\n}\n\nexport function equals(a: number, b: number, epsilon = 0.000001) {\n  return Math.abs(a - b) <= epsilon * Math.max(1, Math.abs(a), Math.abs(b))\n}\n\nexport function factorial(n: number): number {\n  return n > 1 ? n * factorial(n - 1) : 1\n}\n\nexport function combination(n: number, k: number) {\n  return factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nexport function binomial(a: number, b: number, n: number) {\n  return (k: number) => a ** (n - k) * b ** k * combination(n, k)\n}\n\nexport function binomialDistribution(n: number, p: number) {\n  return binomial(1 - p, p, n)\n}\n\nexport function sum(from: number, to: number, fn: (i: number) => number) {\n  let output = 0\n  for (let i = from; i <= to; i++) output += fn(i)\n  return output\n}\n\nexport function range(from: number, to: number, step = 1) {\n  const output = []\n  for (let i = from; i < to; i += step) output.push(i)\n  return output\n}\n","import type { Vector3 as IVector3 } from \"@minecraft/server\"\n\nimport { serialize } from \"../util\"\n\n/**\n * Class representing an N-dimensional vector.\n */\nexport class VectorN implements IVector3 {\n  axes: number[]\n\n  /**\n   * Create a vector.\n   * @param axes - The axes of the vector.\n   */\n  constructor(...axes: number[]) {\n    this.axes = axes\n  }\n\n  get x() {\n    return this.get(0)\n  }\n  set x(value) {\n    this.set(0, value)\n  }\n  get y() {\n    return this.get(1)\n  }\n  set y(value) {\n    this.set(1, value)\n  }\n  get z() {\n    return this.get(2)\n  }\n  set z(value) {\n    this.set(2, value)\n  }\n  get w() {\n    return this.get(3)\n  }\n  set w(value) {\n    this.set(3, value)\n  }\n\n  /**\n   * Create a vector.\n   * @param vector - The vector wrote in array or string.\n   * @returns The vector.\n   */\n  static create(vector: number[] | string): VectorN {\n    if (Array.isArray(vector)) return new this(...vector)\n    if (typeof vector === \"string\") return this.parse(vector)\n\n    throw new Error(`Can't create vector for ${serialize(vector)}`)\n  }\n\n  /**\n   * Parse a string to vector.\n   * @param vectorStr - The string to parse.\n   * @returns The vector.\n   */\n  static parse(vectorStr: string): VectorN {\n    return this.create(vectorStr.split(\" \").map(Number))\n  }\n\n  /**\n   * Convert the vector to a string.\n   * @returns The string representation of the vector.\n   */\n  stringify(): string {\n    // @ts-ignore\n    return this[Symbol.toPrimitive](\"string\")\n  }\n\n  /**\n   * Convert the vector to an array.\n   * @returns The array representation of the vector.\n   */\n  toArray(): Array<number> {\n    return [...this]\n  }\n\n  /**\n   * Convert the vector to a primitive value.\n   * @param hint - The type hint.\n   * @returns The string representation or the vector itself.\n   */\n  [Symbol.toPrimitive](hint: string): string | VectorN {\n    if (hint === \"string\") return this.axes.join(\" \")\n    return this\n  }\n\n  /**\n   * Iterator for the vector axes.\n   * @returns The iterator for the axes.\n   */\n  [Symbol.iterator](): Iterator<number> {\n    return this.axes[Symbol.iterator]()\n  }\n\n  /**\n   * Get the number of dimensions of the vector.\n   * @returns The number of dimensions.\n   */\n  get dimensions(): number {\n    return this.axes.length\n  }\n\n  /**\n   * Get an axis of the vector by index.\n   * @param index - The index of the component.\n   * @returns The component value.\n   */\n  get(index: number): number {\n    return this.axes[index]\n  }\n\n  /**\n   * Set an axis of the vector by index.\n   * @param index - The index of the component.\n   * @param value - The value to set.\n   */\n  set(index: number, value: number) {\n    this.axes[index] = value\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): VectorN {\n    return VectorN.create(this.axes.map(callbackfn))\n  }\n}\n","import { equals, round } from \"../util/math\"\nimport { VectorN } from \"./VectorN.class\"\n\n/**\n * Utility class for operations on N-dimensional vectors.\n */\nexport class VectorNUtils {\n  /**\n   * Create a vector.\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Array<number>) {\n    return VectorN.create(vector)\n  }\n\n  /**\n   * Clone a vector.\n   * @param a - The vector to clone.\n   * @returns The cloned vector.\n   */\n  static clone(a: VectorN) {\n    return this.create(a.toArray())\n  }\n\n  /**\n   * Assert that two vectors have the same dimensions.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @throws Will throw an error if the vectors do not have the same dimensions.\n   */\n  static _assertDimensions(a: VectorN, b: VectorN) {\n    if (a.dimensions !== b.dimensions)\n      throw new Error(\"Vectors must have the same dimensions.\")\n  }\n\n  /**\n   * Add two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static add(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val + b.get(index))\n  }\n\n  /**\n   * Subtract one vector from another.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static subtract(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val - b.get(index))\n  }\n\n  /**\n   * Multiply two vectors component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static multiply(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * b.get(index))\n  }\n\n  /**\n   * Divide one vector by another component-wise.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The resulting vector.\n   */\n  static divide(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val / b.get(index))\n  }\n\n  /**\n   * Scale a vector by a scalar.\n   * @param a - The vector to scale.\n   * @param n - The scalar value.\n   * @returns The resulting vector.\n   */\n  static scale(a: VectorN, n: number) {\n    return a.map((val) => val * n)\n  }\n\n  /**\n   * Negate a vector.\n   * @param a - The vector to negate.\n   * @returns The resulting vector.\n   */\n  static negate(a: VectorN) {\n    return a.map((val) => -val)\n  }\n\n  /**\n   * Invert a vector component-wise.\n   * @param a - The vector to invert.\n   * @returns The resulting vector.\n   */\n  static inverse(a: VectorN) {\n    return a.map((val) => 1 / val)\n  }\n\n  /**\n   * Exchange two axes of a vector.\n   * @param a - The vector to modify.\n   * @param axis1 - The first axis to exchange.\n   * @param axis2 - The second axis to exchange\n   * @returns The resulting vector.\n   * @throws Will throw an error if the length of the axes array is not 2.\n   */\n  static exchange(a: VectorN, axis1: number, axis2: number) {\n    const output = this.clone(a)\n    const n0 = output.get(axis1)\n    const n1 = output.get(axis2)\n    output.set(axis1, n1)\n    output.set(axis2, n0)\n    return output\n  }\n\n  /**\n   * Check if two vectors are exactly equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are exactly equal, otherwise false.\n   */\n  static exactEquals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => val === b.get(index))\n  }\n\n  /**\n   * Check if two vectors are approximately equal.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are approximately equal, otherwise false.\n   */\n  static equals(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.every((val, index) => equals(val, b.get(index)))\n  }\n\n  /**\n   * Get the component-wise maximum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static max(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const maxAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val > acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.NEGATIVE_INFINITY))\n\n    return this.create(maxAxes)\n  }\n\n  /**\n   * Get the component-wise minimum of multiple vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The resulting vector.\n   */\n  static min(...vectors: VectorN[]) {\n    const length = vectors[0].dimensions\n\n    const minAxes = vectors.reduce((acc, vector) => {\n      vector.axes.forEach((val, index) => {\n        if (val < acc[index]) acc[index] = val\n      })\n      return acc\n    }, new Array(length).fill(Number.POSITIVE_INFINITY))\n\n    return this.create(minAxes)\n  }\n\n  /**\n   * Apply the floor function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static floor(a: VectorN) {\n    return a.map((val) => Math.floor(val))\n  }\n\n  /**\n   * Apply the ceil function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static ceil(a: VectorN) {\n    return a.map((val) => Math.ceil(val))\n  }\n\n  /**\n   * Apply the round function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static round(a: VectorN) {\n    return a.map((val) => round(val))\n  }\n\n  /**\n   * Apply the absolute value function to each component of a vector.\n   * @param a - The vector to modify.\n   * @returns The resulting vector.\n   */\n  static abs(a: VectorN) {\n    return a.map((val) => Math.abs(val))\n  }\n\n  /**\n   * Get the vector with the maximum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the maximum magnitude.\n   */\n  static maxMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) > VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Get the vector with the minimum magnitude from a list of vectors.\n   * @param vectors - The vectors to compare.\n   * @returns The vector with the minimum magnitude.\n   */\n  static minMagnitude(...vectors: VectorN[]) {\n    return vectors.reduce((prev, curr) =>\n      VectorNUtils.magnitude(curr) < VectorNUtils.magnitude(prev) ? curr : prev\n    )\n  }\n\n  /**\n   * Calculate the magnitude of a vector.\n   * @param a - The vector to calculate the magnitude of.\n   * @returns The magnitude of the vector.\n   */\n  static magnitude(a: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredMagnitude(a))\n  }\n\n  /**\n   * Calculate the squared magnitude of a vector.\n   * @param a - The vector to calculate the squared magnitude of.\n   * @returns The squared magnitude of the vector.\n   */\n  static squaredMagnitude(a: VectorN) {\n    return a.axes.reduce((sum, val) => sum + val ** 2, 0)\n  }\n\n  /**\n   * Calculate the distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The distance between the vectors.\n   */\n  static distance(a: VectorN, b: VectorN) {\n    return Math.sqrt(VectorNUtils.squaredDistance(a, b))\n  }\n\n  /**\n   * Calculate the squared distance between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The squared distance between the vectors.\n   */\n  static squaredDistance(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => {\n      const diff = val - b.get(index)\n      return sum + diff ** 2\n    }, 0)\n  }\n\n  /**\n   * Calculate the dot product of two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The dot product of the vectors.\n   */\n  static dot(a: VectorN, b: VectorN) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.axes.reduce((sum, val, index) => sum + val * b.get(index), 0)\n  }\n\n  /**\n   * Normalize a vector.\n   * @param a - The vector to normalize.\n   * @returns The normalized vector.\n   */\n  static normalize(a: VectorN) {\n    const magnitude = this.magnitude(a)\n    if (magnitude) return this.scale(a, 1 / magnitude)\n    return this.create(new Array(a.dimensions).fill(0))\n  }\n\n  /**\n   * Calculate the angle between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The angle between the vectors in radians.\n   */\n  static angle(a: VectorN, b: VectorN) {\n    const cosOmega = this.dot(this.normalize(a), this.normalize(b))\n    return Math.acos(cosOmega)\n  }\n\n  /**\n   * Generate a random vector.\n   * @param dimensions - The number of dimensions.\n   * @param scale - The scale of the random components.\n   * @returns The random vector.\n   */\n  static random(dimensions: number, scale = 1) {\n    const axes = Array.from({ length: dimensions }, () => Math.random() * 2 - 1)\n    return this.scale(this.create(axes), scale)\n  }\n\n  /**\n   * Perform linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static lerp(a: VectorN, b: VectorN, t: number) {\n    VectorNUtils._assertDimensions(a, b)\n    return a.map((val, index) => val * (1 - t) + b.get(index) * t)\n  }\n\n  /**\n   * Perform spherical linear interpolation between two vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static slerp(a: VectorN, b: VectorN, t: number) {\n    if (t <= 0) return this.clone(a)\n    if (t >= 1) return this.clone(b)\n\n    const omega = this.angle(a, b)\n    const sinOmega = Math.sin(omega)\n\n    if (sinOmega <= Number.EPSILON) return this.lerp(a, b, t)\n\n    const ratioA = Math.sin(omega * (1 - t)) / sinOmega\n    const ratioB = Math.sin(omega * t) / sinOmega\n    return a.map((val, index) => val * ratioA + b.get(index) * ratioB)\n  }\n\n  /**\n   * Perform Bezier interpolation between vectors.\n   * @param points - The control points.\n   * @param t - The interpolation parameter.\n   * @returns The interpolated vector.\n   */\n  static bezier(points: VectorN[], t: number): VectorN {\n    const n = points.length - 1\n\n    if (!n) return points[0]\n\n    const newPoints = []\n    for (let i = 0; i < n; i++) {\n      newPoints.push(this.lerp(points[i], points[i + 1], t))\n    }\n\n    return this.bezier(newPoints, t)\n  }\n}\n","import { Vector3 } from \"./Vector3.class\"\nimport { VectorNUtils } from \"./VectorNUtils.class\"\n\n/**\n * Utility class for operations on 3D vectors.\n */\nexport class Vector3Utils extends VectorNUtils {\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(\n    vector: number[] | string | { x: number; y: number; z: number }\n  ): Vector3 {\n    return Vector3.create(vector)\n  }\n\n  /**\n   * Calculate the cross product of two 3D vectors.\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns The cross product of the vectors.\n   */\n  static cross(a: Vector3, b: Vector3): Vector3 {\n    return this.create([\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x,\n    ])\n  }\n}\n","import { serialize } from \"../util\"\nimport { Vector3Utils } from \"./Vector3Utils.class\"\nimport { VectorN } from \"./VectorN.class\"\n\nexport type Vector3Like =\n  | string\n  | number[]\n  | { x: number; y: number; z: number }\n\n/**\n * Class representing a 3-dimensional vector.\n * @extends VectorN\n */\nexport class Vector3 extends VectorN {\n  /**\n   * Create a 3D vector.\n   * @param x - The x axis.\n   * @param y - The y axis.\n   * @param z - The z axis.\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super(x, y, z)\n  }\n\n  /**\n   * @param vector - The vector write in array.\n   * @returns The vector.\n   */\n  static create(vector: Vector3Like): Vector3 {\n    if (Array.isArray(vector)) return new this(...vector)\n    // @ts-ignore\n    if (typeof vector === \"string\") return this.parse(vector)\n    if (typeof vector === \"object\")\n      return new this(vector.x, vector.y, vector.z)\n\n    throw new Error(`Can't create 3d vector for ${serialize(vector)}`)\n  }\n\n  get magnitude() {\n    return Vector3Utils.magnitude(this)\n  }\n  get squaredMagnitude() {\n    return Vector3Utils.squaredMagnitude(this)\n  }\n\n  get normalized() {\n    return Vector3Utils.normalize(this)\n  }\n  get floored() {\n    return Vector3Utils.floor(this)\n  }\n  get ceiled() {\n    return Vector3Utils.ceil(this)\n  }\n  get rounded() {\n    return Vector3Utils.round(this)\n  }\n  get absoluted() {\n    return Vector3Utils.abs(this)\n  }\n\n  /**\n   * Apply a function to each axes of the vector and return a new vector.\n   * @param callbackfn - The function to apply.\n   * @returns The new vector.\n   */\n  map(\n    callbackfn: (vale: number, index: number, array: number[]) => number\n  ): Vector3 {\n    return Vector3.create(this.axes.map(callbackfn))\n  }\n\n  copy(v: Vector3 | VectorN) {\n    this.x = v.x\n    this.y = v.y\n    this.z = v.z\n    return this\n  }\n  clone() {\n    return new Vector3(this.x, this.y, this.z)\n  }\n  equals(v: Vector3) {\n    return Vector3Utils.equals(this, v)\n  }\n\n  distanceTo(v: Vector3) {\n    return Vector3Utils.distance(this, v)\n  }\n  squaredDistanceTo(v: Vector3) {\n    return Vector3Utils.squaredDistance(this, v)\n  }\n\n  add(v: Vector3) {\n    return this.copy(Vector3Utils.add(this, v))\n  }\n  subtract(v: Vector3) {\n    return this.copy(Vector3Utils.subtract(this, v))\n  }\n  multiply(v: Vector3) {\n    return this.copy(Vector3Utils.multiply(this, v))\n  }\n  divide(v: Vector3) {\n    return this.copy(Vector3Utils.divide(this, v))\n  }\n  scale(n: number) {\n    return this.copy(Vector3Utils.scale(this, n))\n  }\n  negate() {\n    return this.copy(Vector3Utils.negate(this))\n  }\n  inverse() {\n    return this.copy(Vector3Utils.inverse(this))\n  }\n\n  floor() {\n    return this.copy(this.floored)\n  }\n  ceil() {\n    return this.copy(this.ceiled)\n  }\n  round() {\n    return this.copy(this.rounded)\n  }\n  abs() {\n    return this.copy(this.absoluted)\n  }\n\n  normalize() {\n    return this.copy(this.normalized)\n  }\n}\n","import type { Vector3Like } from \"../vector/Vector3.class\"\nimport { Vector3, Vector3Utils } from \"../vector/index\"\nimport type { BlockLocation } from \"./BlockLocation.class\"\n\nexport class Location extends Vector3 {\n  get centerCorrected() {\n    return Location.create(\n      // @ts-ignore\n      Vector3Utils.add(this.floored, new Vector3(0.5, 0.5, 0.5))\n    )\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as Location\n  }\n\n  clone() {\n    return new Location(this.x, this.y, this.z)\n  }\n  equals(v: Location) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: Location | BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: Location | BlockLocation) {\n    return this.add(v)\n  }\n}\n","import { Vector3Utils } from \"../vector\"\nimport { Vector3, type Vector3Like } from \"../vector/Vector3.class\"\n\nexport class BlockLocation extends Vector3 {\n  constructor(x: number, y: number, z: number) {\n    super(x, y, z)\n\n    this.floor()\n  }\n\n  static create(vector: Vector3Like) {\n    return Vector3.create(vector) as BlockLocation\n  }\n\n  clone() {\n    return new BlockLocation(this.x, this.y, this.z)\n  }\n  equals(v: BlockLocation) {\n    return Vector3Utils.exactEquals(this, v)\n  }\n  isNearTo(v: BlockLocation, distance: number) {\n    return this.distanceTo(v) <= distance\n  }\n\n  offset(v: BlockLocation) {\n    return this.add(v)\n  }\n\n  divide(v: BlockLocation) {\n    super.divide(v)\n    return this.floor()\n  }\n}\n","import { type Player, system, world } from \"@minecraft/server\"\n\nexport const sleepAsync = (ms: number): Promise<void> =>\n  new Promise((resolve) => system.runTimeout(resolve, ms))\n\nexport function asyncRun<T>(fn: () => T): Promise<T> {\n  return new Promise((resolve, reject) => {\n    system.run(() => {\n      try {\n        resolve(fn())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\nexport function errorHandler(errText: string, target: Player) {\n  const err = new Error(errText)\n  target.sendMessage(err.toString())\n  return err\n}\n\nexport function waitForFirstPlayerInitialSpawn(): Promise<Player> {\n  const players = world.getAllPlayers()\n  if (players.length) return Promise.resolve(players[0])\n\n  return new Promise((resolve) => {\n    const callback = world.afterEvents.playerSpawn.subscribe((event) => {\n      if (event.initialSpawn) resolve(event.player)\n      world.afterEvents.playerSpawn.unsubscribe(callback)\n    })\n  })\n}\n\nexport function getOrAddObjective(id: string, name?: string) {\n  const objective = world.scoreboard.getObjective(id)\n\n  if (!objective && !name) throw new Error(`Couldn't find objective \"${id}\".`)\n  if (!objective) return world.scoreboard.addObjective(id, name)\n\n  return objective\n}\n\nexport function removeMinecraftNamespace(identifier: string) {\n  return identifier.replace(/^minecraft\\:/, \"\")\n}\n\nexport function addMinecraftNamespaceIfNeed(identifier: string) {\n  return /^(.+)\\:/.test(identifier) ? identifier : `minecraft:${identifier}`\n}\n","import { BlockLocation } from \"./BlockLocation.class\"\nimport type { Direction } from \"./Directions.class\"\nimport { Location } from \"./Location.class\"\n\nexport class LocationUtils {\n  static getDirectionOffset(direction: Direction) {\n    return BlockLocation.create({\n      x: direction.isEast() ? +1 : direction.isWest() ? -1 : 0,\n      y: direction.isUp() ? +1 : direction.isDown() ? -1 : 0,\n      z: direction.isSouth() ? +1 : direction.isNorth() ? -1 : 0,\n    })\n  }\n\n  static between(from: Location, to: Location, step = 1) {\n    const output = []\n    for (let x = from.x; x <= to.x; x += step) {\n      for (let y = from.y; y <= to.y; y += step) {\n        for (let z = from.z; z <= to.z; z += step) {\n          output.push(new Location(x, y, z))\n        }\n      }\n    }\n    return output\n  }\n}\n","export class Direction {\n  code: number\n\n  constructor(directionCode: number) {\n    this.code = directionCode\n  }\n\n  get name() {\n    switch (this.code) {\n      case 0:\n        return \"East\"\n      case 1:\n        return \"South\"\n      case 2:\n        return \"Up\"\n      case 3:\n        return \"West\"\n      case 4:\n        return \"North\"\n      case 5:\n        return \"Down\"\n      default:\n        throw new Error(\"Unexpected error.\")\n    }\n  }\n\n  isEast() {\n    return this.code === 0\n  }\n  isSouth() {\n    return this.code === 1\n  }\n  isUp() {\n    return this.code === 2\n  }\n  isWest() {\n    return this.code === 3\n  }\n  isNorth() {\n    return this.code === 4\n  }\n  isDown() {\n    return this.code === 5\n  }\n\n  equals(direction: Direction) {\n    return this.code === direction.code\n  }\n\n  getOpposite() {\n    const directionCode = this.code + 3\n    return new Direction(directionCode >= 6 ? directionCode - 6 : directionCode)\n  }\n  isOppositeTo(direction: Direction) {\n    return Math.abs(this.code - direction.code) === 3\n  }\n}\n\nexport class Directions {\n  static East = new Direction(0) // x+\n  static South = new Direction(1) // z+\n  static Up = new Direction(2) // y+\n  static West = new Direction(3) // x-\n  static North = new Direction(4) // z-\n  static Down = new Direction(5) // y-\n}\n","export class WrapperTemplate {\n  static wrap(...args) {\n    // return the class extending this\n    // @ts-ignore\n    return new this(...args)\n  }\n  static tryWrap(...args) {\n    try {\n      // return the class extending this\n      // @ts-ignore\n      return new this(...args)\n    } catch (err) {}\n  }\n\n  static match() {\n    throw new Error(\"Not implemented.\")\n  }\n  static assert() {\n    throw new Error(\"Not implemented.\")\n  }\n}\n","import { TypeGroup } from \"../TypeGroup.class\"\n\nexport const DIAMOND_PICKAXE_OR_UPPER = new TypeGroup([\n  \"minecraft:diamond_pickaxe\",\n  \"minecraft:netherite_pickaxe\",\n])\n\nexport const IRON_PICKAXE_OR_UPPER = new TypeGroup([\n  ...DIAMOND_PICKAXE_OR_UPPER,\n  \"minecraft:iron_pickaxe\",\n])\n\nexport const STONE_PICKAXE_OR_UPPER = new TypeGroup([\n  ...IRON_PICKAXE_OR_UPPER,\n  \"minecraft:stone_pickaxe\",\n])\n\nexport const WOODEN_PICKAXE_OR_UPPER = new TypeGroup([\n  ...STONE_PICKAXE_OR_UPPER,\n  \"minecraft:golden_pickaxe\",\n  \"minecraft:wooden_pickaxe\",\n])\n","import {\n  type ItemComponentTypeMap,\n  ItemComponentTypes,\n  type ItemEnchantableComponent,\n  type ItemStack,\n} from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedItemStack extends WrapperTemplate {\n  _item: ItemStack\n  type: ItemStack[\"type\"]\n  typeId: MinecraftItemTypes\n\n  constructor(itemStack: ItemStack) {\n    super()\n\n    this._item = itemStack\n\n    this.type = itemStack.type\n    this.typeId = itemStack.typeId as MinecraftItemTypes\n\n    const components = itemStack.getComponents()\n    each(components, (component) => {\n      this.components.set(\n        removeMinecraftNamespace(\n          component.typeId\n        ) as keyof ItemComponentTypeMap,\n        component\n      )\n    })\n  }\n\n  components = new Map<\n    keyof ItemComponentTypeMap,\n    ItemComponentTypeMap[keyof ItemComponentTypeMap]\n  >()\n\n  hasComponent(componentId: string) {\n    return this._item.hasComponent(componentId)\n  }\n\n  get enchants() {\n    return this.components.get(\n      ItemComponentTypes.Enchantable\n    ) as ItemEnchantableComponent\n  }\n}\n","import type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport type { ILootTableItemConfig } from \"@/lib/wrapper/LootTable.class\"\n\nexport type ItemDropConfig = {\n  item_id: MinecraftItemTypes\n  default_range?: [number, number] // default [1, 1]\n  max_amount?: number // default Number.POSITIVE_INFINITY\n  xp_range?: [number, number] // default [0, 0]\n  damage?: number // default 1\n}\n\nexport enum FortuneRules {\n  // 掉落一个权重为 2，每级增加一个掉落上限，权重为 1\n  Ore = 0,\n  // 掉落一个权重为 1，每级增加一个掉落上限，权重为 1，但不超过某上限\n  Melon = 1,\n  // 是否掉落有一固定概率\n  // 如果判定掉落，每级增加两个掉落上限，权重为 1\n  Grass = 2,\n  // 掉落一个权重为 1，每级增加两个掉落上限，权重为 1\n  Flower = 3,\n  // 固定掉落一个\n  // 额外掉落上限初始为 3，每级增加一个额外掉落上限，额外掉落服从 B(n, 4 / 7)\n  Crop = 4,\n  // 使用自定义的战利品表\n  Custom = 5,\n}\n\nexport type BlockDropsConfigOption = {\n  // necessary if the fortune rule is custom\n  custom?: Record<\n    \"0\" | \"1\" | \"2\" | \"3\",\n    Array<ILootTableItemConfig<ItemDropConfig[]>>\n  >\n}\n\nexport type BlockDropsConfig = Array<{\n  // when dig with item\n  // use \"<empty>\" for empty-handed\n  // use \"<default>\" if none of the other items meet the requirements\n  dig_by:\n    | MinecraftItemTypes\n    | Array<MinecraftItemTypes | \"<empty>\">\n    | {\n        item_group: string\n      }\n    | \"<empty>\"\n    | \"<default>\"\n\n  // the raw resource that drop\n  // default to use the block item (if has)\n  raw?: ItemDropConfig\n\n  // for ore like\n  // refined resource\n  refined?: ItemDropConfig\n\n  // for crop like\n  // seend resource, default to use raw resource\n  seed?: ItemDropConfig\n  // immature resource, default to use seed resource\n  immature?: ItemDropConfig\n\n  // the rule template for fortune enchantment\n  fortune_rule?: FortuneRules\n\n  option?: BlockDropsConfigOption\n}>\n\nexport type BlockConfig = {\n  drops: BlockDropsConfig\n}\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:acacia_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_block\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [4, 4],\n      },\n\n      fortune_rule: \"ore\",\n    },\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:amethyst_shard\",\n        default_range: [2, 2],\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:ancient_debris\",\n      },\n      refined: {\n        item_id: \"minecraft:netherite_scrap\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:birch_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:cherry_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:crimson_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:dark_oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobbled_deepslate\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:coal\",\n        xp_range: [0, 2],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_copper\",\n        default_range: [2, 5],\n      },\n      refined: {\n        item_id: \"minecraft:copper_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:diamond\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:emerald\",\n        xp_range: [3, 7],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_gold\",\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:raw_iron\",\n      },\n      refined: {\n        item_id: \"minecraft:iron_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:jungle_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.STONE_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:lapis_lazuli\",\n        default_range: [4, 9],\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:mangrove_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:gold_nugget\",\n        default_range: [2, 6],\n        xp_range: [0, 1],\n      },\n      refined: {\n        item_id: \"minecraft:gold_ingot\",\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:oak_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.DIAMOND_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:obsidian\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:quartz\",\n        xp_range: [2, 5],\n      },\n\n      fortune_rule: FortuneRules.Ore,\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport { type BlockConfig, FortuneRules } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.IRON_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:redstone\",\n        default_range: [4, 5],\n        xp_range: [1, 5],\n      },\n\n      fortune_rule: FortuneRules.Melon,\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:spruce_log\",\n      },\n    },\n  ],\n} as BlockConfig\n","import { ItemTypeGroups } from \"@/lib/wrapper/item/index\"\nimport type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: ItemTypeGroups.WOODEN_PICKAXE_OR_UPPER.toArray(),\n\n      raw: {\n        item_id: \"minecraft:cobblestone\",\n      },\n      refined: {\n        item_id: \"minecraft:smooth_stone\",\n      },\n    },\n  ],\n} as BlockConfig\n","import type { BlockConfig } from \"./types\"\n\nexport default {\n  drops: [\n    {\n      dig_by: \"<default>\",\n\n      raw: {\n        item_id: \"minecraft:warped_stem\",\n      },\n    },\n  ],\n} as BlockConfig\n","// This file is automatically generated.\nimport acaciaLog from \"./acacia_log.json\"\nimport amethystBlock from \"./amethyst_block.json\"\nimport amethystCluster from \"./amethyst_cluster.json\"\nimport ancientDebris from \"./ancient_debris.json\"\nimport birchLog from \"./birch_log.json\"\nimport cherryLog from \"./cherry_log.json\"\nimport coalOre from \"./coal_ore.json\"\nimport copperOre from \"./copper_ore.json\"\nimport crimsonStem from \"./crimson_stem.json\"\nimport darkOakLog from \"./dark_oak_log.json\"\nimport deepslate from \"./deepslate.json\"\nimport deepslateCoalOre from \"./deepslate_coal_ore.json\"\nimport deepslateCopperOre from \"./deepslate_copper_ore.json\"\nimport deepslateDiamondOre from \"./deepslate_diamond_ore.json\"\nimport deepslateEmeraldOre from \"./deepslate_emerald_ore.json\"\nimport deepslateGoldOre from \"./deepslate_gold_ore.json\"\nimport deepslateIronOre from \"./deepslate_iron_ore.json\"\nimport deepslateLapisOre from \"./deepslate_lapis_ore.json\"\nimport deepslateRedstoneOre from \"./deepslate_redstone_ore.json\"\nimport diamondOre from \"./diamond_ore.json\"\nimport emeraldOre from \"./emerald_ore.json\"\nimport goldOre from \"./gold_ore.json\"\nimport ironOre from \"./iron_ore.json\"\nimport jungleLog from \"./jungle_log.json\"\nimport lapisOre from \"./lapis_ore.json\"\nimport mangroveLog from \"./mangrove_log.json\"\nimport netherGoldOre from \"./nether_gold_ore.json\"\nimport oakLog from \"./oak_log.json\"\nimport obsidian from \"./obsidian.json\"\nimport quartzOre from \"./quartz_ore.json\"\nimport redstoneOre from \"./redstone_ore.json\"\nimport spruceLog from \"./spruce_log.json\"\nimport stone from \"./stone.json\"\nimport type { BlockConfig } from \"./types\"\nimport warpedStem from \"./warped_stem.json\"\n\nexport default {\n  acacia_log: acaciaLog,\n  amethyst_block: amethystBlock,\n  amethyst_cluster: amethystCluster,\n  ancient_debris: ancientDebris,\n  birch_log: birchLog,\n  cherry_log: cherryLog,\n  coal_ore: coalOre,\n  copper_ore: copperOre,\n  crimson_stem: crimsonStem,\n  dark_oak_log: darkOakLog,\n  deepslate: deepslate,\n  deepslate_coal_ore: deepslateCoalOre,\n  deepslate_copper_ore: deepslateCopperOre,\n  deepslate_diamond_ore: deepslateDiamondOre,\n  deepslate_emerald_ore: deepslateEmeraldOre,\n  deepslate_gold_ore: deepslateGoldOre,\n  deepslate_iron_ore: deepslateIronOre,\n  deepslate_lapis_ore: deepslateLapisOre,\n  deepslate_redstone_ore: deepslateRedstoneOre,\n  diamond_ore: diamondOre,\n  emerald_ore: emeraldOre,\n  gold_ore: goldOre,\n  iron_ore: ironOre,\n  jungle_log: jungleLog,\n  lapis_ore: lapisOre,\n  mangrove_log: mangroveLog,\n  nether_gold_ore: netherGoldOre,\n  oak_log: oakLog,\n  obsidian: obsidian,\n  quartz_ore: quartzOre,\n  redstone_ore: redstoneOre,\n  spruce_log: spruceLog,\n  stone: stone,\n  warped_stem: warpedStem,\n} as Record<string, BlockConfig>\n","import type { NumberRange as INumberRange } from \"@minecraft/common\"\n\nimport { range } from \"./util/math\"\n\nexport class NumberRange implements INumberRange {\n  min: number\n  max: number\n  step: number\n\n  constructor(min: number, max: number, step = 1) {\n    this.min = min\n    this.max = max\n    this.step = step\n  }\n  toArray() {\n    return range(this.min, this.max + this.step, this.step)\n  }\n\n  get array() {\n    return this.toArray()\n  }\n\n  includes(n: number) {\n    return this.array.includes(n)\n  }\n\n  [Symbol.iterator]() {\n    return this.array.values()\n  }\n}\n","import { each } from \"../util/index\"\nimport { withProbability } from \"../util/math\"\n\nexport interface ILootTableItemConfig<T> {\n  weight: number\n  value: T\n}\n\nexport class LootTable<T = number> {\n  constructor(items: Array<number | ILootTableItemConfig<T>>) {\n    if (items)\n      each(items, (item) => {\n        if (typeof item === \"number\") this.addItem({ weight: 1, value: item })\n        else this.addItem(item)\n      })\n  }\n\n  table = new Set<ILootTableItemConfig<T>>()\n  totalWeight = 0\n\n  addItem(item: ILootTableItemConfig<T>) {\n    this.table.add(item)\n    this.totalWeight += item.weight\n  }\n\n  getResult() {\n    let total = 0\n    for (const { weight, value } of this.table) {\n      if (withProbability(weight / (this.totalWeight - total))) return value\n      total += weight\n    }\n\n    throw new Error(\"Unexpected error.\")\n  }\n\n  [Symbol.iterator]() {\n    return this.table[Symbol.iterator]()\n  }\n}\n","import {\n  type BlockDropsConfig,\n  type BlockDropsConfigOption,\n  FortuneRules,\n  type ItemDropConfig,\n} from \"@/data/block/types\"\nimport { BlockPermutation } from \"@minecraft/server\"\nimport type { MinecraftItemTypes } from \"@minecraft/vanilla-data\"\n\nimport BlockDefinition from \"../../../data/block/index\"\nimport { NumberRange } from \"../../NumberRange.class\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\nimport { binomialDistribution, range } from \"../../util/math\"\nimport { LootTable } from \"../LootTable.class\"\n\nclass DropItem {\n  itemId: MinecraftItemTypes\n  range: NumberRange\n  amountLootTable: LootTable\n  maxAmount: number\n  xpRange: NumberRange\n  damage: number\n\n  constructor({\n    item_id: itemId,\n    default_range: defaultRange = [1, 1],\n    max_amount: maxAmount = Number.POSITIVE_INFINITY,\n    xp_range: xpRange = [0, 0],\n    damage = 1,\n  }: ItemDropConfig) {\n    this.itemId = itemId\n    this.range = new NumberRange(...defaultRange)\n    this.amountLootTable = new LootTable(this.range.toArray())\n    this.maxAmount = maxAmount\n    this.xpRange = new NumberRange(...xpRange)\n    this.damage = damage\n  }\n\n  getResult(): Array<{\n    itemId: MinecraftItemTypes\n    amount: number\n    xp?: number\n    damage?: number\n  }> {\n    return [\n      {\n        itemId: this.itemId,\n        amount: Math.min(this.amountLootTable.getResult(), this.maxAmount),\n        xp: new LootTable(this.xpRange.toArray()).getResult(),\n        damage: this.damage,\n      },\n    ]\n  }\n}\n\nclass DropItemGroup {\n  items: DropItem[]\n\n  constructor(group: ItemDropConfig[]) {\n    this.items = group.map((e) => new DropItem(e))\n  }\n  getResult() {\n    const output: ReturnType<DropItem[\"getResult\"]> = []\n    each(this.items, (item: DropItem) => output.push(...item.getResult()))\n    return output\n  }\n}\n\nexport class BlockDrops {\n  blockTypeId: string\n  drops: BlockDropsConfig\n\n  blockItem: DropItem\n  rawResource: DropItem\n  refinedResource: DropItem | undefined\n  seedResource: DropItem\n  immatureResource: DropItem\n\n  fortuneRule: BlockDropsConfig[number][\"fortune_rule\"]\n\n  custumLootTables: BlockDropsConfigOption[\"custom\"]\n\n  constructor(\n    blockTypeId: string,\n    useItem: MinecraftItemTypes | \"<empty>\" = \"<empty>\"\n  ) {\n    const identifier = removeMinecraftNamespace(blockTypeId)\n    const drops = BlockDefinition[identifier]?.drops\n\n    if (!drops) throw new Error(`Block ${identifier} has not been supported.`)\n\n    this.blockTypeId = blockTypeId\n    this.drops = drops\n\n    const dropConfig = this.getDropConfig(useItem)\n    if (!dropConfig) {\n      throw new Error(`Couldn't find drop config when dig with ${useItem}`)\n    }\n\n    this.blockItem = new DropItem({\n      item_id: BlockPermutation.resolve(this.blockTypeId).getItemStack()\n        ?.typeId as MinecraftItemTypes,\n    })\n    this.rawResource = dropConfig.raw\n      ? new DropItem(dropConfig.raw)\n      : this.blockItem\n\n    // for ore like\n    this.refinedResource =\n      dropConfig.refined && new DropItem(dropConfig.refined)\n\n    // for crop like\n    this.seedResource = dropConfig.seed\n      ? new DropItem(dropConfig.seed)\n      : this.rawResource\n    this.immatureResource = dropConfig.immature\n      ? new DropItem(dropConfig.immature)\n      : this.seedResource\n\n    this.fortuneRule = dropConfig.fortune_rule\n\n    // only work with custom rule\n    if (this.fortuneRule === FortuneRules.Custom) {\n      if (!dropConfig.option?.custom)\n        throw new Error(\n          \"You must provide a custom loot table for the custom fortune rule.\"\n        )\n\n      this.custumLootTables = dropConfig.option.custom\n    }\n  }\n\n  getDropConfig(useItem: MinecraftItemTypes | \"<empty>\") {\n    return (\n      this.drops.find((e) => {\n        const digBy = e.dig_by\n        if (Array.isArray(digBy)) return digBy.includes(useItem)\n        if (typeof digBy === \"string\") return digBy === useItem\n      }) ?? this.drops.find((e) => e.dig_by === \"<default>\")\n    )\n  }\n\n  getDrops({ withFortune = 0, withSilkTouch = false, immature = false } = {}) {\n    if (withFortune && withSilkTouch)\n      throw new Error(\"Could not call with both fortune and silk_touch.\")\n\n    if (immature) {\n      return this.immatureResource.getResult()\n    }\n    if (withSilkTouch) {\n      return this.blockItem.getResult()\n    }\n    if (withFortune !== 0 && this.fortuneRule !== undefined) {\n      const level = withFortune\n\n      switch (this.fortuneRule) {\n        case FortuneRules.Ore: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...range(2, level + 2),\n            {\n              weight: 2,\n              value: 1,\n            },\n          ])\n          rawResource.amount *= lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Melon: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable([\n            ...this.rawResource.amountLootTable,\n            ...range(1, level + 1).map((i) => ({\n              weight: 1,\n              value: Math.min(\n                this.rawResource.maxAmount,\n                this.rawResource.range.max + i\n              ),\n            })),\n          ])\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Grass: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          if (rawResource.amount === 0) return [rawResource]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n          return [rawResource]\n        }\n        case FortuneRules.Flower: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const lootTable = new LootTable(range(1, level * 2 + 2))\n          rawResource.amount = lootTable.getResult()\n\n          return [rawResource]\n        }\n        case FortuneRules.Crop: {\n          const rawResource = this.rawResource.getResult()[0]\n\n          const distribution = binomialDistribution(level + 3, 4 / 7)\n          const lootTable = new LootTable(\n            range(0, level + 4).map((i) => ({\n              weight: distribution(i),\n              value: i,\n            }))\n          )\n\n          return [\n            rawResource,\n            {\n              // TODO: use class\n              itemId: this.seedResource.itemId,\n              amount: lootTable.getResult(),\n            },\n          ]\n        }\n        case FortuneRules.Custom: {\n          const lootTable = new LootTable<ItemDropConfig[]>(\n            this.custumLootTables![`${level}` as \"0\" | \"1\" | \"2\" | \"3\"]\n          )\n          const customItemDrop = new DropItemGroup(lootTable.getResult())\n          return customItemDrop.getResult()\n        }\n      }\n    }\n\n    return this.rawResource.getResult()\n  }\n}\n","import {\n  type Block,\n  BlockPermutation,\n  BlockVolume,\n  ItemStack,\n} from \"@minecraft/server\"\nimport type {\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n} from \"@minecraft/vanilla-data\"\n\nimport {\n  BlockLocation,\n  type Direction,\n  type Location,\n  LocationUtils,\n} from \"../../location/index\"\nimport { each } from \"../../util/index\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\nimport { WrappedItemStack } from \"../item/index\"\nimport { BlockDrops } from \"./BlockDrops.class\"\n\nexport class WrappedBlock extends WrapperTemplate {\n  _block: Block\n  type: Block[\"type\"]\n  typeId: MinecraftBlockTypes\n  location: BlockLocation\n  dimension: Block[\"dimension\"]\n  permutation: Block[\"permutation\"]\n\n  constructor(block: Block) {\n    super()\n\n    this._block = block\n\n    this.type = block.type\n    this.typeId = block.typeId as MinecraftBlockTypes\n    this.location = BlockLocation.create(block.location)\n    this.dimension = block.dimension\n    this.permutation = block.permutation\n  }\n\n  getOffsetBlock(v: Location | BlockLocation) {\n    const location = this.location.clone().offset(v)\n    return new WrappedBlock(this.dimension.getBlock(location))\n  }\n  getNeighbourBlock(direction: Direction) {\n    const offset = LocationUtils.getDirectionOffset(direction)\n    return this.getOffsetBlock(offset)\n  }\n\n  getState(name: string) {\n    return this.permutation.getState(name)\n  }\n  hasState(name: string) {\n    return !!this.getState(name)\n  }\n  setState(name: string, value: string | number | boolean) {\n    const states = this.permutation.getAllStates()\n    states[name] = value\n    this._block.setPermutation(BlockPermutation.resolve(this.typeId, states))\n  }\n\n  canBeDugBy(itemTypeId: MinecraftItemTypes | \"<empty>\" = \"<empty>\") {\n    return !!new BlockDrops(this.typeId).getDropConfig(itemTypeId)\n  }\n\n  destroy() {\n    this.dimension.fillBlocks(\n      new BlockVolume(this.location, this.location),\n      BlockPermutation.resolve(\"minecraft:air\")\n    )\n  }\n  breakBy(useItemStack: ItemStack | WrappedItemStack) {\n    const drops = new BlockDrops(\n      this.typeId,\n      (useItemStack.typeId as MinecraftItemTypes) ?? \"<empty>\"\n    )\n\n    this.destroy()\n\n    const result = (() => {\n      if (useItemStack) {\n        const item =\n          useItemStack instanceof WrappedItemStack\n            ? useItemStack\n            : new WrappedItemStack(useItemStack)\n        return drops.getDrops({\n          withFortune: item.enchants.getEnchantment(\"fortune\")?.level ?? 0,\n          withSilkTouch: item.enchants.hasEnchantment(\"silk_touch\"),\n        })\n      }\n      return drops.getDrops()\n    })()\n\n    const spawnDrops = () => {\n      each(result, (drop) => {\n        this.dimension.spawnItem(\n          new ItemStack(drop.itemId, drop.amount),\n          this.location\n        )\n        while (drop.xp--)\n          this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n      })\n    }\n\n    const getTotalDamage = () => {\n      let damage = 0\n      each(result, (drop) => {\n        if (drop.damage) damage += drop.damage\n      })\n      return damage\n    }\n\n    return { drops: result, spawnDrops, getTotalDamage }\n  }\n}\n","import { WrapperTemplate } from \"../WrapperTemplate.class\"\nimport type { WrappedBlock } from \"./WrappedBlock.class\"\n\nexport class WrappedBlocks extends WrapperTemplate {\n  _blocks: WrappedBlock[]\n\n  constructor(blocks: WrappedBlock[]) {\n    super()\n\n    this._blocks = blocks\n  }\n\n  get _block() {\n    return this._blocks[0]\n  }\n\n  get type() {\n    return this._block.type\n  }\n  get typeId() {\n    return this._block.typeId\n  }\n  get location() {\n    return this._block.location\n  }\n  get dimension() {\n    return this._block.dimension\n  }\n  get permutation() {\n    return this._block.permutation\n  }\n}\n","import type { Block } from \"@minecraft/server\"\n\nimport { BlockLocation, Directions } from \"../../location/index\"\nimport { WrappedBlock } from \"./WrappedBlock.class\"\nimport { WrappedBlocks } from \"./WrappedBlocks.class\"\n\nimport {\n  COPPER_DOORS,\n  DOORS,\n  WOODEN_DOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class DoorBlock extends WrappedBlocks {\n  constructor(block: Block) {\n    DoorBlock.assert(block)\n\n    const wrappedBlock =\n      block instanceof WrappedBlock ? block : new WrappedBlock(block)\n\n    const isUpper = wrappedBlock.getState(\"upper_block_bit\")\n    const blocks = [\n      // _lower\n      isUpper ? wrappedBlock.getNeighbourBlock(Directions.Down) : wrappedBlock,\n      // _upper\n      isUpper ? wrappedBlock : wrappedBlock.getNeighbourBlock(Directions.Up),\n    ]\n\n    super(blocks)\n  }\n\n  static match(block) {\n    return DOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (DoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a door.`)\n  }\n\n  get _lower() {\n    return this._blocks[0]\n  }\n  get _upper() {\n    return this._blocks[1]\n  }\n\n  get opened() {\n    return this._lower.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // the direction you are facing when you place the door\n    const directionCode = this._lower.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 1:\n        return Directions.South\n      case 2:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get hingeSide() {\n    return this._upper.getState(\"door_hinge_bit\")\n    // true -> right\n    // false -> left\n  }\n\n  isWooden() {\n    return WOODEN_DOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_DOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this._lower.setState(\"open_bit\", true)\n  }\n  close() {\n    this._lower.setState(\"open_bit\", false)\n  }\n\n  getRelated({ shouldBeTheSameType = true } = {}) {\n    // 获取可以与该门双开的另一个门和这个门组成的列表\n    const output: DoorBlock[] = [this]\n\n    // 1. 获取另一个门的位置\n    //    根据门的方向和门轴位置确定\n    // e.g. 如果一个门的朝向是东边，门轴在左边（即北边）\n    //      那么另一个门应该位于南边，即 z+1 的位置\n    const facingDirection = this.facingDirection\n    const hingeSide = this.hingeSide\n    const offset = BlockLocation.create({\n      x: Number(\n        facingDirection.isSouth()\n          ? hingeSide || -1\n          : facingDirection.isNorth()\n            ? !hingeSide || -1\n            : 0\n      ),\n      y: 0,\n      z: Number(\n        facingDirection.isEast()\n          ? !hingeSide || -1\n          : facingDirection.isWest()\n            ? hingeSide || -1\n            : 0\n      ),\n    })\n\n    // 2. 进行判断\n    const relatedBlock = this._lower.getOffsetBlock(offset)\n    if (DoorBlock.match(relatedBlock)) {\n      const relatedDoor = new DoorBlock(relatedBlock._block)\n      // 另一扇门应该方向相同，而门轴相反\n      if (\n        relatedDoor.canBeOpenedByHand() &&\n        (shouldBeTheSameType ? relatedDoor.typeId === this.typeId : true) &&\n        relatedDoor.facingDirection.code === facingDirection.code &&\n        relatedDoor.hingeSide === !hingeSide\n      )\n        output.push(relatedDoor)\n    }\n\n    return output\n  }\n}\n","import type { Entity } from \"@minecraft/server\"\n\nimport { Directions, Location } from \"../../location/index\"\nimport { removeMinecraftNamespace } from \"../../util/game\"\nimport { each } from \"../../util/index\"\n\nimport type { MinecraftEntityTypes } from \"@minecraft/vanilla-data\"\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedEntity extends WrapperTemplate {\n  _entity: Entity\n  id: Entity[\"id\"]\n  typeId: MinecraftEntityTypes\n  scoreboardIdentity: Entity[\"scoreboardIdentity\"]\n  components = new Map()\n\n  constructor(entity: Entity) {\n    super()\n\n    this._entity = entity\n\n    this.id = entity.id\n    this.typeId = entity.typeId as MinecraftEntityTypes\n\n    this.scoreboardIdentity = entity.scoreboardIdentity\n\n    const components = entity.getComponents()\n    each(components, (component) => {\n      this.components.set(removeMinecraftNamespace(component.typeId), component)\n    })\n  }\n\n  get nameTag() {\n    return this._entity.nameTag\n  }\n  get location() {\n    return Location.create(this._entity.location)\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  get isSneaking() {\n    return this._entity.isSneaking\n  }\n\n  getRotation() {\n    return this._entity.getRotation()\n  }\n\n  getFacingDirectionXZ() {\n    const rotation = this.getRotation().y\n\n    if (rotation > -135 && rotation <= -45) return Directions.East\n    if (rotation > -45 && rotation <= 45) return Directions.South\n    if (rotation > 45 && rotation <= 135) return Directions.West\n    if (rotation > 135 || rotation <= -135) return Directions.North\n\n    throw new Error(\"Unexpected error.\")\n  }\n}\n","import {\n  Dimension,\n  Entity,\n  MinecraftDimensionTypes,\n  type Player,\n  world,\n} from \"@minecraft/server\"\n\nimport { BetterConsole } from \"../BetterConsole.class\"\nimport { eachAsync } from \"../util/index\"\n\ntype CommandConfig = {\n  regex: RegExp\n  runner: (commandString: string, target: Player) => Promise<void>\n}\n\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld)\n\nconst CUSTOM_COMMAND_SET = new Set<CommandConfig>()\n\nexport class Commands {\n  static run(commandString: string, target: Entity | Dimension = overworld) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity)\n      return target.runCommand(commandString)\n    throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static async asyncRun(\n    commandString: string,\n    target: Entity | Dimension = overworld\n  ) {\n    // @ts-ignore\n    if (target instanceof Dimension || target instanceof Entity) {\n      const customCommands = [...CUSTOM_COMMAND_SET]\n        .filter(({ regex }) => regex.test(commandString))\n        .map((e) => e.runner)\n      if (customCommands.length)\n        await eachAsync(\n          customCommands,\n          async (runner) => await runner(commandString, target)\n        )\n      else return await target.runCommandAsync(commandString)\n    } else throw new TypeError(\"Target must be Entity or Dimension.\")\n  }\n  static register(\n    prefix: string,\n    command: string,\n    callback: (argv: string[], target: Player) => Promise<void>\n  ) {\n    if (prefix.startsWith(\"/\"))\n      throw new Error(\"Unable to register slash commands.\")\n\n    const regex = new RegExp(`^${prefix}${command}( |$)`)\n    const runner: CommandConfig[\"runner\"] = async (commandString, target) => {\n      const argv = commandString\n        .split(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n        .filter((e) => e.trim().length > 0)\n      await callback(argv, target)\n    }\n    CUSTOM_COMMAND_SET.add({ regex, runner })\n\n    world.beforeEvents.chatSend.subscribe((event) => {\n      if (regex.test(event.message)) {\n        event.cancel = true\n\n        runner(event.message, event.sender).catch(BetterConsole.error)\n      }\n    })\n  }\n}\n\nexport default Commands\n","import type { Container, ItemStack } from \"@minecraft/server\"\n\nimport { WrapperTemplate } from \"../WrapperTemplate.class\"\n\nexport class WrappedContainer extends WrapperTemplate {\n  _container: Container\n\n  constructor(container: Container) {\n    super()\n\n    this._container = container\n  }\n\n  get size() {\n    return this._container.size\n  }\n  get emptySlotsCount() {\n    return this._container.emptySlotsCount\n  }\n\n  getItem(slot: number) {\n    return this._container.getItem(slot)\n  }\n  setItem(slot: number, itemStack: ItemStack) {\n    return this._container.setItem(slot, itemStack)\n  }\n  tryAddItem(itemStack: ItemStack) {\n    return this._container.addItem(itemStack)\n  }\n}\n","import type { Container, Entity, ItemStack } from \"@minecraft/server\"\n\nimport type { WrappedEntity } from \"../entity\"\nimport { WrappedContainer } from \"./WrappedContainer.class\"\n\nexport class EntityContainer extends WrappedContainer {\n  _entity: Entity\n\n  constructor(entity: Entity | WrappedEntity, container: Container) {\n    super(container)\n\n    this._entity = entity\n  }\n\n  get location() {\n    return this._entity.location\n  }\n  get dimension() {\n    return this._entity.dimension\n  }\n\n  addItem(itemStack: ItemStack) {\n    const remain = this.tryAddItem(itemStack)\n\n    if (remain) this.dimension.spawnItem(remain, this.location)\n  }\n}\n","import {\n  type Entity,\n  GameMode,\n  type ItemStack,\n  type Player,\n} from \"@minecraft/server\"\n\nimport { Commands } from \"../../commands/index\"\nimport { each } from \"../../util/index\"\nimport { EntityContainer } from \"../container/index\"\nimport { WrappedEntity } from \"./WrappedEntity.class\"\n\nexport class WrappedPlayer extends WrappedEntity {\n  name: Player[\"name\"]\n\n  constructor(player: Player) {\n    super(player)\n\n    this.name = player.name\n  }\n\n  static match(entity: Entity | WrappedEntity) {\n    return entity.typeId === \"minecraft:player\"\n  }\n\n  get _player() {\n    return this._entity as Player\n  }\n\n  get experience() {\n    return this.addExperience(0)\n  }\n  get level() {\n    return this._player.level\n  }\n  get inventory() {\n    return new EntityContainer(this, this.components.get(\"inventory\").container)\n  }\n  get selectedSlotIndex() {\n    return this._player.selectedSlotIndex\n  }\n\n  getGameMode() {\n    const matches: GameMode[] = []\n    each(GameMode, (mode) => {\n      if (this.testGameMode(mode)) matches.push(mode)\n    })\n    return matches[0]\n  }\n  testGameMode(mode: GameMode) {\n    const playersUnderMode = this.dimension.getPlayers({ gameMode: mode })\n    return playersUnderMode.some((player) => player.id === this.id)\n  }\n  setGameMode(mode: GameMode) {\n    if (!Object.values(GameMode).includes(mode))\n      throw new TypeError(\"Unknown gamemode.\")\n    Commands.run(`gamemode ${mode}`, this._player)\n  }\n\n  getMainHandItem() {\n    return this.inventory.getItem(this.selectedSlotIndex)\n  }\n  setMainHandItem(item: ItemStack) {\n    this.inventory.setItem(this.selectedSlotIndex, item)\n  }\n\n  async useItemFromInventory(\n    slot: number,\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    let itemStack = this.inventory.getItem(slot)\n\n    itemStack = await callback(itemStack)\n\n    this.inventory.setItem(slot, itemStack)\n  }\n  async useMainHandItem(\n    callback: (itemStack: ItemStack | undefined) => Promise<ItemStack>\n  ) {\n    await this.useItemFromInventory(this.selectedSlotIndex, callback)\n  }\n\n  addExperience(amount = 0, { useXpOrb = false } = {}): number {\n    let xpAmount = amount\n\n    if (useXpOrb && amount >= 0) {\n      while (xpAmount--)\n        this.dimension.spawnEntity(\"minecraft:xp_orb\", this.location)\n\n      return this.experience\n    }\n\n    return this._player.addExperience(amount)\n  }\n  addLevels(amount = 0) {\n    return this._player.addLevels(amount)\n  }\n}\n","import type { Block, Player } from \"@minecraft/server\"\n\nimport { Directions } from \"../../location/index\"\nimport { WrappedPlayer } from \"../entity/index\"\nimport { WrappedBlock } from \"./WrappedBlock.class\"\n\nimport {\n  COPPER_TRAPDOORS,\n  TRAPDOORS,\n  WOODEN_TRAPDOORS,\n} from \"./BlockTypeGroups.enumeration\"\n\nexport class TrapdoorBlock extends WrappedBlock {\n  constructor(block: Block) {\n    TrapdoorBlock.assert(block)\n\n    super(block)\n  }\n\n  static match(block) {\n    return TRAPDOORS.has(block?.typeId)\n  }\n  static assert(block) {\n    if (TrapdoorBlock.match(block)) return true\n\n    throw new TypeError(`The \"${block.typeId}\" is not a trapdoor.`)\n  }\n\n  get opened() {\n    return this.getState(\"open_bit\")\n  }\n  get facingDirection() {\n    // trapdoor is on the >direction< side of a block\n    const directionCode = this.getState(\"direction\")\n    switch (directionCode) {\n      case 0:\n        return Directions.East\n      case 2:\n        return Directions.South\n      case 1:\n        return Directions.West\n      case 3:\n        return Directions.North\n      default:\n        // this branch can't be reached forever\n        throw new Error(\"Unkonw error.\")\n    }\n  }\n  get upsideOrDown() {\n    return this.getState(\"upside_down_bit\")\n  }\n\n  isWooden() {\n    return WOODEN_TRAPDOORS.has(this.typeId)\n  }\n  isCopper() {\n    return COPPER_TRAPDOORS.has(this.typeId)\n  }\n  isIron() {\n    return !this.canBeOpenedByHand()\n  }\n  canBeOpenedByHand() {\n    return this.isWooden() || this.isCopper()\n  }\n\n  open() {\n    this.setState(\"open_bit\", true)\n  }\n  close() {\n    this.setState(\"open_bit\", false)\n  }\n\n  getRelated(\n    player: Player,\n    { extensive = true, maxLength = 1, shouldBeTheSameType = true } = {}\n  ) {\n    // 获取可以与该活板门双开的另外一些活板门和这个活板门组成的列表\n    const output: TrapdoorBlock[] = [this]\n\n    if (maxLength > 0) {\n      // 1. 获取另一个活板门的位置\n      // e.g. 如果一个活板门位于一个方块的东边\n      //      那么另一个活板门应该位于东边，即 x+1 的位置\n      const relatedBlock = this.getNeighbourBlock(this.facingDirection)\n\n      // 2. 判断是否为相关活板门\n      if (TrapdoorBlock.match(relatedBlock)) {\n        // TODO: refactor _bloc6k\n        const relatedTrapdoor = new TrapdoorBlock(relatedBlock._block)\n        // 方向相反，上下位置相同\n        if (\n          relatedTrapdoor.canBeOpenedByHand() &&\n          (shouldBeTheSameType\n            ? relatedTrapdoor.typeId === this.typeId\n            : true) &&\n          relatedTrapdoor.facingDirection.isOppositeTo(this.facingDirection) &&\n          relatedTrapdoor.upsideOrDown === this.upsideOrDown\n        )\n          output.push(relatedTrapdoor)\n      }\n    }\n\n    if (extensive) {\n      let that: TrapdoorBlock = this\n      let needOpposite = false\n\n      // 仅 maxLength > 1 时才会运行\n      while (--maxLength) {\n        // 3. 获取扩展活板门\n        //    即能与该活板门延伸联动的另一个活板门\n        // @ts-ignore\n        const playerFacing = new WrappedPlayer(player).getFacingDirectionXZ()\n        const extensiveBlock = needOpposite\n          ? that.getNeighbourBlock(playerFacing.getOpposite())\n          : that.getNeighbourBlock(playerFacing)\n\n        if (TrapdoorBlock.match(extensiveBlock)) {\n          const extensiveTrapdoor = new TrapdoorBlock(extensiveBlock._block)\n\n          // 方向相同，上下位置相同\n          if (\n            extensiveTrapdoor.canBeOpenedByHand() &&\n            (shouldBeTheSameType\n              ? extensiveTrapdoor.typeId === this.typeId\n              : true) &&\n            extensiveTrapdoor.facingDirection.equals(this.facingDirection) &&\n            extensiveTrapdoor.upsideOrDown === this.upsideOrDown\n          ) {\n            const result = extensiveTrapdoor.getRelated(player, {\n              extensive: false,\n              maxLength,\n            })\n            if (result.length > 1) {\n              output.push(...result)\n\n              that = extensiveTrapdoor\n              continue\n            }\n          }\n        }\n\n        // 当玩家面对的方向可以联动的活板门数量不足时\n        // 反向查找\n        if (!needOpposite) {\n          needOpposite = true\n          that = this\n          // 因为此变向操纵消耗了一次迭代，故补充一次\n          maxLength++\n        } else {\n          break\n        }\n      }\n    }\n\n    return output\n  }\n}\n","import type { Player, RawMessage } from \"@minecraft/server\"\nimport {\n  type ActionFormData,\n  ActionFormResponse,\n  FormCancelationReason,\n  MessageFormData,\n  MessageFormResponse,\n  type ModalFormData,\n  ModalFormResponse,\n} from \"@minecraft/server-ui\"\n\nimport { asyncRun } from \"../util/game\"\n\ninterface DialogHandlers<T> {\n  dialog: ModalFormData | MessageFormData | ActionFormData\n  onClose?: () => Promise<T>\n  onSubmit?: (\n    submitted: NonNullable<ModalFormResponse[\"formValues\"]>\n  ) => Promise<T>\n  onSelectButton1?: () => Promise<T>\n  onSelectButton2?: () => Promise<T>\n  onSelect?: (\n    selected: NonNullable<ActionFormResponse[\"selection\"]>\n  ) => Promise<T>\n}\n\nexport class Dialog<T> implements DialogHandlers<T> {\n  static async confirm<U>({\n    title = \"确认\",\n    body,\n    target,\n    onCancel = async () => ({}) as U,\n    onConfirm = async () => ({}) as U,\n  }: {\n    title?: string\n    body: RawMessage | string\n    target: Player\n    onCancel?: () => Promise<U>\n    onConfirm?: () => Promise<U>\n  }): Promise<U | undefined> {\n    if (!body || !target) throw new Error()\n    const form = await asyncRun(() => {\n      return new Dialog<U>({\n        dialog: new MessageFormData()\n          .title(title)\n          .body(body)\n          .button1(\"CANCEL\")\n          .button2(\"OK\"),\n        onClose: onCancel,\n        onSelectButton1: onCancel,\n        onSelectButton2: onConfirm,\n      })\n    })\n\n    return await form.show(target)\n  }\n\n  dialog\n  onClose\n  onSubmit\n  onSelectButton1\n  onSelectButton2\n  onSelect\n\n  constructor({\n    dialog,\n    onClose = async () => ({}) as T,\n    onSubmit = async () => ({}) as T,\n    onSelectButton1 = async () => ({}) as T,\n    onSelectButton2 = async () => ({}) as T,\n    onSelect = async () => ({}) as T,\n  }: DialogHandlers<T>) {\n    this.dialog = dialog\n    this.onSubmit = onSubmit\n    this.onSelectButton1 = onSelectButton1\n    this.onSelectButton2 = onSelectButton2\n    this.onSelect = onSelect\n    this.onClose = onClose\n  }\n\n  async show(target: Player): Promise<T | undefined> {\n    let response: ModalFormResponse | MessageFormResponse | ActionFormResponse\n\n    target.sendMessage(\"[!] 新对话框已发送，请关闭命令输入栏或其他对话框\")\n\n    do {\n      response = await this.dialog.show(target)\n    } while (response.cancelationReason === FormCancelationReason.UserBusy)\n\n    if (\n      response.canceled &&\n      response.cancelationReason === FormCancelationReason.UserClosed\n    )\n      return await this.onClose()\n\n    if (response instanceof ModalFormResponse) {\n      if (!response.formValues) throw new Error(\"Unexpected error.\")\n\n      return await this.onSubmit(response.formValues)\n    }\n\n    if (response instanceof MessageFormResponse) {\n      if (response.selection === 0) return await this.onSelectButton1()\n      if (response.selection === 1) return await this.onSelectButton2()\n\n      throw new Error(\"Unexpected error.\")\n    }\n\n    if (response instanceof ActionFormResponse) {\n      if (!response.selection) throw new Error(\"Unexpected error.\")\n\n      return await this.onSelect(response.selection)\n    }\n  }\n}\n\nexport default Dialog\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import type {\n  Player,\n  ScoreboardIdentity,\n  ScoreboardObjective,\n} from \"@minecraft/server\"\n\nimport md5 from \"md5\"\n\nimport { asyncRun, getOrAddObjective } from \"../util/game\"\nimport {\n  type Serializable,\n  deserialize,\n  each,\n  eachAsync,\n  serialize,\n} from \"../util/index\"\nimport type { WrappedPlayer } from \"../wrapper/entity\"\n\nexport const ALL_DATABASES = new Map<string, Database<any>>()\n\nexport class Database<T extends Serializable> {\n  id: string\n  objective: ScoreboardObjective\n\n  static open<U extends Serializable>(\n    player: Player | WrappedPlayer,\n    dbName: string\n  ) {\n    return new Database<U>(player, dbName)\n  }\n  constructor(player: Player | WrappedPlayer, dbName: string) {\n    const id = md5(`db:${dbName}_${player.id}`).slice(8, 24)\n    this.id = id\n    this.objective = getOrAddObjective(id, `db:${dbName}`)\n    // this.player = player\n\n    // if (!(player instanceof Player)) this.fakePlayer = true\n\n    this._syncDataFromScoreboard()\n\n    ALL_DATABASES.set(id, this)\n  }\n\n  store = new Map<string, { value: T; participant: ScoreboardIdentity }>()\n\n  _syncDataFromScoreboard() {\n    this.store.clear()\n    each(this.objective.getParticipants(), (participant) => {\n      const data = deserialize(participant.displayName) as Record<string, T>\n      const key = Object.keys(data)[0]\n      const value = data[key]\n      this.store.set(key, { value, participant })\n    })\n  }\n  has(key: string) {\n    return this.store.has(key)\n  }\n  async delete(key: string) {\n    if (this.has(key)) {\n      const { participant } = this.store.get(key)!\n      await asyncRun(() => this.objective.removeParticipant(participant))\n      this.store.delete(key)\n      return true\n    }\n    return false\n  }\n  async clear() {\n    await eachAsync(\n      this.store,\n      async ([, { participant }]) =>\n        await asyncRun(() => this.objective.removeParticipant(participant))\n    )\n    this.store.clear()\n  }\n  get(key: string) {\n    return this.store.get(key)?.value\n  }\n  async set(key: string, value: T) {\n    await this.delete(key)\n    const data = serialize({ [key]: value }).replaceAll('\"', \"'\")\n    // FIXME: has ambiguity\n    if (data.length > 32767)\n      throw new RangeError(\n        \"Database: Only accepts a string value less than 32767 characters.\"\n      )\n    await asyncRun(() => this.objective.setScore(data, 1))\n\n    this._syncDataFromScoreboard()\n  }\n  getAll() {\n    const output: Record<string, T> = {}\n    for (const [key, value] of this) output[key] = value\n    return output\n  }\n  *entries(): Generator<[string, T]> {\n    for (const [key, { value }] of this.store.entries()) yield [key, value]\n  }\n  *keys(): Generator<string> {\n    for (const key of this.store.keys()) yield key\n  }\n  *values(): Generator<T> {\n    for (const { value } of this.store.values()) yield value\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nexport default Database\n","import { each, eachAsync, isAsyncFunc } from \"./util/index\"\n\nexport class EventEmitter {\n  _events: Record<string, Function[]> = {}\n\n  on(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      if (this._events[_eventName]) this._events[_eventName].push(listener)\n      else this._events[_eventName] = [listener]\n    } else {\n      if (this._events[eventName]) this._events[eventName].push(listener)\n      else this._events[eventName] = [listener]\n    }\n    return this\n  }\n  once(eventName: string, listener: Function) {\n    if (isAsyncFunc(listener)) {\n      const _eventName = `${eventName}.async`\n      const _listener = async (...args: any[]) => {\n        await listener(...args)\n        this.removeListener(_eventName, _listener)\n      }\n      if (this._events[_eventName]) this._events[_eventName].push(_listener)\n      else this._events[_eventName] = [_listener]\n    } else {\n      const _listener = (...args: any[]) => {\n        listener(...args)\n        this.removeListener(eventName, _listener)\n      }\n      if (this._events[eventName]) this._events[eventName].push(_listener)\n      else this._events[eventName] = [_listener]\n    }\n    return this\n  }\n  removeListener(eventName: string, listener: Function) {\n    if (this._events[eventName]) {\n      const newListeners: Function[] = []\n      each(this._events[eventName], (_listener) => {\n        if (_listener !== listener) newListeners.push(_listener)\n      })\n      this._events[eventName] = newListeners\n    }\n    return this\n  }\n  async emit(eventName: string, ...args: any[]) {\n    if (this._events[eventName]) {\n      each(this._events[eventName], (listener) => listener(...args))\n    }\n    await this.asyncEmit(eventName, ...args)\n  }\n  async asyncEmit(eventName: string, ...args: any[]) {\n    const _eventName = `${eventName}.async`\n    if (this._events[_eventName]) {\n      await eachAsync(\n        this._events[_eventName],\n        async (listener) => await listener(...args)\n      )\n    }\n  }\n  addListener(eventName: string, listener: Function) {\n    return this.on(eventName, listener)\n  }\n  off(eventName: string, listener: Function) {\n    return this.removeListener(eventName, listener)\n  }\n}\n\nexport default EventEmitter\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { NumberRange } from \"../NumberRange.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemRange {\n  name: string\n  description: string\n  range?: [number, number, number?]\n  defaultValue?: number\n  reload?: boolean\n  events?: {\n    inited?: (selected: number, player: Player) => void\n    changed?: (selected: number, original: number, player: Player) => void\n    selected?: (selected: number, original: number, player: Player) => void\n  }\n}\n\nexport class OptionItemRange {\n  name: string\n  description: string\n  range: NumberRange\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: number | undefined\n  selected: number | undefined\n\n  constructor({\n    name,\n    description,\n    range = [0, 1, 1],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: {\n    _player: Player\n  } & IOptionItemRange) {\n    this.name = name\n    this.description = description\n    this.range = new NumberRange(...range)\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this._includes(defaultValue))\n      this.selected = defaultValue\n    else this.selected = this.range.min\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: number) {\n    if (this.selected !== value && this._includes(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  _includes(value: number) {\n    return this.range.includes(value)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { EventEmitter } from \"../EventEmitter.class\"\nimport { each } from \"../util/index\"\n\nexport interface IOptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Array<[T, string?]>\n  defaultValue?: T\n  reload?: boolean\n  events?: {\n    inited?: (selected: T, player: Player) => void\n    changed?: (selected: T, original: T, player: Player) => void\n    selected?: (selected: T, original: T, player: Player) => void\n  }\n}\n\nexport class OptionItemSelection<T extends string | number | boolean> {\n  name: string\n  description: string\n  values: Map<T, string>\n  reload?: boolean\n  events: EventEmitter\n  _player: Player\n\n  original: T | undefined\n  selected: T | undefined\n\n  constructor({\n    name,\n    description,\n    values = [],\n    defaultValue,\n    events,\n    reload,\n    _player,\n  }: { _player: Player } & IOptionItemSelection<T>) {\n    this.name = name\n    this.description = description\n    this.values = new Map(\n      //@ts-ignore\n      values.map((value) => {\n        if (value[0] === true && !value[1]) value[1] = \"开启\"\n        else if (value[0] === false && !value[1]) value[1] = \"关闭\"\n        return value\n      })\n    )\n    this.events = new EventEmitter()\n    this.reload = reload\n    this._player = _player\n\n    if (events)\n      each(events, (listener, eventName) => this.events.on(eventName, listener))\n\n    if (defaultValue !== undefined && this.hasVal(defaultValue))\n      this.selected = defaultValue\n    else if (values[0]) this.selected = values[0][0]\n\n    this.events.emit(\"inited\", this.selected, _player)\n    this.events.emit(\"changed\", this.selected, undefined, _player)\n  }\n  select(value: T) {\n    if (this.selected !== value && this.hasVal(value)) {\n      this.original = this.selected\n      this.selected = value\n      this.events.emit(\"selected\", this.selected, this.original, this._player)\n      this.events.emit(\"changed\", this.selected, this.original, this._player)\n      return true\n    }\n    return false\n  }\n  hasVal(value: T) {\n    return this.values.has(value) || !this.values.size\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ModalFormData } from \"@minecraft/server-ui\"\n\nimport { Database } from \"../database/index\"\nimport { Dialog } from \"../dialog/index\"\nimport { each, eachAsync } from \"../util/index\"\nimport { type IOptionItemRange, OptionItemRange } from \"./OptionItemRange.class\"\nimport {\n  type IOptionItemSelection,\n  OptionItemSelection,\n} from \"./OptionItemSelection.class\"\n\nexport class PlayerOption {\n  name: string\n  db: Database<string | number | boolean>\n  player: Player\n\n  constructor(player: Player, name: string) {\n    this.name = name\n    this.db = Database.open(player, `option-manager:${name}`)\n    this.player = player\n  }\n\n  items: Record<string, OptionItemSelection<any> | OptionItemRange> = {}\n  reload = false\n\n  addItem(\n    opts: { _player: Player } & (IOptionItemRange | IOptionItemSelection<any>)\n  ) {\n    //@ts-ignore\n    if (opts.range) this.items[opts.name] = new OptionItemRange(opts)\n    //@ts-ignore\n    else if (opts.values) this.items[opts.name] = new OptionItemSelection(opts)\n\n    return this\n  }\n  async _syncToDB() {\n    const data = this.getItemValMap()\n    await eachAsync(data, async (value, name) => {\n      await this.db.set(name, value)\n    })\n    await eachAsync(this.db, async ([name, _]) => {\n      if (!this.hasItem(name)) await this.db.delete(name)\n    })\n  }\n  async _syncFromDB() {\n    each(this.db, ([name, value]) =>\n      this.setItemVal(name, value, undefined, { syncFromDB: true })\n    )\n    await this._syncToDB()\n  }\n  async init() {\n    this.addItem = () => {\n      throw new Error(\"Can't add item after initialization.\")\n    }\n\n    await this._syncFromDB()\n    return this.getItemValMap()\n  }\n\n  _getItem(name: string) {\n    return this.items[name]\n  }\n  hasItem(name: string) {\n    return !!this.items[name]\n  }\n  setItemVal<T>(\n    name: string,\n    value: T,\n    callback: (\n      selected: T,\n      original: T,\n      map: Record<string, any>\n    ) => void = () => {},\n    { syncFromDB = false } = {}\n  ) {\n    const item = this._getItem(name)\n    if (item) {\n      //@ts-ignore\n      const result = item.select(value)\n      if (result) {\n        if (!syncFromDB && item.reload) this.reload = true\n        callback(item.selected, item.original, this.getItemValMap())\n      }\n    }\n    return this\n  }\n  getItemVal(name: string) {\n    const item = this._getItem(name)\n    if (item) return item.selected\n  }\n  getItemValMap() {\n    // TODO: use map\n    const result = {}\n    each(this.items, (_, name) => {\n      result[name] = this.getItemVal(name)\n    })\n    return result\n  }\n  async done(parentDialog?: Dialog<any>) {\n    const handleDone = async ({ reply = true } = {}) => {\n      await this._syncToDB()\n      if (reply) this.player.sendMessage(\"设置选项修改成功\")\n    }\n    if (this.reload) {\n      this.reload = false\n      await Dialog.confirm({\n        body: '你选择的项目更改后需要刷新脚本，请手动运行 \"/reload\" 命令。\\n\\n您也可以取消您的更改',\n        target: this.player,\n        onConfirm: async () => {\n          await handleDone({ reply: false })\n          // await Commands.asyncRun(\"reload\")\n        },\n        onCancel: async () => {\n          await this._syncFromDB()\n          await this.showDialog(parentDialog)\n        },\n      })\n    } else await handleDone()\n  }\n  async showDialog(parentDialog?: Dialog<any>) {\n    const form = new ModalFormData().title(`${this.name} 选项`)\n    const nameMap: Array<{\n      name: string\n      valuesMap:\n        | Map<boolean, boolean>\n        | Map<number, string | number | boolean>\n        | Map<number, number>\n    }> = []\n\n    each(this.items, (item) => {\n      if (item instanceof OptionItemSelection) {\n        const { name, description, values, selected } = item\n\n        if (values.size === 2 && values.get(true) && values.get(false)) {\n          const valuesMap = new Map()\n          each(values, ([e]) => valuesMap.set(e, e))\n          nameMap.push({ name, valuesMap })\n\n          form.toggle(description, selected)\n        } else {\n          const valueArray = [...values]\n\n          const valuesMap = new Map()\n          each(valueArray, ([e], i) => valuesMap.set(i, e))\n          nameMap.push({ name, valuesMap })\n\n          form.dropdown(\n            description,\n            valueArray.map((e) => e[1]),\n            valueArray.map((e) => e[0]).findIndex((e) => e === selected)\n          )\n        }\n      } else if (item instanceof OptionItemRange) {\n        const { name, description, range, selected } = item\n\n        const valuesMap = new Map()\n        each(range, (i) => valuesMap.set(i, i))\n        nameMap.push({ name, valuesMap })\n\n        form.slider(description, range.min, range.max, range.step, selected)\n      }\n    })\n\n    const dialog = new Dialog<void>({\n      dialog: form,\n      onClose: async () => {\n        if (parentDialog) await parentDialog.show(this.player)\n      },\n      onSubmit: async (result) => {\n        each(result, (valueIndex, nameIndex) => {\n          const { name, valuesMap } = nameMap[nameIndex]\n          const value = valuesMap.get(valueIndex)\n          this.setItemVal(name, value)\n        })\n        await this.done(parentDialog)\n      },\n    })\n    await dialog.show(this.player)\n  }\n}\n","import type { Player } from \"@minecraft/server\"\n\nimport { waitForFirstPlayerInitialSpawn } from \"../util/game\"\nimport { each, eachAsync } from \"../util/index\"\nimport type { IOptionItemRange } from \"./OptionItemRange.class\"\nimport type { IOptionItemSelection } from \"./OptionItemSelection.class\"\nimport { PlayerOption } from \"./PlayerOption.class\"\n\nexport class OptionNamespace {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n\n  players = new Map<Player, PlayerOption>()\n  _items = new Set()\n\n  addItem(opts: IOptionItemSelection<any> | IOptionItemRange) {\n    this._items.add(opts)\n    return this\n  }\n  applyPlayer(player: Player) {\n    if (this.players.has(player)) return this.players.get(player)\n    const playerOpt = new PlayerOption(player, this.name)\n    each(this._items, (item) => {\n      item._player = player\n      playerOpt.addItem(item)\n    })\n    this.players.set(player, playerOpt)\n    return playerOpt\n  }\n  async applyMainPlayer() {\n    const player = await waitForFirstPlayerInitialSpawn()\n    return this.applyPlayer(player)\n  }\n  async init() {\n    const valueMap = new Map()\n    await eachAsync(this.players, async ([player, playerOpt]) => {\n      const result = await playerOpt.init()\n      valueMap.set(player, result)\n    })\n    this.applyPlayer = () => {\n      throw new Error(\"Can't apply player after initialization.\")\n    }\n    return valueMap\n  }\n  getPlayer(player: Player) {\n    const playerOption = this.players.get(player)\n\n    if (!playerOption) throw new Error(\"Can't get player  options.\")\n\n    return playerOption\n  }\n}\n","import type { Player } from \"@minecraft/server\"\nimport { ActionFormData } from \"@minecraft/server-ui\"\nimport { Dialog } from \"../dialog/index\"\nimport { each } from \"../util/index\"\nimport { OptionNamespace } from \"./OptionNamespace.class\"\n\nexport class OptionManager {\n  namespaces = new Map<string, OptionNamespace>()\n\n  registerNamesapace(name: string) {\n    const namespaces = new OptionNamespace(name)\n    this.namespaces.set(name, namespaces)\n    return namespaces\n  }\n  getNamesapace(name: string) {\n    const namespace = this.namespaces.get(name)\n\n    if (!namespace) throw new Error(\"Can't get namespace.\")\n\n    return namespace\n  }\n  async showDialog(player: Player) {\n    const form = new ActionFormData()\n      .title(\"设置选项\")\n      .body(\"选择要设置的模块：\")\n    const nameMap: string[] = []\n    each(this.namespaces, ([name]) => {\n      nameMap.push(name)\n      form.button(name) // TODO: name -> desc\n    })\n\n    const dialog = new Dialog({\n      dialog: form,\n      onSelect: async (selection) => {\n        const name = nameMap[selection]\n        await this.getNamesapace(name).getPlayer(player).showDialog(dialog)\n      },\n    })\n    await dialog.show(player)\n  }\n}\n","import { OptionManager } from \"./OptionManager.class\"\n\nexport const optionManager = new OptionManager()\n","import { Commands } from \"../commands/index\"\nimport { asyncRun, errorHandler } from \"../util/game\"\nimport { optionManager } from \"./manager\"\n\nCommands.register(\"!\", \"option\", async (argv, sender) => {\n  switch (argv[1]) {\n    case \"dialog\":\n    case \"-d\":\n    case undefined: {\n      // TODO argv[2] -> namespace\n      await asyncRun(() => optionManager.showDialog(sender))\n      break\n    }\n    default: {\n      throw errorHandler(\"未知的子命令\", sender)\n    }\n  }\n})\n","import { optionManager } from \"@/lib/option-manager/index\"\n\nexport const option = optionManager\n  .registerNamesapace(\"better-door\")\n  .addItem({\n    name: \"door\",\n    description: \"允许双开门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:door -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"trapdoor\",\n    description: \"允许多开活板门\",\n    values: [[true], [false]],\n    defaultValue: false,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\"better-door:trapdoor -> from\", original, \"to\", selected),\n    },\n  })\n  .addItem({\n    name: \"max_trapdoor_length\",\n    description: \"允许多开活板门的最大距离\",\n    range: [1, 32],\n    defaultValue: 3,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:max_trapdoor_length -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n  .addItem({\n    name: \"should_be_the_same_type\",\n    description: \"是否需要是同种门\",\n    values: [[true], [false]],\n    defaultValue: true,\n    events: {\n      changed: (selected, original) =>\n        console.warn(\n          \"better-door:should_be_the_same_type -> from\",\n          original,\n          \"to\",\n          selected\n        ),\n    },\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { DoorBlock, TrapdoorBlock } from \"@/lib/wrapper/block/index\"\nimport { asyncRun } from \"@/util/game\"\nimport { each } from \"@/util/index\"\n\nimport { option } from \"./option\"\n\nexport const setupListener = () =>\n  world.beforeEvents.itemUseOn.subscribe((event) => {\n    const { block, source: player } = event\n    const playerOption = option.getPlayer(player)\n\n    const shouldBeTheSameType = playerOption.getItemVal(\n      \"should_be_the_same_type\"\n    )\n\n    if (DoorBlock.match(block) && playerOption.getItemVal(\"door\")) {\n      event.cancel = true\n      // @ts-ignore\n      const doors = DoorBlock.wrap(block).getRelated({ shouldBeTheSameType })\n      asyncRun(() => {\n        if (doors[0].opened) each(doors, (_) => _.close())\n        else each(doors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    } else if (\n      TrapdoorBlock.match(block) &&\n      playerOption.getItemVal(\"trapdoor\")\n    ) {\n      event.cancel = true\n      const maxLength = playerOption.getItemVal(\"max_trapdoor_length\")\n      // @ts-ignore\n      const trapdoors = TrapdoorBlock.wrap(block).getRelated(player, {\n        maxLength,\n        shouldBeTheSameType,\n      })\n      asyncRun(() => {\n        if (trapdoors[0].opened) each(trapdoors, (_) => _.close())\n        else each(trapdoors, (_) => _.open())\n      }).catch(BetterConsole.error)\n    }\n  })\n","import { world } from \"@minecraft/server\"\n\nimport { BetterConsole } from \"@/lib/BetterConsole.class\"\nimport { each } from \"@/util/index\"\n\nimport { setupListener } from \"./event\"\nimport { option } from \"./option\"\n\noption\n  .applyMainPlayer()\n  .then(() =>\n    each(world.getAllPlayers(), (player) => option.applyPlayer(player))\n  )\n  .then(() => option.init())\n  .then(() => setupListener())\n  .catch(BetterConsole.error)\n"],"names":["BetterConsole","error","err","console","stack","each","target","callbackfn","thisArg","Array","isArray","forEach","Symbol","iterator","item","call","Object","keys","key","i","eachAsync","asyncfn","length","safeEval","code","context","fn","Function","values","serialize","obj","Set","from","Map","entries","map","join","value","JSON","stringify","deserialize","str","parse","isAsyncFunc","func","prototype","toString","TypeGroup","add","types","type","has","clone","toArray","constructor","WOODEN_DOORS","COPPER_DOORS","DOORS","WOODEN_TRAPDOORS","COPPER_TRAPDOORS","TRAPDOORS","round","n","Math","floor","withProbability","p","random","equals","a","b","epsilon","abs","max","factorial","combination","k","binomial","binomialDistribution","range","to","step","output","push","VectorN","x","get","set","y","z","w","create","vector","Error","vectorStr","split","Number","toPrimitive","hint","axes","dimensions","index","VectorNUtils","_assertDimensions","val","subtract","multiply","divide","scale","negate","inverse","exchange","axis1","axis2","n0","n1","exactEquals","every","vectors","maxAxes","reduce","acc","fill","NEGATIVE_INFINITY","min","minAxes","POSITIVE_INFINITY","ceil","maxMagnitude","prev","curr","magnitude","minMagnitude","sqrt","squaredMagnitude","sum","distance","squaredDistance","diff","dot","normalize","angle","cosOmega","acos","lerp","t","slerp","omega","sinOmega","sin","EPSILON","ratioA","ratioB","bezier","points","newPoints","Vector3Utils","Vector3","cross","normalized","floored","ceiled","rounded","absoluted","copy","v","distanceTo","squaredDistanceTo","Location","centerCorrected","isNearTo","offset","BlockLocation","asyncRun","Promise","resolve","reject","system","run","errorHandler","errText","sendMessage","waitForFirstPlayerInitialSpawn","players","world","getAllPlayers","callback","afterEvents","playerSpawn","subscribe","event","initialSpawn","player","unsubscribe","getOrAddObjective","id","name","objective","scoreboard","getObjective","addObjective","removeMinecraftNamespace","identifier","replace","LocationUtils","getDirectionOffset","direction","isEast","isWest","isUp","isDown","isSouth","isNorth","between","Direction","getOpposite","directionCode","isOppositeTo","Directions","East","South","Up","West","North","Down","WrapperTemplate","wrap","args","tryWrap","match","assert","DIAMOND_PICKAXE_OR_UPPER","IRON_PICKAXE_OR_UPPER","STONE_PICKAXE_OR_UPPER","WOODEN_PICKAXE_OR_UPPER","WrappedItemStack","hasComponent","componentId","_item","enchants","components","ItemComponentTypes","Enchantable","itemStack","typeId","getComponents","component","FortuneRules","drops","dig_by","raw","item_id","ItemTypeGroups","default_range","fortune_rule","refined","xp_range","Ore","Melon","acacia_log","acaciaLog","amethyst_block","amethystBlock","amethyst_cluster","amethystCluster","ancient_debris","ancientDebris","birch_log","birchLog","cherry_log","cherryLog","coal_ore","coalOre","copper_ore","copperOre","crimson_stem","crimsonStem","dark_oak_log","darkOakLog","deepslate","deepslate_coal_ore","deepslateCoalOre","deepslate_copper_ore","deepslateCopperOre","deepslate_diamond_ore","deepslateDiamondOre","deepslate_emerald_ore","deepslateEmeraldOre","deepslate_gold_ore","deepslateGoldOre","deepslate_iron_ore","deepslateIronOre","deepslate_lapis_ore","deepslateLapisOre","deepslate_redstone_ore","deepslateRedstoneOre","diamond_ore","diamondOre","emerald_ore","emeraldOre","gold_ore","goldOre","iron_ore","ironOre","jungle_log","jungleLog","lapis_ore","lapisOre","mangrove_log","mangroveLog","nether_gold_ore","netherGoldOre","oak_log","oakLog","obsidian","quartz_ore","quartzOre","redstone_ore","redstoneOre","spruce_log","spruceLog","stone","warped_stem","warpedStem","NumberRange","array","includes","LootTable","addItem","table","totalWeight","weight","getResult","total","items","DropItem","itemId","amount","amountLootTable","maxAmount","xp","xpRange","damage","defaultRange","max_amount","DropItemGroup","group","e","BlockDrops","getDropConfig","useItem","find","digBy","getDrops","withFortune","withSilkTouch","immature","immatureResource","blockItem","fortuneRule","undefined","level","rawResource","lootTable","Grass","Flower","Crop","distribution","seedResource","Custom","custumLootTables","customItemDrop","blockTypeId","BlockDefinition","dropConfig","BlockPermutation","getItemStack","refinedResource","seed","option","custom","WrappedBlock","getOffsetBlock","location","dimension","getBlock","getNeighbourBlock","getState","permutation","hasState","setState","states","getAllStates","_block","setPermutation","canBeDugBy","itemTypeId","destroy","fillBlocks","BlockVolume","breakBy","useItemStack","result","getEnchantment","hasEnchantment","spawnDrops","drop","spawnItem","ItemStack","spawnEntity","getTotalDamage","block","WrappedBlocks","_blocks","blocks","DoorBlock","TypeError","_lower","_upper","opened","facingDirection","hingeSide","isWooden","isCopper","isIron","canBeOpenedByHand","open","close","getRelated","shouldBeTheSameType","relatedBlock","relatedDoor","wrappedBlock","isUpper","WrappedEntity","nameTag","_entity","isSneaking","getRotation","getFacingDirectionXZ","rotation","entity","scoreboardIdentity","overworld","getDimension","MinecraftDimensionTypes","CUSTOM_COMMAND_SET","Commands","commandString","Dimension","Entity","runCommand","customCommands","filter","regex","test","runner","runCommandAsync","register","prefix","command","startsWith","RegExp","argv","trim","beforeEvents","chatSend","message","cancel","sender","catch","WrappedContainer","size","_container","emptySlotsCount","getItem","slot","setItem","tryAddItem","container","EntityContainer","remain","WrappedPlayer","_player","experience","addExperience","inventory","selectedSlotIndex","getGameMode","matches","GameMode","mode","testGameMode","playersUnderMode","getPlayers","gameMode","some","setGameMode","getMainHandItem","setMainHandItem","useItemFromInventory","useMainHandItem","useXpOrb","xpAmount","addLevels","TrapdoorBlock","upsideOrDown","extensive","maxLength","relatedTrapdoor","that","needOpposite","playerFacing","extensiveBlock","extensiveTrapdoor","Dialog","confirm","title","body","onCancel","onConfirm","form","dialog","MessageFormData","button1","button2","onClose","onSelectButton1","onSelectButton2","show","response","cancelationReason","FormCancelationReason","UserBusy","canceled","UserClosed","ModalFormResponse","formValues","onSubmit","MessageFormResponse","selection","ActionFormResponse","onSelect","base64map","crypt","rotl","rotr","endian","randomBytes","bytes","bytesToWords","words","wordsToBytes","bytesToHex","hex","hexToBytes","c","parseInt","substr","bytesToBase64","base64","triplet","j","charAt","base64ToBytes","imod4","indexOf","pow","module","charenc","utf8","stringToBytes","bin","unescape","encodeURIComponent","bytesToString","decodeURIComponent","escape","charCodeAt","String","fromCharCode","isBuffer","isSlowBuffer","_isBuffer","readFloatLE","slice","require","md5","options","encoding","Uint8Array","m","l","d","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","s","_blocksize","_digestsize","digestbytes","asBytes","asString","ALL_DATABASES","Database","dbName","_syncDataFromScoreboard","store","clear","getParticipants","participant","data","displayName","delete","removeParticipant","replaceAll","RangeError","setScore","getAll","EventEmitter","on","eventName","listener","_eventName","_events","once","_listener","removeListener","newListeners","emit","asyncEmit","addListener","off","OptionItemRange","select","selected","_includes","original","events","description","defaultValue","reload","OptionItemSelection","hasVal","PlayerOption","opts","_syncToDB","getItemValMap","db","_","hasItem","_syncFromDB","setItemVal","syncFromDB","init","_getItem","getItemVal","done","parentDialog","handleDone","reply","showDialog","ModalFormData","nameMap","valuesMap","toggle","valueArray","dropdown","findIndex","slider","valueIndex","nameIndex","OptionNamespace","_items","applyPlayer","playerOpt","applyMainPlayer","valueMap","getPlayer","playerOption","OptionManager","registerNamesapace","namespaces","getNamesapace","namespace","ActionFormData","button","optionManager","changed","warn","setupListener","itemUseOn","source","doors","trapdoors","then"],"mappings":"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","x_google_ignoreList":[66,67,68,69]}