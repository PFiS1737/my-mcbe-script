import fs from "node:fs"
import nodePath from "node:path"
import { fileURLToPath } from "node:url"

import { toCamelCase } from "./index.js"

export function getFilename(importMeta) {
  return fileURLToPath(importMeta.url)
}

export function getDirname(importMeta) {
  return nodePath.dirname(getFilename(importMeta))
}

export function resolvePath(path, importMeta) {
  return nodePath.resolve(getDirname(importMeta), path)
}

export function createIndex(
  path,
  {
    suffixToRead = ".js",
    dataVersion,
    withDir = true,
    exportType = "object",
  } = {}
) {
  fs.rmSync(`${path}/index.js`, {
    force: true,
  })
  const files = fs
    .readdirSync(path, {
      withFileTypes: true,
    })
    .filter((item) => {
      return (
        (item.isFile() && item.name.endsWith(suffixToRead)) ||
        (withDir && item.isDirectory())
      )
    })
  const names = files.map(({ name }) => name.replace(suffixToRead, ""))
  if (exportType === "object") {
    const index = names.map(
      (name, i) =>
        `import ${toCamelCase(name)} from "./${
          files[i].isDirectory() ? `${name}/index.js` : name + suffixToRead
        }"`
    )
    index.unshift("// This file is automatically generated.")
    index.push(
      "",
      `export default {${
        dataVersion ? `\n    "_version": "${dataVersion}",` : ""
      }`,
      names.map((name) => `    "${name}": ${toCamelCase(name)}`).join(",\n"),
      "}",
      ""
    )
    fs.writeFileSync(`${path}/index.js`, index.join("\n"))
  } else if (exportType === "array") {
    const index = names.map(
      (name, i) =>
        `import item${i} from "./${
          files[i].isDirectory() ? `${name}/index.js` : name + suffixToRead
        }"`
    )
    index.unshift("// This file is automatically generated.")
    index.push(
      "",
      "export default [",
      names.map((_, i) => `    item${i}`).join(",\n"),
      "]",
      ""
    )
    fs.writeFileSync(`${path}/index.js`, index.join("\n"))
  }
}
